1
00:00:00,580 --> 00:00:05,490
我们可以用各种方式构建功能一样的图表

2
00:00:05,490 --> 00:00:09,510
如果使用面向对象语言 则可以创建顶点和

3
00:00:09,510 --> 00:00:10,520
边对象

4
00:00:10,520 --> 00:00:14,770
然后为每个设置属性 例如名称 强度 ID 编号等

5
00:00:15,990 --> 00:00:19,410
顶点可以具有一个与它连接的边列表 反之亦然

6
00:00:20,650 --> 00:00:24,520
如果需要搜索顶点和边对象

7
00:00:24,520 --> 00:00:27,419
则遍历图表会更加不方便

8
00:00:28,600 --> 00:00:31,890
可以通过几种方式在简单的图表上

9
00:00:31,890 --> 00:00:34,110
只用列表来表示边

10
00:00:34,110 --> 00:00:35,920
其中一个例子是边列表

11
00:00:35,920 --> 00:00:40,840
就像你会想到的 是边的列表

12
00:00:40,840 --> 00:00:45,680
边本身用两个元素来表示

13
00:00:45,680 --> 00:00:51,140
这些元素通常是与顶点的 ID 编号对应的数字

14
00:00:51,140 --> 00:00:52,322
因此

15
00:00:52,322 --> 00:00:57,590
最后该列表就是表示相互之间存在边的两个节点

16
00:00:57,590 --> 00:01:00,949
边列表是含有所有更小列表的列表

17
00:01:02,300 --> 00:01:06,190
因为边列表包含其他列表的列表

18
00:01:06,190 --> 00:01:10,840
所以叫做二维列表或 2D 列表

19
00:01:10,840 --> 00:01:13,470
如果你具有一个由列表构成的列表构成的列表

20
00:01:13,470 --> 00:01:15,841
则可以叫做 3D 列表 以此类推

21
00:01:15,841 --> 00:01:21,625
邻接表是表示边的另一种方式

22
00:01:21,626 --> 00:01:26,311
在邻接表中 顶点通常具有一个 ID 编号

23
00:01:26,311 --> 00:01:29,790
该编号对应的是数组中的索引

24
00:01:29,790 --> 00:01:33,920
在数组中 每个空位都用来存储

25
00:01:33,920 --> 00:01:36,150
具有该 ID 的节点的相邻节点的列表

26
00:01:37,180 --> 00:01:42,530
例如 索引 0 处的空位表示具有 ID 0 的顶点

27
00:01:42,530 --> 00:01:46,800
该顶点与一个节点共用一条边

28
00:01:46,800 --> 00:01:49,320
所以指向该节点的引用会存储在数组中的第一个空位处

29
00:01:50,390 --> 00:01:53,320
同样 邻接表是二维的

30
00:01:53,320 --> 00:01:55,860
因为它是一个包含其他列表的列表
