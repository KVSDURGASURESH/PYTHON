1
00:00:00,830 --> 00:00:04,149
Great, so
what's the efficiency of this algorithm?

2
00:00:04,150 --> 00:00:08,760
Well, we had to go through pretty
much the whole array a lot of times.

3
00:00:08,760 --> 00:00:10,640
Here's roughly what we did.

4
00:00:10,640 --> 00:00:14,823
Overall we had to do four or
n -1 iterations, and

5
00:00:14,823 --> 00:00:18,690
at each step we did n- 1 comparisons.

6
00:00:18,690 --> 00:00:26,630
So n- 1 comparisons for and n- 1
iterations gives us something like this.

7
00:00:26,630 --> 00:00:29,730
We can use a little algebra to
figure out what this simplifies to.

8
00:00:31,280 --> 00:00:33,640
And we get something
that looks like this.

9
00:00:33,640 --> 00:00:36,840
Again, don't worry too much
if you can't do the algebra.

10
00:00:36,840 --> 00:00:39,420
The minus one isn't changing much for
us so

11
00:00:39,420 --> 00:00:42,380
you could always just do n
times n equals n squared.

12
00:00:43,670 --> 00:00:49,440
Thus, we really don't need
this minus -2n+1 bit.

13
00:00:49,440 --> 00:00:50,800
We can get rid of it and

14
00:00:50,800 --> 00:00:54,980
that leaves us with this is
efficiency big o of n squared.

15
00:00:56,200 --> 00:00:58,920
Actually there's a way we could have
saved ourselves some time with this

16
00:00:58,920 --> 00:00:59,940
algorithm.

17
00:00:59,940 --> 00:01:04,800
If you noticed each time we went
through the array we compared the last

18
00:01:04,800 --> 00:01:07,960
few values even though we really
didn't need to after a while.

19
00:01:07,960 --> 00:01:11,390
It made sense to compare 7 and
8 when we were bubbling up 7.

20
00:01:11,400 --> 00:01:15,380
But when we were bubbling up
some of the lower numbers

21
00:01:15,380 --> 00:01:18,560
this comparison didn't
really change anything.

22
00:01:18,560 --> 00:01:22,220
The most common version of Bubble Sort
actually leaves out this step

23
00:01:22,220 --> 00:01:26,400
every time of comparing the last few
when you really don't need to do that.

24
00:01:26,400 --> 00:01:29,330
It assumes that after the first
iteration you know that eight

25
00:01:29,330 --> 00:01:30,410
is in the right place.

26
00:01:30,410 --> 00:01:33,600
So you don't need to check it
against anything else later.

27
00:01:33,600 --> 00:01:35,399
Again this will save us some time but

28
00:01:35,400 --> 00:01:39,320
it's not going to change our overall
run time of big O of n squared.

29
00:01:39,320 --> 00:01:43,250
I have a couple quick notes for
you okay.

30
00:01:43,250 --> 00:01:45,250
So we understand by the worst case and

31
00:01:45,250 --> 00:01:47,610
the average case are going
to be big O of n squared.

32
00:01:48,850 --> 00:01:52,590
However, the best case is
actually going to be big O of n.

33
00:01:52,600 --> 00:01:55,700
The best case would either be that the
array was already sorted in which we can

34
00:01:55,700 --> 00:02:00,310
just go through it once see that sorted
and not have to do anything else or if

35
00:02:00,310 --> 00:02:04,600
there's only one number that needs to be
bubbled up to a new place in the array.

36
00:02:04,600 --> 00:02:09,370
And one last thing, we didn't have to
use anything extra to do our sort.

37
00:02:09,370 --> 00:02:13,410
We had no extra arrays, no extra
data structures, nothing like that.

38
00:02:13,410 --> 00:02:17,400
Bubble Sort is a great example of
an in-place sorting algorithm,

39
00:02:17,400 --> 00:02:20,300
so the space complexity is constant.

40
00:02:20,300 --> 00:02:24,100
Meaning we didn't need any extra arrays
or data structures in the whole process.
