1
00:00:00,330 --> 00:00:04,990
In cases 4 and 5, your node's parent
is red and its sibling is black.

2
00:00:06,340 --> 00:00:09,660
In both,
you'll need to perform a rotation.

3
00:00:09,660 --> 00:00:14,000
In a rotation, you shift a group of
nodes around in a way that changes

4
00:00:14,000 --> 00:00:17,970
the structure of the tree, but
not the order of the nodes.

5
00:00:17,970 --> 00:00:20,770
Keep in mind that this is still a BST,
so,

6
00:00:20,770 --> 00:00:23,178
we need to keep our
elements in strict order.

7
00:00:23,178 --> 00:00:26,770
In case 4, our red node and

8
00:00:26,770 --> 00:00:32,600
its red parent are not on
the same side of their parents.

9
00:00:32,600 --> 00:00:35,410
Our node is a right child and
its parent is a left child.

10
00:00:36,600 --> 00:00:40,650
Here we will perform a left
rotation since the nodes shift

11
00:00:40,650 --> 00:00:43,239
one place to the left while
maintaining their order.

12
00:00:44,480 --> 00:00:49,349
At this point, we have a set up that
looks exactly like case 5, where

13
00:00:49,350 --> 00:00:53,900
both the red node and its red parent
are on the same side of their parents.

14
00:00:55,600 --> 00:00:56,400
Here, that's the left.

15
00:00:57,640 --> 00:01:01,110
We'll do a right rotation here,
but this time,

16
00:01:01,110 --> 00:01:03,650
involving the grandparent and
both of its children.

17
00:01:04,709 --> 00:01:07,495
We need to swap the colors
of these two nodes as well.

18
00:01:07,495 --> 00:01:09,178
Ta-da!

19
00:01:09,178 --> 00:01:12,660
We have rearranged the nodes without
changing the number of black nodes

20
00:01:12,660 --> 00:01:13,250
in any path.

21
00:01:14,260 --> 00:01:18,460
Those are all of the cases
that could arise in insertion.

22
00:01:18,460 --> 00:01:23,900
Again, we just needed to do some clever
rearranging to keep our red black tree

23
00:01:23,100 --> 00:01:25,800
and BST properties satisfied.

24
00:01:25,800 --> 00:01:27,310
In doing the rotations,

25
00:01:27,310 --> 00:01:31,700
we kept any one sub-tree from
getting much larger than the others.

26
00:01:32,330 --> 00:01:38,364
Insert, like search and delete, is log
of n in the average and worst cases.

27
00:01:38,364 --> 00:01:44,270
BSTs were o of n in the worst case
because they could be unbalanced.

28
00:01:44,270 --> 00:01:46,679
Because we're careful about
staying balanced here,

29
00:01:46,680 --> 00:01:48,350
the run time won't be that large.
