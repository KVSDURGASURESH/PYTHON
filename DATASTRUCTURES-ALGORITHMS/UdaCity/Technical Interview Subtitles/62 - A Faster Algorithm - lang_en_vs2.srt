1
00:00:00,710 --> 00:00:02,500
Let's talk about a smarter approach.

2
00:00:03,600 --> 00:00:07,345
Our first goal doesn't need
to be maximize the value for

3
00:00:07,345 --> 00:00:09,422
the largest weight possible.

4
00:00:09,422 --> 00:00:13,905
What if we tried to maximize the value
for the smallest weights possible,

5
00:00:13,905 --> 00:00:17,823
then kept adding them together
until we had our maximum weight.

6
00:00:17,823 --> 00:00:20,120
Let's look at an example.

7
00:00:20,120 --> 00:00:24,260
We start by creating an array, which
we'll use to store the maximum possible

8
00:00:24,260 --> 00:00:27,100
value for
every weight up into our weight limit.

9
00:00:28,150 --> 00:00:31,470
We assume that the weights
are all positive integers, so

10
00:00:31,470 --> 00:00:34,890
the indices in the array
represent those weights.

11
00:00:35,180 --> 00:00:37,600
We initialize everything to zero for
now.

12
00:00:38,200 --> 00:00:41,960
These are objects that we're trying to
fit in a knapsack with a weight limit

13
00:00:41,960 --> 00:00:42,600
of six.

14
00:00:43,690 --> 00:00:45,790
We take out the object
with the weight of two.

15
00:00:46,990 --> 00:00:50,810
We can update the value at index
two to the value of the object,

16
00:00:52,230 --> 00:00:55,180
then we'll update everything after
it as well with the same value.

17
00:00:56,350 --> 00:01:00,390
Even if our knapsack can hold six,
we've only seen one object so

18
00:01:00,390 --> 00:01:04,550
far, so we need to base that
best value off one object.

19
00:01:05,680 --> 00:01:07,660
We look at the next object.

20
00:01:07,660 --> 00:01:10,585
Again we can't change
anything until index five.

21
00:01:10,585 --> 00:01:14,934
The value of this object
is bigger than the max and

22
00:01:14,935 --> 00:01:17,150
it takes up the whole weight.

23
00:01:17,150 --> 00:01:19,995
So we replace the max value for
weights five and six.

24
00:01:19,995 --> 00:01:26,750
For the last object, the first thing
we could possibly change is index four.

25
00:01:26,750 --> 00:01:29,235
This value is less than that one so
we leave it alone.

26
00:01:30,510 --> 00:01:35,890
We look at index five and compare it to
our value plus the value at index one.

27
00:01:35,890 --> 00:01:40,288
Since the old value is larger,
we leave it as is.

28
00:01:40,288 --> 00:01:45,540
At index six we add our object
value to the value at index

29
00:01:45,550 --> 00:01:50,480
two and end up with a bigger value,
so we replace it.

30
00:01:50,480 --> 00:01:52,620
And we've solved the problem.

31
00:01:52,620 --> 00:01:56,700
This may seem unnecessary with
an example this small, but

32
00:01:56,700 --> 00:01:59,910
imagine how much time we'll
save with lots of objects.

33
00:01:59,910 --> 00:02:02,500
Here, we're taking advantage
of the table to store

34
00:02:02,500 --> 00:02:04,360
precomputed maximum values.

35
00:02:05,430 --> 00:02:08,449
So we only need to do the work
once to get those numbers.

36
00:02:09,600 --> 00:02:14,220
We go through every object and check
if it can increase the maximum value of

37
00:02:14,220 --> 00:02:16,880
every possible weight up
to our maximum weight.

38
00:02:18,130 --> 00:02:22,650
Thus, the runtime is n times W,
where W is

39
00:02:22,650 --> 00:02:25,919
the weight limit of our knapsack and
n is the number of elements.

40
00:02:27,140 --> 00:02:30,640
This is a pseudo
polynomial time solution.

41
00:02:30,640 --> 00:02:34,459
A true polynomial runtime wouldn't
have a variable besides n.

42
00:02:35,870 --> 00:02:40,120
I reiterate, polynomial time
algorithms are much faster than

43
00:02:40,120 --> 00:02:43,140
exponential time algorithms for
big numbers.

44
00:02:43,140 --> 00:02:45,339
So the solution here
is generally faster.
