1
00:00:00,190 --> 00:00:04,280
当我们观察列表数据结构时 会发现遍历非常简单

2
00:00:04,280 --> 00:00:07,210
我们只需要按顺序浏览列表

3
00:00:07,210 --> 00:00:09,710
即可确保查看了每个元素

4
00:00:09,710 --> 00:00:14,135
树不是线性结构 因此没有清晰的方法可以遍历所有内容

5
00:00:14,135 --> 00:00:18,655
假设从根部开始 先往左遍历还是先往右呢？

6
00:00:18,655 --> 00:00:21,905
我们是先完全遍历完一个子树或

7
00:00:21,905 --> 00:00:26,522
树的一个部分 包括父节点和所有后代

8
00:00:26,522 --> 00:00:29,671
还是先遍历同一层级的所有节点？

9
00:00:29,672 --> 00:00:34,512
遍历树比较复杂 但是同样很重要

10
00:00:34,512 --> 00:00:38,102
我们需要先找到访问所有元素的方式

11
00:00:38,102 --> 00:00:40,220
然后才能查找元素或排序

12
00:00:40,220 --> 00:00:43,242
有两种广义的遍历方法

13
00:00:43,242 --> 00:00:47,532
第一种叫做深度优先搜索 简称 DFS

14
00:00:47,532 --> 00:00:52,639
DFS 是指如果有子节点可以查找

15
00:00:52,640 --> 00:00:55,150
那么先查找这些子节点

16
00:00:55,150 --> 00:00:58,410
稍后将详细介绍 DFS 的含义

17
00:00:58,410 --> 00:01:02,540
另一种方法是广度优先搜索 简称 BFS

18
00:01:02,540 --> 00:01:07,120
BFS 是指先访问当前所处层级的所有节点

19
00:01:07,120 --> 00:01:10,100
然后再访问子节点

20
00:01:10,100 --> 00:01:15,430
BFS 和 DFS 的定义比较模糊

21
00:01:15,430 --> 00:01:18,640
因为我们可以运用它们的原则并以多种方式遍历树

22
00:01:18,640 --> 00:01:19,540
对树来说

23
00:01:19,540 --> 00:01:25,290
层序遍历是用更精确的算法来实现的 BFS

24
00:01:25,290 --> 00:01:28,280
顾名思义

25
00:01:29,300 --> 00:01:33,910
层序遍历就是从根部开始 然后访问第二层级的子节点

26
00:01:33,910 --> 00:01:38,630
然后是第三层级的所有子节点 直到访问了所有叶子

27
00:01:38,630 --> 00:01:42,550
按照惯例 我们从左侧开始 然后往右访问

28
00:01:42,550 --> 00:01:45,390
这种遍历肯定是 BFS

29
00:01:45,400 --> 00:01:48,880
我们是先访问同一层级的所有节点 然后再访问子节点
