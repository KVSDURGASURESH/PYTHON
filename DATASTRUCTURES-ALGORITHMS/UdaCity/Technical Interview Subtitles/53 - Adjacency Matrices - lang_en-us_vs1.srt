1
00:00:00,580 --> 00:00:04,380
Lastly, an adjacency matrix can be used.

2
00:00:04,380 --> 00:00:08,530
In computer science,
a matrix is essentially a 2D array, but

3
00:00:08,530 --> 00:00:10,660
the lists inside are all
the same length.

4
00:00:11,890 --> 00:00:15,510
A matrix can also be called
a rectangular array.

5
00:00:15,510 --> 00:00:18,630
When you look at it,
it looks like a rectangle.

6
00:00:18,630 --> 00:00:23,900
The adjacency matrix is actually
really similar to the adjacency list.

7
00:00:23,900 --> 00:00:28,669
The indices in the outer array still
represent nodes with those IDs.

8
00:00:28,670 --> 00:00:33,110
And the list inside still represents
which nodes are adjacent.

9
00:00:33,110 --> 00:00:38,320
However, these inner lists represent
information in a slightly different way.

10
00:00:38,320 --> 00:00:42,900
Before, the list contained just
the IDs of adjacent nodes.

11
00:00:42,900 --> 00:00:46,726
Now the inner list has one slot for
every node in the array,

12
00:00:46,726 --> 00:00:50,920
where node IDs map to array indices.

13
00:00:50,920 --> 00:00:56,340
If there's an edge between these
two nodes, a 1 goes into the array.

14
00:00:56,340 --> 00:00:59,870
If there's no edge, a 0 is present.

15
00:00:59,870 --> 00:01:03,900
You might notice that the diagonal or
the place on every line where the row

16
00:01:03,900 --> 00:01:08,100
number equals the column number,
is always 0.

17
00:01:08,100 --> 00:01:11,970
This value would only be 1 if
there is an edge that started and

18
00:01:11,970 --> 00:01:13,600
ended with the same node.

19
00:01:13,600 --> 00:01:16,640
But we don't have any
of those in our graph.

20
00:01:16,640 --> 00:01:21,440
You should also note that a single
edge shows up twice in the matrix.

21
00:01:21,440 --> 00:01:25,780
For example, this edge shows
up when the row is 0, and

22
00:01:25,780 --> 00:01:31,220
the column is 1, and also,
when the row is 1, and the column is 0.

23
00:01:31,220 --> 00:01:35,320
Which method of representation you use
depends on what makes the most sense for

24
00:01:35,320 --> 00:01:39,539
you and what operations you'll
be performing the most often.

25
00:01:39,540 --> 00:01:42,890
If you're looking at node degree or
the number of edges connected to

26
00:01:42,890 --> 00:01:46,860
a particular node, the adjacency
list will probably be the fastest.
