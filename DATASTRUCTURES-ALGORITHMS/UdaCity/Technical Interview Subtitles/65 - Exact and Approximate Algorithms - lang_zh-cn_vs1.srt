1
00:00:00,270 --> 00:00:04,324
旅行商问题属于一类特殊的问题

2
00:00:04,325 --> 00:00:05,514
叫做 NP 困难

3
00:00:05,514 --> 00:00:09,870
NP 困难问题没有一个能在多项式时间内

4
00:00:09,870 --> 00:00:11,753
解决它们的已知算法

5
00:00:11,753 --> 00:00:16,520
我在讨论背包问题时提到过

6
00:00:16,520 --> 00:00:22,450
多项式时间算法的运行时间是 n 具有常量指数 例如n2

7
00:00:22,450 --> 00:00:26,570
我们希望算法能够在多项式时间内解决问题

8
00:00:26,570 --> 00:00:29,250
或者它们通常速度太慢 没多大用途

9
00:00:29,250 --> 00:00:32,506
背包问题实际上也是 NP 困难问题

10
00:00:33,580 --> 00:00:37,769
我们研究的解决方案是伪多项式时间

11
00:00:37,770 --> 00:00:40,600
现在还没有已知的真正伪多项式时间解决方案

12
00:00:41,360 --> 00:00:42,700
因为该问题太难

13
00:00:42,700 --> 00:00:46,369
所以有两类算法可以看做解决方案

14
00:00:47,430 --> 00:00:52,500
第一个是精确算法 在多项式时间下不会发生

15
00:00:52,500 --> 00:00:53,370
但是可以给我们带来正确答案

16
00:00:54,648 --> 00:00:59,440
第二个是近似算法 虽然不会始终找到精确最优解

17
00:00:59,440 --> 00:01:04,709
但是一般会找到近似最优解

18
00:01:04,709 --> 00:01:07,420
它们更容易按照更加合理的时间运行

19
00:01:07,420 --> 00:01:09,300
甚至有几个是多项式时间

20
00:01:10,400 --> 00:01:15,690
TSP 穷举法和背包问题的解决方案原理是一样的

21
00:01:16,800 --> 00:01:21,490
找到各种组合 然后选择最佳组合

22
00:01:21,490 --> 00:01:23,929
需要的时间明显要长

23
00:01:23,930 --> 00:01:29,480
是阶乘时间 也就是 n 乘以 n 到 1 之间的所有整数

24
00:01:30,830 --> 00:01:33,850
TSP 也有动态规划解决方案

25
00:01:35,120 --> 00:01:38,660
最著名的是 Held-Karp 算法

26
00:01:38,660 --> 00:01:42,300
但是 即使动态规划解决方案也很慢

27
00:01:42,300 --> 00:01:45,800
这个解决方案的运行时间是指数时间

28
00:01:47,180 --> 00:01:52,300
虽然近似算法不会找到精确最佳路径

29
00:01:52,300 --> 00:01:54,720
但是对于 TSP 来说也有很多相关研究

30
00:01:55,810 --> 00:02:00,740
最著名的算法之一是基督论算法

31
00:02:00,740 --> 00:02:05,770
也就是将图表变成树 起始节点就是根

32
00:02:05,770 --> 00:02:09,448
通过非常巧妙的方法创建并遍历该树

33
00:02:09,449 --> 00:02:12,530
该算法可以保证产生的路径

34
00:02:12,530 --> 00:02:15,809
将最多比最短路线长 50%

35
00:02:17,400 --> 00:02:22,600
对于这个首次出现的 TSP 案例 现在已经有了微小的改进

36
00:02:22,600 --> 00:02:24,530
但是通常它依然被视为最佳解决方案

37
00:02:25,530 --> 00:02:30,380
对于此类疑难问题 TSP 是个有趣的案例研究

38
00:02:30,380 --> 00:02:34,725
尤其是它具有多种应用并被广泛研究

39
00:02:34,725 --> 00:02:39,200
虽然在面试中 面试官不会直接问你这类问题

40
00:02:39,200 --> 00:02:42,700
但是知道存在这些问题也很有用

41
00:02:42,700 --> 00:02:45,880
知道有可能会遇到不存在高效解决方案的面试问题

42
00:02:47,600 --> 00:02:51,700
你不需要完全理解 NP 困难或类似问题的含义

43
00:02:51,700 --> 00:02:54,400
但是可以了解下即使最聪明的人

44
00:02:54,400 --> 00:02:57,900
也不能高效地解决所有问题
