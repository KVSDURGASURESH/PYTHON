1
00:00:00,210 --> 00:00:04,970
In the tree world, a balanced tree has
nodes condensed to only a few levels,

2
00:00:04,970 --> 00:00:09,290
while an unbalanced tree has nodes
spread out among many levels.

3
00:00:09,290 --> 00:00:13,450
The most extreme type of unbalanced
tree is really just a linked list,

4
00:00:13,450 --> 00:00:16,189
where every node has only one child.

5
00:00:16,190 --> 00:00:19,250
By that definition,
a self-balancing tree

6
00:00:19,250 --> 00:00:23,200
is one that tries to minimize
the number of levels that it uses.

7
00:00:23,200 --> 00:00:27,900
It does some algorithm during insertion
and deletion to keep itself balanced,

8
00:00:27,900 --> 00:00:31,270
and the nodes themselves might
have some additional properties.

9
00:00:31,270 --> 00:00:34,200
The most common example
is a red-black tree,

10
00:00:34,200 --> 00:00:37,100
which is an extension of
a binary search tree.

11
00:00:37,100 --> 00:00:39,650
As is painfully common
in computer science,

12
00:00:39,650 --> 00:00:42,290
the name turns out to be
very straightforward.

13
00:00:42,290 --> 00:00:46,570
In this type of tree, nodes are assigned
an additional color property

14
00:00:46,570 --> 00:00:49,540
where the values must be either red or
black.

15
00:00:49,540 --> 00:00:53,750
The use of color as red or
black is just a convention.

16
00:00:53,750 --> 00:00:57,100
You really just need a way to
distinguish between two different types

17
00:00:57,100 --> 00:00:58,330
of nodes.

18
00:00:58,330 --> 00:01:03,420
The second property of a red-black tree
is the existence of null leaf nodes.

19
00:01:03,420 --> 00:01:06,800
Every node in your tree that
doesn't otherwise have two leaves

20
00:01:06,800 --> 00:01:08,600
must have null children.

21
00:01:08,600 --> 00:01:12,830
As you can see, all null leaf
nodes must be colored black.

22
00:01:12,830 --> 00:01:16,140
Next, if a node is red,
both of its children must be black.

23
00:01:17,230 --> 00:01:22,000
There's an additional optional rule,
the root node must be black.

24
00:01:22,000 --> 00:01:27,170
Lastly, for the rule that makes these
trees actually useful, every path from

25
00:01:27,170 --> 00:01:33,110
a node to its descendant null nodes must
contain the same number of black nodes.

26
00:01:33,110 --> 00:01:36,860
We'll see these rules in action
when we talk about inserting.

27
00:01:36,860 --> 00:01:39,110
For now, know that these rules and

28
00:01:39,110 --> 00:01:43,280
the last one in particular assure that
the tree never gets too unbalanced.
