1
00:00:00,820 --> 00:00:04,370
现在介绍下另一种热门排序算法 叫做归并排序

2
00:00:05,490 --> 00:00:10,900
大概意思就是将整个数组尽可能拆分了

3
00:00:10,900 --> 00:00:13,670
然后每步都进行对比和排序

4
00:00:13,670 --> 00:00:16,280
再将这些子部分合并了

5
00:00:16,280 --> 00:00:20,790
将数组拆分了 对每个子部分进行排序

6
00:00:20,790 --> 00:00:23,549
然后再合并的过程就叫做分治法

7
00:00:24,660 --> 00:00:28,250
几个高效的排序算法用的都是这个核心规则

8
00:00:29,580 --> 00:00:32,198
我们通过示例讲解下归并排序的原理

9
00:00:33,210 --> 00:00:38,300
首先将数组拆分成几个子部分 每个子部分有 1 个元素

10
00:00:39,230 --> 00:00:41,160
然后我们需要合并起来

11
00:00:42,790 --> 00:00:46,269
你可能会问 为何剩下的一个元素是在开头部分

12
00:00:46,270 --> 00:00:47,460
而不是结尾

13
00:00:47,460 --> 00:00:49,580
别担心这样的细节

14
00:00:49,580 --> 00:00:52,518
实现方法不同 这一情况也不一样

15
00:00:52,518 --> 00:00:57,330
但是只能留下大小为 2 和 1 的子数组

16
00:00:58,700 --> 00:01:02,610
首先对比下这两个元素 看看哪个大

17
00:01:02,610 --> 00:01:05,929
因为 1 更小 所以将排在新数组的第一个位置

18
00:01:05,930 --> 00:01:07,760
3 更大 将排在第二个位置

19
00:01:09,270 --> 00:01:12,850
接着对比下一组数组

20
00:01:12,850 --> 00:01:15,509
7 比 0 大

21
00:01:15,510 --> 00:01:19,370
我们将 0 放在新数组的第一个位置 7 放在第二个位置

22
00:01:21,200 --> 00:01:25,291
然后再对比一次 对比最后两个元素 10 和 2

23
00:01:25,291 --> 00:01:27,229
然后在新数组中对它们排好序

24
00:01:29,700 --> 00:01:30,940
就这么简单

25
00:01:30,940 --> 00:01:34,690
最后我们还要记下对比的次数

26
00:01:34,690 --> 00:01:39,500
这样在计算效率的时候可以用到

27
00:01:39,500 --> 00:01:43,130
整体而言 这一步需要对比 3 次 用绿色标出了

28
00:01:44,590 --> 00:01:46,230
快写不下了

29
00:01:46,230 --> 00:01:49,548
我将擦除所有这些内容 除了这一行 并移到上面

30
00:01:49,548 --> 00:01:54,530
现在我们将合并前面的两个数组和后面的两个数组

31
00:01:54,530 --> 00:01:58,380
得出大小为 3 和 4 的数组

32
00:01:59,790 --> 00:02:02,900
这些对比会比较复杂

33
00:02:03,210 --> 00:02:06,770
这里我们是将具有 1 个元素的数组与具有 2 个元素的数组进行对比

34
00:02:08,150 --> 00:02:11,450
我们知道右边的数组已经排好序

35
00:02:11,450 --> 00:02:15,399
所以新数组的第一个元素要么是这个元素

36
00:02:15,400 --> 00:02:16,840
要么是这个数组的第一个元素

37
00:02:18,390 --> 00:02:21,179
看起来 1 更小 所以 1 将是第一个元素

38
00:02:22,630 --> 00:02:25,260
现在看看这个数组中的下一个元素

39
00:02:25,260 --> 00:02:26,299
并与这个元素对比

40
00:02:27,840 --> 00:02:31,300
因为 3 比 8 小 所以将 3 放在这个方框中

41
00:02:32,900 --> 00:02:36,160
现在这个数组已经操作完毕 我们可以将另一个数组中剩下的元素

42
00:02:36,160 --> 00:02:38,400
放在这里的结尾处

43
00:02:39,910 --> 00:02:41,680
现在开始构建这个数组

44
00:02:43,600 --> 00:02:47,299
我们开始对比这个数组中的这两个元素

45
00:02:47,300 --> 00:02:49,320
也就是 0 和 2

46
00:02:49,320 --> 00:02:55,124
因为 0 比 2 小 所以 0 成为新数组的第一个元素

47
00:02:55,124 --> 00:03:01,670
然后看看这个数组中的下一个元素 也就是 7

48
00:03:01,670 --> 00:03:02,825
然后与 2 对比

49
00:03:02,825 --> 00:03:04,886
2 比 7 小 所以将 2 放在这个新数组中

50
00:03:06,577 --> 00:03:09,257
然后再重复一次 对比 7 和 10

51
00:03:09,257 --> 00:03:11,187
然后相应地将它们填在数组的后面位置

52
00:03:12,867 --> 00:03:15,797
这步我们对比了多少次？

53
00:03:15,797 --> 00:03:21,270
如果数下所有紫色的对比次数 结果是 5 次

54
00:03:21,270 --> 00:03:22,487
快要完成了

55
00:03:22,487 --> 00:03:25,107
我们只需要再操作一轮

56
00:03:25,107 --> 00:03:25,767
就可以获得完整的排序数组了

57
00:03:27,400 --> 00:03:29,370
这和上一轮的操作一样

58
00:03:30,660 --> 00:03:35,400
我们开始对比两个数组的第一个元素

59
00:03:35,400 --> 00:03:37,250
也就是 1 和 0

60
00:03:37,250 --> 00:03:41,140
因为 0 比 1 小 所以 0 填到新数组的这个位置

61
00:03:41,140 --> 00:03:42,670
然后在旧数组中划掉它

62
00:03:44,170 --> 00:03:49,399
接着对比 1 和 2 结果是 1 更小

63
00:03:49,400 --> 00:03:52,571
所以在这里填上 1

64
00:03:52,571 --> 00:03:56,840
再次对比 2 和 3 然后对比 3 和 7

65
00:03:56,840 --> 00:04:02,570
然后 7 和 8

66
00:04:04,800 --> 00:04:06,250
最后对比完毕

67
00:04:06,250 --> 00:04:07,730
我们获得了排好序的新数组

68
00:04:09,260 --> 00:04:12,970
我们需要记下这一步的对比次数

69
00:04:12,970 --> 00:04:15,650
我在这边写上 6 次对比
