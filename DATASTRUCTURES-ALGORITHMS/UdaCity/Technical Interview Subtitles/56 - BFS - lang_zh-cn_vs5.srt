1
00:00:00,800 --> 00:00:04,420
BFS 即广度优先搜索 实际上非常相似

2
00:00:04,420 --> 00:00:08,250
你依然需要访问每个节点 并标记所有节点

3
00:00:08,250 --> 00:00:11,110
但是 此时你会先查找一个节点的所有边

4
00:00:11,110 --> 00:00:12,719
然后再继续往下查找

5
00:00:13,870 --> 00:00:16,900
我们从第一个节点开始

6
00:00:16,100 --> 00:00:19,450
将其标为已查看 然后访问相邻的节点

7
00:00:20,460 --> 00:00:23,860
标记完该节点后 我们可以将其添加到队列中

8
00:00:23,860 --> 00:00:28,759
请注意队列和堆栈的区别 就像在 DFS 中用到的一样

9
00:00:28,760 --> 00:00:31,970
对于队列 我们会删除第一个放入的元素

10
00:00:31,970 --> 00:00:35,250
但是对于堆栈 我们会删除最近添加的元素

11
00:00:36,600 --> 00:00:38,400
我们再返回到第一个节点

12
00:00:38,400 --> 00:00:42,930
然后访问所有与其相邻的节点 标为已查看 并添加到队列中

13
00:00:44,100 --> 00:00:48,290
当我们访问完所有边后 我们从队列中取出一个节点

14
00:00:48,290 --> 00:00:50,140
并将它作为下一步的起始位置

15
00:00:51,390 --> 00:00:53,960
查看与该节点相邻的所有节点

16
00:00:53,960 --> 00:00:57,215
将每个节点都添加到队列中 直到没有节点可添加了

17
00:00:58,225 --> 00:01:00,785
请注意 当我们出队时

18
00:01:00,785 --> 00:01:03,485
我们是获取与开始节点相邻的节点

19
00:01:04,525 --> 00:01:09,625
可以将 BFS 想象成通过图表创建一个数

20
00:01:09,625 --> 00:01:12,665
起始节点变成根

21
00:01:12,665 --> 00:01:15,589
相邻的一组节点变成树中的下一层级

22
00:01:16,590 --> 00:01:20,230
我们需要一次添加一个层级的节点

23
00:01:20,230 --> 00:01:24,260
完全添加完一个层级后 再转到下一层级

24
00:01:24,260 --> 00:01:25,985
很快 就完成 BFS 了

25
00:01:27,150 --> 00:01:31,880
效率依然是边的条数加上顶点个数

26
00:01:31,880 --> 00:01:35,410
遍历时 我们依然访问的是每条边和每个顶点
