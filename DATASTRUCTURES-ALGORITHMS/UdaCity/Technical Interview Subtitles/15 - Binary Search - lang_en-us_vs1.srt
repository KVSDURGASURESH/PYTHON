1
00:00:00,950 --> 00:00:04,710
Okay, now that we have some tools,
we can dive into basic algorithms.

2
00:00:04,710 --> 00:00:08,809
Let's say you have an array
sorted in numerical order and

3
00:00:08,810 --> 00:00:12,770
you want to see if a number that
you have exists in this array.

4
00:00:12,770 --> 00:00:16,189
If you start at the front and
check every number in the array,

5
00:00:16,190 --> 00:00:19,820
the time could be O(n) if
your number is really big.

6
00:00:19,820 --> 00:00:22,270
The same happens if you
start at the other end.

7
00:00:22,270 --> 00:00:23,960
You could have a really small number and

8
00:00:23,960 --> 00:00:27,460
it might end up taking
linear time in worst case.

9
00:00:27,460 --> 00:00:30,990
However, we could do a cool trick
here that takes advantage of the fact

10
00:00:30,990 --> 00:00:33,110
that you have a sorted array.

11
00:00:33,110 --> 00:00:34,800
Rather than starting at the end,

12
00:00:34,800 --> 00:00:37,540
let's say you started in
the middle of the array.

13
00:00:37,540 --> 00:00:41,290
You could say, is my number bigger or
smaller than the one in the middle.

14
00:00:42,320 --> 00:00:43,970
Since my number is bigger,

15
00:00:43,970 --> 00:00:47,640
I know that it'll have to be in
the second half of the array.

16
00:00:47,640 --> 00:00:50,880
Now I don't even have to search
the first half of the array.

17
00:00:50,880 --> 00:00:54,200
The best thing about this strategy is
that you can make the same assumption

18
00:00:54,200 --> 00:00:57,800
again, just on the second
half of the array.

19
00:00:57,800 --> 00:00:59,360
Check the middle element and
then move forward from there.

20
00:01:00,400 --> 00:01:03,768
My number is still bigger than
the middle of this array, so

21
00:01:03,768 --> 00:01:06,185
now I only have to
check the last element.

22
00:01:06,185 --> 00:01:07,405
And now we're at the end.

23
00:01:07,405 --> 00:01:13,160
We've checked 19 and 29, two numbers
side by side, and we still don't see 25.

24
00:01:13,160 --> 00:01:16,395
Thus, we can conclude 25
does not exist in our array.

25
00:01:17,465 --> 00:01:18,155
Guess what?

26
00:01:18,155 --> 00:01:19,915
You just learned an algorithm.

27
00:01:19,915 --> 00:01:23,635
An algorithm is really just a high
level description of a trick for

28
00:01:23,635 --> 00:01:25,550
solving a problem.

29
00:01:25,550 --> 00:01:27,505
This one happens to be
called binary search.
