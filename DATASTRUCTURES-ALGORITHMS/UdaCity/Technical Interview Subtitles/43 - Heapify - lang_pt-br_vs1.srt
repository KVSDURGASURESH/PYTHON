1
00:00:00,000 --> 00:00:02,701
Agora, vamos tentar
inserir um elemento.

2
00:00:02,734 --> 00:00:06,133
Poderíamos usar a abordagem
que usamos com as BSTs,

3
00:00:06,167 --> 00:00:09,868
começando pela raiz,
descendo nível por nível

4
00:00:09,901 --> 00:00:12,434
e comparando
até achar um local livre.

5
00:00:12,467 --> 00:00:16,300
Mas, se nosso elemento for maior
que a maioria dos nós pai

6
00:00:16,334 --> 00:00:19,968
ou até da raiz, teremos
que embaralhar muito a árvore.

7
00:00:20,000 --> 00:00:23,000
Assim,
usamos uma abordagem diferente.

8
00:00:23,033 --> 00:00:26,868
Podemos colocar o elemento novo
no próximo local livre.

9
00:00:26,901 --> 00:00:28,467
E aí "heapificamos".

10
00:00:28,501 --> 00:00:31,934
Esta é a operação
em que reorganizamos a árvore

11
00:00:31,968 --> 00:00:34,133
com base
na propriedade do heap.

12
00:00:34,167 --> 00:00:38,067
Como é importante que o elemento pai
seja maior que o filho,

13
00:00:38,100 --> 00:00:41,334
só temos que comparar
o novo elemento com o pai

14
00:00:41,367 --> 00:00:44,801
e trocá-los de lugar
quando o filho for maior.

15
00:00:44,834 --> 00:00:48,501
Podemos fazer algo semelhante
numa operação de extração,

16
00:00:48,534 --> 00:00:50,834
quando a raiz é removida
da árvore.

17
00:00:50,868 --> 00:00:54,167
Colocamos a folha da extra direita
no lugar da raiz

18
00:00:54,200 --> 00:00:58,701
e a comparamos com seus filhos,
trocando-os quando necessário.

19
00:00:58,734 --> 00:01:03,501
O tempo da inserção e da exclusão,
que é um caso mais geral de extração,

20
00:01:03,534 --> 00:01:06,968
acaba sendo O (log n)
no pior caso.

21
00:01:07,567 --> 00:01:13,167
O pior caso seria mover um elemento
para cima e para baixo,

22
00:01:13,667 --> 00:01:18,167
e seu número de operações
seria quase o da altura da árvore.
