1
00:00:00,190 --> 00:00:04,280
When we looked at list data structures,
traversal was pretty straightforward.

2
00:00:04,280 --> 00:00:07,210
We just needed to go
through the list in order

3
00:00:07,210 --> 00:00:09,710
to make sure we looked at every element.

4
00:00:09,710 --> 00:00:14,135
Trees aren't linear, so there's no clear
way to traverse through everything.

5
00:00:14,135 --> 00:00:18,655
Suppose we start at the root,
do we go left first or right first?

6
00:00:18,655 --> 00:00:21,905
Should we completely
traverse one subtree or

7
00:00:21,905 --> 00:00:26,522
one section of the tree including
a parent and all of its descendants or

8
00:00:26,522 --> 00:00:29,671
traverse everything at
the same level first?

9
00:00:29,672 --> 00:00:34,512
Traversal in a tree is a bit more
complicated but it's equally important.

10
00:00:34,512 --> 00:00:38,102
We can't search or sort elements unless
we have a way to make sure we can

11
00:00:38,102 --> 00:00:40,220
visit all elements first.

12
00:00:40,220 --> 00:00:43,242
There are two different broad
approaches to treat traversal.

13
00:00:43,242 --> 00:00:47,532
One is called depth-first search or
DFS for short.

14
00:00:47,532 --> 00:00:52,639
In DFS, the philosophy is if there
are children nodes to explore,

15
00:00:52,640 --> 00:00:55,150
exploring them is
definitely the priority.

16
00:00:55,150 --> 00:00:58,410
We'll take a more in-depth look
at what that means in a minute.

17
00:00:58,410 --> 00:01:02,540
The alternative is called
breadth-first search or BFS.

18
00:01:02,540 --> 00:01:07,120
In BFS, the priority is visiting every
node on the same level we're currently

19
00:01:07,120 --> 00:01:10,100
on before visiting child nodes.

20
00:01:10,100 --> 00:01:15,430
BFS and DFS are kind of vaguely defined
since we can apply their principles but

21
00:01:15,430 --> 00:01:18,640
actually traverse the tree
in several different ways.

22
00:01:18,640 --> 00:01:19,540
For trees,

23
00:01:19,540 --> 00:01:25,290
a level order traversal is a BFS with
a more exact algorithm to implement.

24
00:01:25,290 --> 00:01:28,280
A level order traversal is
exactly what it sounds like.

25
00:01:29,300 --> 00:01:33,910
Start at the root then visit its
children on the second level then all of

26
00:01:33,910 --> 00:01:38,630
their children on the third level until
you've visited every single leaf.

27
00:01:38,630 --> 00:01:42,550
By convention, we start on the left
most side of the level and move right.

28
00:01:42,550 --> 00:01:45,390
This traversal is definitely a BFS.

29
00:01:45,400 --> 00:01:48,880
We're visiting all nodes at the same
level before moving on to child nodes.
