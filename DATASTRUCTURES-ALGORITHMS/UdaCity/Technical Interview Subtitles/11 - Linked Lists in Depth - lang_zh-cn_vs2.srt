1
00:00:00,320 --> 00:00:04,320
在更高级别的编程语言中 链表和数组之间

2
00:00:04,320 --> 00:00:05,990
经常没有区别

3
00:00:05,990 --> 00:00:08,920
只是有个具有二者属性的列表

4
00:00:08,920 --> 00:00:11,550
但是 在面试中 经常会问到这两种数据结构方面的问题

5
00:00:11,550 --> 00:00:16,120
所以一定要知道二者之间的差异

6
00:00:16,120 --> 00:00:20,990
再强调下 主要区别是每个元素存储了不同的信息

7
00:00:20,990 --> 00:00:24,669
对于二者来说 单个元素都会存储一个值

8
00:00:24,670 --> 00:00:26,630
或者实际信息

9
00:00:26,630 --> 00:00:28,230
所以 如果你有一个数字数组或链表

10
00:00:28,230 --> 00:00:31,250
则值将为单个数字

11
00:00:32,330 --> 00:00:33,780
如果是字符串数组或链表

12
00:00:33,780 --> 00:00:37,860
则每个值都含有一个字符串

13
00:00:37,860 --> 00:00:40,310
在这节课中 我们直接介绍数字元素

14
00:00:40,310 --> 00:00:44,260
对于二者来说 我们都存储一种类型的信息

15
00:00:44,260 --> 00:00:46,160
但是该类型却不相同

16
00:00:46,160 --> 00:00:49,639
在数组中 我们会存储一个数字作为索引

17
00:00:49,640 --> 00:00:52,310
在这种情况下 你可以通过查询数组中索引 1 处的元素

18
00:00:52,310 --> 00:00:55,500
获得下一个元素

19
00:00:55,500 --> 00:00:56,690
现在转移下内容

20
00:00:56,690 --> 00:00:57,940
介绍链表

21
00:00:59,290 --> 00:01:03,700
在链表中 我们存储的是列表中下个元素的引用

22
00:01:03,700 --> 00:01:07,890
在很多语言中 实际上是将下个元素分配为

23
00:01:07,890 --> 00:01:10,290
该元素的属性

24
00:01:10,290 --> 00:01:13,310
从硬件角度考虑的话

25
00:01:13,310 --> 00:01:16,610
这些元素实际上在内存中被分配了一些空间

26
00:01:16,610 --> 00:01:19,700
这些表示的是内存位置

27
00:01:19,700 --> 00:01:24,420
所以在该示例中 后继组件是用来存储下个元素的内存地址

28
00:01:24,420 --> 00:01:27,300
而这个元素存储的是 null

29
00:01:27,300 --> 00:01:30,259
因为它没有指向任何其他内容

30
00:01:30,260 --> 00:01:33,780
这个系统的好处是非常容易插入或

31
00:01:33,780 --> 00:01:35,390
删除元素

32
00:01:35,390 --> 00:01:39,400
添加元素类似于这样

33
00:01:39,400 --> 00:01:43,390
我们只需要将后继引用更改为指向新的对象 就可以了

34
00:01:43,390 --> 00:01:45,950
但是有个小技巧要记住

35
00:01:45,950 --> 00:01:50,530
如果删除后继引用 并替换为新的对象

36
00:01:50,530 --> 00:01:54,240
你将失去对该对象的引用 你应该始终先为该元素

37
00:01:54,240 --> 00:01:58,140
分配后继指针 然后再为该元素分配后继指针

38
00:01:58,140 --> 00:02:02,100
这样就不会失去对该元素的引用

39
00:02:02,100 --> 00:02:04,300
现在一切看起来正常

40
00:02:04,300 --> 00:02:08,370
注意在此例中 插入所需的时间是常量

41
00:02:08,370 --> 00:02:13,140
因为你只是移动下指针 并不需要循环访问列表中的所有元素

42
00:02:13,140 --> 00:02:15,929
删除元素也非常类似

43
00:02:15,930 --> 00:02:18,180
甚至现在我都不用去讲解的

44
00:02:18,180 --> 00:02:20,970
还有一种链表叫做双向链表

45
00:02:20,970 --> 00:02:25,100
指针会指向下一个元素和上一个元素

46
00:02:25,100 --> 00:02:27,970
双向链表遵守的规则非常相似

47
00:02:27,970 --> 00:02:31,770
只是你可以从两个方向遍历列表

48
00:02:31,770 --> 00:02:35,700
同样 在添加或删除元素时 注意别失去了引用

49
00:02:35,700 --> 00:02:39,380
但是比在数组上执行这些操作要简单
