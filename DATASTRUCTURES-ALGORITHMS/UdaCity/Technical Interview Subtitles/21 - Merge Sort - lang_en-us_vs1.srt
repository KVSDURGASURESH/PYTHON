1
00:00:00,820 --> 00:00:04,370
Let's talk about another popular
sorting algorithm called Merge Sort.

2
00:00:05,490 --> 00:00:10,900
The overall idea is that you split a
huge array down as much as possible and

3
00:00:10,900 --> 00:00:13,670
then over time build it back
up doing your comparisons and

4
00:00:13,670 --> 00:00:16,280
sorting at each step along the way.

5
00:00:16,280 --> 00:00:20,790
The general idea of breaking up an array
sorting all the parts of it and

6
00:00:20,790 --> 00:00:23,549
then building it back up again
is called Divide and Conquer.

7
00:00:24,660 --> 00:00:28,250
Several efficient sorting algorithms
have this principle at their core.

8
00:00:29,580 --> 00:00:32,198
Okay, let's see how merge
sort works with an example.

9
00:00:33,210 --> 00:00:38,300
First we break up the array into a bunch
of arrays with one element each,

10
00:00:39,230 --> 00:00:41,160
now we need to start
building it back up again.

11
00:00:42,790 --> 00:00:46,269
You may wonder why the one leftover
element goes at the beginning and

12
00:00:46,270 --> 00:00:47,460
not the end.

13
00:00:47,460 --> 00:00:49,580
Don't worry too much
about details like that.

14
00:00:49,580 --> 00:00:52,518
Theyâ€™ll differ depending
on the implementation.

15
00:00:52,518 --> 00:00:57,330
However the step should only have
arrays of size two and size one left.

16
00:00:58,700 --> 00:01:02,610
First we compare these two elements
to see which one is smaller.

17
00:01:02,610 --> 00:01:05,929
Since one is smaller,
it'll go first in our new array and

18
00:01:05,930 --> 00:01:07,760
since 3 is bigger it'll go second.

19
00:01:09,270 --> 00:01:12,850
Now we move on and
do this with the next pair of arrays.

20
00:01:12,850 --> 00:01:15,509
Again 7 is bigger than 0.

21
00:01:15,510 --> 00:01:19,370
So in our new array we put 0 in
the first spot and 7 in the second spot.

22
00:01:21,200 --> 00:01:25,291
And now we do this one last time
comparing the last two elements 10 and

23
00:01:25,291 --> 00:01:27,229
2 and
putting them in order in a new array.

24
00:01:29,700 --> 00:01:30,940
Great that was easy enough.

25
00:01:30,940 --> 00:01:34,690
Now the last thing we want to do is keep
track of the number of comparisons we

26
00:01:34,690 --> 00:01:39,500
did so we can come back to it when
we do our efficiency calculation

27
00:01:39,500 --> 00:01:43,130
overall this step took 3
comparisons each one in green.

28
00:01:44,590 --> 00:01:46,230
Okay, we're running out of space, so

29
00:01:46,230 --> 00:01:49,548
I'm going to clear everything off except
this bottom row and move it on up.

30
00:01:49,548 --> 00:01:54,530
Now we're going to combine
the first two arrays and

31
00:01:54,530 --> 00:01:58,380
the last two arrays and create an array
of three and an array of four.

32
00:01:59,790 --> 00:02:02,900
Now these comparisons
are a little more complicated.

33
00:02:03,210 --> 00:02:06,770
Here we're comparing an array with one
element to an array with two elements.

34
00:02:08,150 --> 00:02:11,450
We know that the array on
the right is already sorted so

35
00:02:11,450 --> 00:02:15,399
the first element of our new array
is either going to come from here or

36
00:02:15,400 --> 00:02:16,840
the first element of this array.

37
00:02:18,390 --> 00:02:21,179
It looks like one is smaller so
that will be our first element.

38
00:02:22,630 --> 00:02:25,260
Now we can move on to the next
element in this array and

39
00:02:25,260 --> 00:02:26,299
compare it with this one.

40
00:02:27,840 --> 00:02:31,300
Since 3 is smaller than 8
we'll put 3 in this box.

41
00:02:32,900 --> 00:02:36,160
Now that we're done with this array we
can just take anything that's left in

42
00:02:36,160 --> 00:02:38,400
the other one and
tack it on the end here.

43
00:02:39,910 --> 00:02:41,680
Great, let's move on to
building this array.

44
00:02:43,600 --> 00:02:47,299
So we're going to start out comparing
the first two elements of these arrays,

45
00:02:47,300 --> 00:02:49,320
that's 0 and 2.

46
00:02:49,320 --> 00:02:55,124
Since 0 is less than 2, 0 becomes
the first element in our new array.

47
00:02:55,124 --> 00:03:01,670
Okay, so now we move on to the next
element in this array which is 7 and

48
00:03:01,670 --> 00:03:02,825
compare that to 2.

49
00:03:02,825 --> 00:03:04,886
2 is less than 7 so
we put 2 in the new array.

50
00:03:06,577 --> 00:03:09,257
We repeat again checking
7 against 10 and

51
00:03:09,257 --> 00:03:11,187
fill them in at the end
of the array accordingly.

52
00:03:12,867 --> 00:03:15,797
How many comparisons
did we do in the step?

53
00:03:15,797 --> 00:03:21,270
Well, if you count up all the purple
comparisons that leaves us with 5.

54
00:03:21,270 --> 00:03:22,487
Okay we're almost there.

55
00:03:22,487 --> 00:03:25,107
We just need to go through one
more round to get our completely

56
00:03:25,107 --> 00:03:25,767
sorted array.

57
00:03:27,400 --> 00:03:29,370
This is going to start just
like it did in the last round.

58
00:03:30,660 --> 00:03:35,400
We start off by comparing the first two
elements of the two arrays that we have,

59
00:03:35,400 --> 00:03:37,250
so 1 and 0.

60
00:03:37,250 --> 00:03:41,140
Since 0 is smaller it ends
up going in this array and

61
00:03:41,140 --> 00:03:42,670
we get rid of it in the old array.

62
00:03:44,170 --> 00:03:49,399
We move on comparing 1 and 2 and
end up with one being smaller.

63
00:03:49,400 --> 00:03:52,571
So 1 fills in the spot.

64
00:03:52,571 --> 00:03:56,840
We compare again with 2 and
3 and again with 3 and 7.

65
00:03:56,840 --> 00:04:02,570
And again with 8 and 7.

66
00:04:04,800 --> 00:04:06,250
And finally we're done.

67
00:04:06,250 --> 00:04:07,730
We have our newly sorted array.

68
00:04:09,260 --> 00:04:12,970
We need to keep track of the number
of comparisons we did in this step.

69
00:04:12,970 --> 00:04:15,650
So I'll write 6 comparisons
off to the side here.
