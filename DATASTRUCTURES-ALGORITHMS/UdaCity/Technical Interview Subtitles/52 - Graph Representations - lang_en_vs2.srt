1
00:00:00,580 --> 00:00:05,490
Graphs can be functionally the same but
built in a handful of different ways.

2
00:00:05,490 --> 00:00:09,510
If you're using an object oriented
language you could create vertex and

3
00:00:09,510 --> 00:00:10,520
edge objects and

4
00:00:10,520 --> 00:00:14,770
give them each properties like name,
strength, ID number, etc.

5
00:00:15,990 --> 00:00:19,410
A vertex could have a list of edges
it's connected to and vice versa.

6
00:00:20,650 --> 00:00:24,520
However, operations that traverse
graphs can be more inconvenient

7
00:00:24,520 --> 00:00:27,419
if you need to search through vertex and
edge objects.

8
00:00:28,600 --> 00:00:31,890
There are several ways to represent
connections on simple graphs

9
00:00:31,890 --> 00:00:34,110
that only use lists.

10
00:00:34,110 --> 00:00:35,920
One example is an edge list,

11
00:00:35,920 --> 00:00:40,840
which is precisely what you'd think,
it's simply a list of edges.

12
00:00:40,840 --> 00:00:45,680
The edges themselves are represented
by a list of two elements.

13
00:00:45,680 --> 00:00:51,140
Those elements are normally numbers that
correspond to ID numbers for vertices.

14
00:00:51,140 --> 00:00:52,322
So, in the end,

15
00:00:52,322 --> 00:00:57,590
this list is just showing two nodes
that have an edge between them.

16
00:00:57,590 --> 00:01:00,949
And an edge list is the list that
encompasses all the smaller lists.

17
00:01:02,300 --> 00:01:06,190
Because our edge list contains
a list of other lists,

18
00:01:06,190 --> 00:01:10,840
it's sometimes called a two
dimensional list, or a 2D list.

19
00:01:10,840 --> 00:01:13,470
If you had a list of lists of lists,

20
00:01:13,470 --> 00:01:15,841
that would be called a 3D list,
and so on.

21
00:01:15,841 --> 00:01:21,625
An adjacency list is another way
to represent edges in a graph.

22
00:01:21,626 --> 00:01:26,311
In an adjacency list, your vertices
normally have an ID number that

23
00:01:26,311 --> 00:01:29,790
corresponds to the index in an array.

24
00:01:29,790 --> 00:01:33,920
In your array, each space is
used to store a list of nodes

25
00:01:33,920 --> 00:01:36,150
that the node without ID is adjacent to.

26
00:01:37,180 --> 00:01:42,530
For example, the opening at index 0
represents a vertex with an idea of 0.

27
00:01:42,530 --> 00:01:46,800
That vertex shares
an edge with one node, so

28
00:01:46,800 --> 00:01:49,320
a reference to that node is stored
in the first spot in the array.

29
00:01:50,390 --> 00:01:53,320
Again, our adjacency
list is two dimensional,

30
00:01:53,320 --> 00:01:55,860
since it's a list that
contains other lists.
