1
00:00:00,580 --> 00:00:04,380
最后 可以使用邻接矩阵

2
00:00:04,380 --> 00:00:08,530
在计算机科学中 矩阵本质上是 2D 数组

3
00:00:08,530 --> 00:00:10,660
但是其中包含的所有列表都长度相等

4
00:00:11,890 --> 00:00:15,510
矩阵还可以叫做矩形阵列

5
00:00:15,510 --> 00:00:18,630
仔细观察 会发现它是个矩形

6
00:00:18,630 --> 00:00:23,900
邻接矩阵实际上和邻接表非常相似

7
00:00:23,900 --> 00:00:28,669
外表的索引依然表示的是具有这些 ID 的节点

8
00:00:28,670 --> 00:00:33,110
里面的列表依然表示的是相邻的节点

9
00:00:33,110 --> 00:00:38,320
但是 这些内表通过不太相同的方式表示信息

10
00:00:38,320 --> 00:00:42,900
之前 相关列表包含的仅仅是相邻节点的 ID

11
00:00:42,900 --> 00:00:46,726
现在 内表具有针对数组中的所有节点的槽位

12
00:00:46,726 --> 00:00:50,920
其中节点 ID 映射的是数组索引

13
00:00:50,920 --> 00:00:56,340
如果这两个节点之间存在边 则在数组中填上 1

14
00:00:56,340 --> 00:00:59,870
如果没有边 则填 0

15
00:00:59,870 --> 00:01:03,900
你可能注意到 对角线 即行数等于列数的位置

16
00:01:03,900 --> 00:01:08,100
始终为 0

17
00:01:08,100 --> 00:01:11,970
只有当边的起始和结束节点是同一节点

18
00:01:11,970 --> 00:01:13,600
该值才为 1

19
00:01:13,600 --> 00:01:16,640
而我们的图表中没有这种边

20
00:01:16,640 --> 00:01:21,440
你还应该注意 单条边在矩阵中出现了两次

21
00:01:21,440 --> 00:01:25,780
当行是 0 列是 1 时 这条边出现了

22
00:01:25,780 --> 00:01:31,220
此外 当行是 1 列是 0 时 这条边也出现了

23
00:01:31,220 --> 00:01:35,320
你可以根据你最常执行的操作和

24
00:01:35,320 --> 00:01:39,539
哪种情况最合理 选择哪种表示方式

25
00:01:39,540 --> 00:01:42,890
如果你要查看节点度数或连向特定节点的边数

26
00:01:42,890 --> 00:01:46,860
那么邻接表可能速度最快
