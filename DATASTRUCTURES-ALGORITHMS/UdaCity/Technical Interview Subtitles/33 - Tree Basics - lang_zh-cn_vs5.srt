1
00:00:00,330 --> 00:00:02,880
树有各种属性 使它们变得很有用

2
00:00:04,220 --> 00:00:08,620
树实际上是链表的延伸

3
00:00:08,620 --> 00:00:11,549
链表有一个前端元素

4
00:00:11,550 --> 00:00:13,990
和一个指向下个元素的后继指针 等等

5
00:00:15,300 --> 00:00:16,980
数也很类似

6
00:00:16,980 --> 00:00:20,900
第一个元素叫做根

7
00:00:20,900 --> 00:00:23,930
树可以有多个后续元素 而不是只有一个

8
00:00:25,110 --> 00:00:28,150
链表通常是水平绘制的

9
00:00:28,150 --> 00:00:31,320
而树通常是这么垂直地绘制的

10
00:00:31,320 --> 00:00:36,200
和链表一样 树上的每个元素都含有一些数据

11
00:00:36,200 --> 00:00:41,600
树上含有值的单个元素通常叫做节点

12
00:00:41,600 --> 00:00:44,430
我们再来介绍下要称作树需具备的其他条件

13
00:00:45,550 --> 00:00:49,419
首先 树必须是完全连通的

14
00:00:49,420 --> 00:00:51,730
也就是说 如果从根部开始

15
00:00:51,730 --> 00:00:54,470
一定有某种方式能够到达树上的所有节点

16
00:00:55,520 --> 00:00:58,630
这是没有连通的节点示例

17
00:00:58,630 --> 00:01:00,740
所以它肯定不是树

18
00:01:01,760 --> 00:01:05,480
其次 树不能出现任何回路

19
00:01:05,480 --> 00:01:10,620
如果你能够遇到某个节点两次 则就出现了回路

20
00:01:10,620 --> 00:01:14,220
例如 在这个树中 有一个返回根的回路

21
00:01:15,350 --> 00:01:18,390
如果我从根开始 接着还会返回到根

22
00:01:18,390 --> 00:01:20,720
这个树也是这种情况

23
00:01:20,720 --> 00:01:23,500
如果你忽略箭头的话 依然是个圆圈

24
00:01:24,520 --> 00:01:25,729
这也算作回路

25
00:01:25,730 --> 00:01:26,500
所以要小心
