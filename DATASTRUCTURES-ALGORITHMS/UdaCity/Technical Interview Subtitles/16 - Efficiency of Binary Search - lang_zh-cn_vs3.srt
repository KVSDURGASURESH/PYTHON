1
00:00:00,400 --> 00:00:04,300
我们现在用个新的示例来讲解下该算法的效率

2
00:00:05,460 --> 00:00:08,610
这是含有八个元素的数组 我们将尝试找到

3
00:00:08,610 --> 00:00:09,490
数字 10

4
00:00:10,990 --> 00:00:12,874
我们将从中间开始

5
00:00:12,874 --> 00:00:16,508
现在情形有点怪怪的 因为该数组有

6
00:00:16,508 --> 00:00:17,855
偶数个元素

7
00:00:17,855 --> 00:00:20,630
所以我们可以从 4 或 5 开始

8
00:00:20,630 --> 00:00:24,982
当你设计算法的时候 从一开始你就需要决定好

9
00:00:24,982 --> 00:00:27,788
当你遇到这种没有实际中间元素的反常现象时

10
00:00:27,789 --> 00:00:31,880
你是从数字更小的一端开始 还是更大的一端开始

11
00:00:33,500 --> 00:00:35,180
我将从更小的一端着手

12
00:00:35,180 --> 00:00:36,150
从数字 4 开始

13
00:00:37,200 --> 00:00:39,920
和之前一样 看看我们的数字

14
00:00:39,920 --> 00:00:41,410
是比中间的数字大还是小

15
00:00:42,430 --> 00:00:44,700
因为我们的数字更大

16
00:00:44,700 --> 00:00:46,300
我们只需要查找数组的第二部分就行了

17
00:00:47,890 --> 00:00:50,610
同样 第二部分也是偶数个元素

18
00:00:50,610 --> 00:00:54,425
我们从中间左侧的数字开始

19
00:00:54,425 --> 00:00:57,625
因为 10 比 6 大

20
00:00:57,625 --> 00:01:00,645
我们再次将数组分成两部分 只需看最后一小部分元素

21
00:01:01,675 --> 00:01:04,175
同样是偶数个元素

22
00:01:04,175 --> 00:01:07,440
我们从更小的部分开始查找

23
00:01:07,440 --> 00:01:10,500
因为 10 比中间元素 7 大

24
00:01:10,500 --> 00:01:12,850
现在只剩下最后一个元素了

25
00:01:12,850 --> 00:01:16,700
我们已经查看了数组中最大的元素

26
00:01:16,700 --> 00:01:19,690
而我们的数字依然比它大 就知道该数字不存 可以继续了

27
00:01:20,770 --> 00:01:24,610
因为时间效率就是需要执行的步骤数量

28
00:01:24,610 --> 00:01:28,275
所以跟踪每次遍历就可以计算出效率了

29
00:01:28,275 --> 00:01:31,705
以前 我们需要查看每个元素

30
00:01:31,705 --> 00:01:36,334
但是现在 我们将数组分成两部分 只考虑某些元素

31
00:01:36,334 --> 00:01:41,910
所以效率不会大到 O(n)

32
00:01:41,910 --> 00:01:44,580
我创建了一个表格 这样我们可以仔细看看数组大小

33
00:01:44,580 --> 00:01:48,120
和算法的循环次数

34
00:01:49,470 --> 00:01:52,910
可以看出 对于大小为 8 的数组 我们的算法

35
00:01:52,910 --> 00:01:54,679
需要执行 4 次

36
00:01:54,680 --> 00:01:56,387
我们这里讨论的是最坏情况

37
00:01:56,387 --> 00:02:00,400
我还可以在所有这些位置中间放一个数字

38
00:02:00,400 --> 00:02:03,390
以及两端放些数字 找出最坏情况是怎样的

39
00:02:03,390 --> 00:02:07,310
为了给大家节省时间 我在录制该视频前已经这么操作过了

40
00:02:07,310 --> 00:02:10,199
在此过程中 我还发现了一个技巧

41
00:02:10,199 --> 00:02:13,400
如果要找出最坏情况

42
00:02:13,400 --> 00:02:17,900
你可以选择一个比数组中的任何元素都大的元素

43
00:02:17,900 --> 00:02:21,900
当你遇到这种反常的偶数中间情形时 始终从更小的一半开始

44
00:02:21,900 --> 00:02:24,590
你应该私底下验证下 知道该技巧是可行的

45
00:02:24,590 --> 00:02:26,480
现在跟着我得出这一结论就行了

46
00:02:26,480 --> 00:02:31,480
所以 对于大小为 8 的数组 最坏遍历情况是 4 次

47
00:02:31,480 --> 00:02:33,804
我们也可以采纳第一个示例的结果

48
00:02:33,804 --> 00:02:38,880
即对于大小为 7 的数组 查找某个元素的步骤是 3 次

49
00:02:38,880 --> 00:02:41,954
现在我们来考虑不同大小的数组

50
00:02:41,955 --> 00:02:46,462
如果数组大小为 1 而你要查找的元素假设是 30

51
00:02:46,462 --> 00:02:50,899
那么 你始终只需要 1 步就能判断该元素

52
00:02:50,900 --> 00:02:52,580
是否在数组中

53
00:02:52,580 --> 00:02:54,880
太棒了 意味着我们可以在此处填上 1 了

54
00:02:54,880 --> 00:02:57,840
现在假设数组有 2 个元素 我们要查找的数字

55
00:02:57,840 --> 00:03:00,200
是 23

56
00:03:00,200 --> 00:03:02,710
我再次运用之前提到的技巧

57
00:03:02,710 --> 00:03:05,900
我选择了比数组中所有元素都大的数字

58
00:03:05,900 --> 00:03:09,870
当我遇到之前的反常现象时 我先从更小的一端开始

59
00:03:09,870 --> 00:03:12,340
当数组中的元素个数是偶数个时

60
00:03:12,340 --> 00:03:14,510
我从中间位置左侧的数字开始对比

61
00:03:15,780 --> 00:03:18,480
因为 23 比 18 大 我可以与 21 对比了

62
00:03:19,690 --> 00:03:23,579
只需两步 我就找到了答案 即 23 不存在于该数组中

63
00:03:24,610 --> 00:03:26,980
太棒了 我可以在此处填上 2 了

64
00:03:26,980 --> 00:03:30,709
考虑到课程时间问题 我不会再继续演示所有这些示例

65
00:03:30,710 --> 00:03:33,230
但是你一定要私底下自己演算下

66
00:03:33,230 --> 00:03:34,179
证明这些结果是正确的

67
00:03:35,425 --> 00:03:38,800
我们开始看出这里存在一定的规律了

68
00:03:39,250 --> 00:03:41,490
我注意到 4 是 8 的一半

69
00:03:41,490 --> 00:03:44,630
所以我们的效率计算公式可能是这样的

70
00:03:44,630 --> 00:03:46,780
请注意 这里我们取的是近似值

71
00:03:47,880 --> 00:03:51,400
我只是计算我运行算法需要的次数

72
00:03:51,400 --> 00:03:54,670
而不是该算法需要的整体步骤数量

73
00:03:54,670 --> 00:03:56,850
在此例中 当 n 是 8 时 结果为 4

74
00:03:57,850 --> 00:04:01,810
实际上 我不知道这个算式对不对 因为 2 的一半不是 2

75
00:04:01,810 --> 00:04:03,780
1 的一半也不是 1

76
00:04:03,780 --> 00:04:05,320
很遗憾

77
00:04:05,320 --> 00:04:09,359
我真的觉得 2 会适用于这个效率算式

78
00:04:09,360 --> 00:04:12,870
由于每次运行算法时 我都要将数组分成两半

79
00:04:13,870 --> 00:04:16,980
现在来思考下 这究竟意味着什么

80
00:04:16,980 --> 00:04:20,620
如果我每次循环访问时都将数组分成两半

81
00:04:20,620 --> 00:04:23,480
意味着每次我都将元素数量翻倍了

82
00:04:23,480 --> 00:04:25,600
我需要再进行一次循环访问

83
00:04:26,240 --> 00:04:27,900
实际上 再思考下

84
00:04:27,900 --> 00:04:30,549
会发现这和表格中的结果是吻合的

85
00:04:32,300 --> 00:04:34,369
每次数组大小翻倍时

86
00:04:34,370 --> 00:04:37,199
算法都需要再重复一次

87
00:04:38,560 --> 00:04:42,728
实际上 当我用指数表示这些数字时 我注意到 2 上面的幂

88
00:04:42,728 --> 00:04:47,121
始终比循环次数大 1

89
00:04:47,121 --> 00:04:51,686
所以我的效率更接近于这个算式

90
00:04:51,686 --> 00:04:56,209
每次 2 的幂增加时

91
00:04:56,209 --> 00:04:59,557
整个循环次数都会增加

92
00:04:59,557 --> 00:05:01,833
当然只是加 1

93
00:05:01,833 --> 00:05:06,380
我该如何用数字或表达式表示

94
00:05:06,380 --> 00:05:08,439
这个 2 的幂指数呢？

95
00:05:08,439 --> 00:05:12,693
我将这么开始 这是数组的元素个数

96
00:05:12,693 --> 00:05:16,425
我想要得出这个数字 也就是指数

97
00:05:16,425 --> 00:05:20,305
我还记得以前学过的数学内容

98
00:05:20,305 --> 00:05:23,295
我可以用对数

99
00:05:23,295 --> 00:05:25,895
以不同的方式表示这种函数

100
00:05:25,895 --> 00:05:30,272
不用这个表达式 我可以说以 2 为底 8 的对数等于 3

101
00:05:30,273 --> 00:05:32,550
实际含义是一样的

102
00:05:33,600 --> 00:05:35,820
这样看起来更准确些了

103
00:05:35,820 --> 00:05:39,330
我要强调下 你不需要深入了解对数原理

104
00:05:39,330 --> 00:05:41,740
才能理解这段内容

105
00:05:41,740 --> 00:05:44,929
你只需要理解我之前展示的等式 就可以了

106
00:05:46,100 --> 00:05:48,780
我们还可以用另一种近似法

107
00:05:48,780 --> 00:05:50,270
使该算式更简单

108
00:05:50,270 --> 00:05:52,830
正如我之前提到的

109
00:05:52,830 --> 00:05:57,280
添加常量或加 1 对效率没多大影响

110
00:05:57,280 --> 00:06:00,869
此外 我也不必说底数是 2

111
00:06:00,870 --> 00:06:04,800
在计算机科学中 假设对数的底数是 2

112
00:06:04,800 --> 00:06:06,200
非常可靠

113
00:06:06,200 --> 00:06:10,359
我们经常将数组分成两半 或使用二分方法

114
00:06:10,360 --> 00:06:15,350
所以对数的底数通常是 2 而不是常见的 10

115
00:06:15,350 --> 00:06:17,859
所以这就是最终的效率算式

116
00:06:18,890 --> 00:06:21,500
稍后我会介绍更多的工具

117
00:06:21,500 --> 00:06:22,700
所以更容易直观地展示

118
00:06:22,700 --> 00:06:25,740
为何这个效率算式是正确的

119
00:06:26,840 --> 00:06:29,380
现在我要格外强调一点

120
00:06:30,510 --> 00:06:32,260
当我在学习效率的时候

121
00:06:32,260 --> 00:06:35,700
似乎大家直接就得出这个结论

122
00:06:36,720 --> 00:06:39,800
他们看着原来的问题就会说

123
00:06:39,800 --> 00:06:40,330
当然是 log(n) 了

124
00:06:41,450 --> 00:06:43,740
但是 经过几年的开发经验

125
00:06:43,740 --> 00:06:45,630
我发现实际上并不是这样

126
00:06:46,690 --> 00:06:51,650
大家可以通过三种方法得出这一效率算式

127
00:06:51,650 --> 00:06:54,715
其中之一是知道二分查找是什么情况

128
00:06:54,715 --> 00:06:58,734
之前遇到过 能够记住效率

129
00:06:58,735 --> 00:07:00,935
再次遇到后 答案直接脱口而出

130
00:07:00,935 --> 00:07:04,855
我强烈建议你在面试的时候 直接记住

131
00:07:04,855 --> 00:07:06,585
基本算法的效率

132
00:07:06,585 --> 00:07:09,854
如果你一开始就能直接说出效率

133
00:07:09,855 --> 00:07:11,335
会显得你很专业

134
00:07:11,335 --> 00:07:13,854
但是 如果你遇到一个新问题

135
00:07:13,855 --> 00:07:16,790
不知道算法效率

136
00:07:16,790 --> 00:07:18,450
你需要能够自我解决问题

137
00:07:19,450 --> 00:07:22,140
一种方式是运用证明法

138
00:07:22,140 --> 00:07:25,849
我本人不喜欢证明法 在面试中从未用过证明法

139
00:07:25,850 --> 00:07:28,560
也没见其他人在面试中用到

140
00:07:28,560 --> 00:07:32,100
如果你想学习如何证明 可以上网查找资料

141
00:07:32,100 --> 00:07:35,610
阅读研究论文 看看其他人是怎么操作的

142
00:07:35,610 --> 00:07:38,569
但是 我的目标是教会你比较实际的方法

143
00:07:39,910 --> 00:07:41,940
当你没见过相关算法

144
00:07:41,940 --> 00:07:46,400
并且没有时间从头证明

145
00:07:46,400 --> 00:07:48,810
制作一个这样的结果表格将是最佳方法之一

146
00:07:50,160 --> 00:07:53,930
创建结果表格可以帮助你找到规律

147
00:07:53,930 --> 00:07:57,380
让你能够对比数组大小和算法的循环次数

148
00:07:57,380 --> 00:08:00,730
得出效率算式

149
00:08:00,730 --> 00:08:02,830
当我开始学习效率的时候

150
00:08:02,830 --> 00:08:06,320
我需要制作这样的表格来看出规律

151
00:08:06,320 --> 00:08:08,507
但是用了表格一段时间以后

152
00:08:08,507 --> 00:08:11,685
我就能够不借助表格 发现规律了

153
00:08:11,685 --> 00:08:13,406
当我面试的时候

154
00:08:13,406 --> 00:08:19,350
我知道哪些规律比较常见 例如以 2 为对数的幂

155
00:08:19,350 --> 00:08:21,117
现在我可以非常快速地解决问题

156
00:08:21,117 --> 00:08:26,200
很少有问题我没法尝试解决

157
00:08:26,200 --> 00:08:29,289
在面试中 最坏情况是 你坦诚道

158
00:08:29,290 --> 00:08:32,890
我从未见过这个算法 或者不知道如何写出证明

159
00:08:33,100 --> 00:08:36,600
如果你真的倒霉透顶 不知道答案是什么

160
00:08:36,600 --> 00:08:40,390
一定要制作一个结果表格 并尝试得出答案

161
00:08:40,390 --> 00:08:43,210
你尝试解决问题的努力表现会给面试官带来

162
00:08:43,210 --> 00:08:43,710
很好的印象
