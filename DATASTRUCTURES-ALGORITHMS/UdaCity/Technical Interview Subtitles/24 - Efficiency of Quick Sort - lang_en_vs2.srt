1
00:00:00,280 --> 00:00:04,630
As it turns, out the efficiency of quick
sort is actually pretty complicated.

2
00:00:04,630 --> 00:00:07,250
First, let's just focus
on the worst case.

3
00:00:07,250 --> 00:00:08,950
What would that look like?

4
00:00:08,950 --> 00:00:11,860
The magic of this algorithm
is that it cuts the number

5
00:00:11,860 --> 00:00:13,459
of comparisons you need to do.

6
00:00:13,460 --> 00:00:16,410
By splitting the array in half,
pretty much every time.

7
00:00:16,410 --> 00:00:20,710
So, the worst case for us would be if
we couldn't split the array in half and

8
00:00:20,710 --> 00:00:23,620
had to do all of
the comparisons every time.

9
00:00:23,620 --> 00:00:27,310
You'll end up doing all of the
comparisons if the pivots are actually,

10
00:00:27,310 --> 00:00:29,990
already in the right place.

11
00:00:29,100 --> 00:00:31,800
Since 13 is already the biggest element,

12
00:00:31,800 --> 00:00:35,100
we'll end up comparing it to
everything else on the first go.

13
00:00:35,100 --> 00:00:37,500
And realizing that it
doesn't need to move.

14
00:00:37,500 --> 00:00:40,540
This is a lot of comparisons
to do at once, but

15
00:00:40,540 --> 00:00:44,600
the real problem happens when
the next value is also the largest.

16
00:00:44,600 --> 00:00:47,520
Again, we end up comparing to
everything smaller than it and

17
00:00:47,520 --> 00:00:49,360
we're not saving any steps.

18
00:00:49,360 --> 00:00:52,910
Hopefully, the number of comparisons
here reminds you of bubble sort.

19
00:00:52,910 --> 00:00:55,629
Remember in Bubble sort,
we would have to compare each

20
00:00:55,630 --> 00:00:59,400
element to the one next to it,
again and again and again and again.

21
00:01:00,400 --> 00:01:02,629
Eventually, we could leave off
the ones that were at the end,

22
00:01:02,630 --> 00:01:04,890
because we knew they
were in the right place.

23
00:01:04,890 --> 00:01:09,200
The worst case of Quick Sort is exactly
the same which means that the worst

24
00:01:09,200 --> 00:01:13,600
case of Quick Sort is
actually big O of n squared.

25
00:01:13,600 --> 00:01:17,539
For something called a Quick Sort,
that's a really terrible efficiency.

26
00:01:17,540 --> 00:01:20,600
However, Quick Sort is useful for
two main reasons.

27
00:01:21,280 --> 00:01:26,660
First of all, the average and best
case complexity are actually nlogin.

28
00:01:26,660 --> 00:01:29,570
In a good case, the pivot will
move down to the middle and

29
00:01:29,570 --> 00:01:32,669
we'll get to divide the array
in half every time.

30
00:01:32,670 --> 00:01:36,580
With our pivot in the middle, we can
look at the other halves of the array

31
00:01:36,580 --> 00:01:39,100
and move their pivots to the middle too.

32
00:01:39,100 --> 00:01:43,410
Since these pivots are sorted, we know
that everything else is sorted, so

33
00:01:43,410 --> 00:01:45,700
we're done really quickly.

34
00:01:45,700 --> 00:01:48,340
Here, because we're cutting
the array in half every time,

35
00:01:48,340 --> 00:01:50,670
it'll end up looking
a lot like merge sort.

36
00:01:50,670 --> 00:01:53,970
So again,
that's why are efficiency is at log n.

37
00:01:53,970 --> 00:01:57,300
The average case is actually
going to look a lot like this.

38
00:01:57,300 --> 00:02:01,550
We'll pick a random number, it'll move
close to the middle and so on and so on.

39
00:02:01,550 --> 00:02:05,289
However, if we know we're going to be
getting a raise that are near sorted.

40
00:02:05,290 --> 00:02:07,900
We don't want to use Quick Sort,

41
00:02:07,900 --> 00:02:10,350
since that will end up being
the worse case every time.

42
00:02:10,350 --> 00:02:13,489
The second point is that you can do
some optimizations with Quick Sort

43
00:02:13,490 --> 00:02:15,520
that will make it run faster.

44
00:02:15,520 --> 00:02:18,330
For example, when you split your array,

45
00:02:18,330 --> 00:02:22,630
you can configure your program such that
it runs both halves at the same time.

46
00:02:22,630 --> 00:02:25,200
It will end up using the same
amount of computing power, but

47
00:02:25,200 --> 00:02:26,950
it will eat up less time.

48
00:02:26,950 --> 00:02:30,490
Also, rather than selecting
the last element as a pivot.

49
00:02:30,500 --> 00:02:32,300
You could look at
the last few elements and

50
00:02:32,300 --> 00:02:34,350
select the median of them as the pivot.

51
00:02:34,350 --> 00:02:37,700
Selecting the median will give
you a better sense of what's in

52
00:02:37,700 --> 00:02:38,760
the middle of the array overall.

53
00:02:38,760 --> 00:02:42,179
So, you have a better chance of
moving your element in the middle and

54
00:02:42,180 --> 00:02:44,520
having that best case scenario.

55
00:02:44,520 --> 00:02:47,260
Also this version of
Quick Sort is in place, so

56
00:02:47,260 --> 00:02:49,690
we aren't using any extra space.

57
00:02:49,690 --> 00:02:51,530
Our space complexity is constant.
