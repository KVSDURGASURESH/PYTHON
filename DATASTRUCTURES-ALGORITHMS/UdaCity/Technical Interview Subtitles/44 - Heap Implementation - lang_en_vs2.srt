1
00:00:00,240 --> 00:00:04,150
Another thing I want to discuss
is the implementation of a heap.

2
00:00:04,150 --> 00:00:06,210
Though heaps are represented as trees,

3
00:00:06,210 --> 00:00:09,290
they are actually often
stored as arrays.

4
00:00:09,290 --> 00:00:11,200
How is that possible?

5
00:00:11,200 --> 00:00:15,430
Well, since we know how many
children each parent has, two, and

6
00:00:15,430 --> 00:00:19,600
thus how many nodes will be at each
level, we can use a little math to

7
00:00:19,600 --> 00:00:23,830
figure out where the next node will fall
in the array and then traverse the tree.

8
00:00:23,830 --> 00:00:26,860
Let's convert this sorted
array into a tree.

9
00:00:26,860 --> 00:00:31,220
We know that the first element is going
to be the root since it's the biggest.

10
00:00:31,220 --> 00:00:35,160
The next two elements in the array
are the children of the root.

11
00:00:35,160 --> 00:00:38,580
By convention I insert
them from left to right.

12
00:00:38,580 --> 00:00:42,400
However, that doesn't really matter as
long as they're on the second level.

13
00:00:42,400 --> 00:00:46,510
Again, each level on the tree is
twice as big as the one before it, so

14
00:00:46,510 --> 00:00:49,140
we know the next level
has four elements.

15
00:00:49,140 --> 00:00:52,160
We can do this programmatically
by tracking the size of

16
00:00:52,160 --> 00:00:56,929
each level in a variable, then doubling
it each time we move to a new level.

17
00:00:56,930 --> 00:01:00,950
And everything left over fills in
the left side of the last level.

18
00:01:00,950 --> 00:01:01,940
Now you're done.

19
00:01:01,940 --> 00:01:03,290
Just a quick note.

20
00:01:03,290 --> 00:01:06,130
Not every array can be
represented as a heap.

21
00:01:06,130 --> 00:01:09,339
This one could because it was
sorted in descending order.

22
00:01:09,340 --> 00:01:13,490
In general, the numbers need to be in
an order that will make sense on a heap.

23
00:01:13,490 --> 00:01:16,960
Storing our data in an array
can save us some space.

24
00:01:16,960 --> 00:01:19,960
If we use an array,
we just need to store the node value and

25
00:01:19,960 --> 00:01:22,330
index in the array slot.

26
00:01:22,330 --> 00:01:25,240
However, if we created some
kind of node object for

27
00:01:25,240 --> 00:01:29,630
a tree, each would need pointers
to children and parents, so

28
00:01:29,630 --> 00:01:33,649
we need to store values and
a bunch of pointers for every element.

29
00:01:33,650 --> 00:01:36,670
Since the array saves us the pointers,
it saves us space.
