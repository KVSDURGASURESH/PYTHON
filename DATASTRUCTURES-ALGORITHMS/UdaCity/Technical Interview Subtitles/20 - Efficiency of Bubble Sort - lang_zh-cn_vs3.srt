1
00:00:00,830 --> 00:00:04,149
那么这个算法的效率是多少呢？

2
00:00:04,150 --> 00:00:08,760
我们需要循环访问整个数组好几次

3
00:00:08,760 --> 00:00:10,640
这些就是我们的大概执行过程

4
00:00:10,640 --> 00:00:14,823
整体而言 我们需要执行 4 步 即 n-1 次循环访问

5
00:00:14,823 --> 00:00:18,690
每步 我们都需要对比 n-1 次

6
00:00:18,690 --> 00:00:26,630
所以 n-1 次循环的 n-1 次对比 最终结果是这样的

7
00:00:26,630 --> 00:00:29,730
我们可以运用代数学简化这个算式

8
00:00:31,280 --> 00:00:33,640
结果是这样的

9
00:00:33,640 --> 00:00:36,840
如果你不会代数 也不用太担心

10
00:00:36,840 --> 00:00:39,420
减 1 并不会造成多大影响

11
00:00:39,420 --> 00:00:42,380
所以始终可以简化为 n x n= n2

12
00:00:43,670 --> 00:00:49,440
所以我们实际上不需要 -2n+1 部分

13
00:00:49,440 --> 00:00:50,800
可以删掉它

14
00:00:50,800 --> 00:00:54,980
得出效率为 O(n2)

15
00:00:56,200 --> 00:00:58,920
实际上 对于该算法 我们有个方式可以

16
00:00:58,920 --> 00:00:59,940
节省时间

17
00:00:59,940 --> 00:01:04,800
如果你有所注意 会发现每次我们循环访问数组时

18
00:01:04,800 --> 00:01:07,960
我们都对比了最后几个值 虽然后来我们就不需要这么做了

19
00:01:07,960 --> 00:01:11,390
当我们要把 7 冒上去的时候 对比 7 和 8 是合理的

20
00:01:11,400 --> 00:01:15,380
但是当我们将更小的数字冒上去的时候

21
00:01:15,380 --> 00:01:18,560
这个对比就不会更改任何内容了

22
00:01:18,560 --> 00:01:22,220
最常见的冒泡排序版本实际上会省去此步

23
00:01:22,220 --> 00:01:26,400
因为我们不需要每次都对比最后几个值了

24
00:01:26,400 --> 00:01:29,330
这样做 是因为第一次循环后 我们就知道 8

25
00:01:29,330 --> 00:01:30,410
处在正确的位置了

26
00:01:30,410 --> 00:01:33,600
所以后续就不用将其与任何其他数字对比了

27
00:01:33,600 --> 00:01:35,399
这样会节省一些时间

28
00:01:35,400 --> 00:01:39,320
但是不会对整体的运行时间 O(n2) 产生多大影响

29
00:01:39,320 --> 00:01:43,250
现在再快速提几点内容

30
00:01:43,250 --> 00:01:45,250
我们知道最坏情况和平均情况是

31
00:01:45,250 --> 00:01:47,610
O(n2)

32
00:01:48,850 --> 00:01:52,590
但是 最佳情况实际上会是 O(n)

33
00:01:52,600 --> 00:01:55,700
最佳情况可以是数组已经排好序

34
00:01:55,700 --> 00:02:00,310
我们只需浏览一次 知道排好了 不需要再执行任何操作

35
00:02:00,310 --> 00:02:04,600
或者只有一个数字需要冒到数组的正确位置

36
00:02:04,600 --> 00:02:09,370
最后强调一点 我们不需要任何其他内容来完成排序

37
00:02:09,370 --> 00:02:13,410
我们不需要额外的数组或者额外的数据结构等

38
00:02:13,410 --> 00:02:17,400
冒泡排序是原地排序算法的一个很好的例子

39
00:02:17,400 --> 00:02:20,300
空间复杂度是常量

40
00:02:20,300 --> 00:02:24,100
意味着整个流程我们都不需要额外的数组或数据结构
