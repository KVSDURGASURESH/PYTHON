1
00:00:00,240 --> 00:00:04,150
我要讨论的另一项内容是实施堆

2
00:00:04,150 --> 00:00:06,210
虽然堆属于树

3
00:00:06,210 --> 00:00:09,290
但是经常是存储为数组的

4
00:00:09,290 --> 00:00:11,200
这怎么可能？

5
00:00:11,200 --> 00:00:15,430
因为我们知道每个父节点有两个子节点

6
00:00:15,430 --> 00:00:19,600
也就知道每个层级将有多少节点

7
00:00:19,600 --> 00:00:23,830
稍微计算下 就知道下个节点会在数组的什么位置 然后遍历树

8
00:00:23,830 --> 00:00:26,860
我们将这个排好序的数组转换成树

9
00:00:26,860 --> 00:00:31,220
我们知道第一个元素将是根节点 因为它是最大的

10
00:00:31,220 --> 00:00:35,160
数组中的下两个元素将是根节点的孩子

11
00:00:35,160 --> 00:00:38,580
按照惯例 我从左往右插入

12
00:00:38,580 --> 00:00:42,400
但是这并不重要 只要它们都位于第二层就行了

13
00:00:42,400 --> 00:00:46,510
每个层级的大小都是上个层级的一倍

14
00:00:46,510 --> 00:00:49,140
因此 我们知道下一层级有 4 个元素

15
00:00:49,140 --> 00:00:52,160
我们可以通过变量跟踪每个层级的大小

16
00:00:52,160 --> 00:00:56,929
然后每次移到新的层级后 都翻倍

17
00:00:56,930 --> 00:01:00,950
最后剩下的几个元素在最后一层从左往右填充

18
00:01:00,950 --> 00:01:01,940
操作完毕

19
00:01:01,940 --> 00:01:03,290
提醒下

20
00:01:03,290 --> 00:01:06,130
并不是所有数组都可以表示为堆

21
00:01:06,130 --> 00:01:09,339
这个可以 因为它是按降序排序的

22
00:01:09,340 --> 00:01:13,490
通常 数字的顺序需要符合堆的要求

23
00:01:13,490 --> 00:01:16,960
在数组中存储数据可以节省一些空间

24
00:01:16,960 --> 00:01:19,960
如果使用数组 我们只需要存储节点值和

25
00:01:19,960 --> 00:01:22,330
数组槽位中的索引即可

26
00:01:22,330 --> 00:01:25,240
但是 如果我们为树创建节点对象

27
00:01:25,240 --> 00:01:29,630
则每个都需要指向子节点和父节点的指针

28
00:01:29,630 --> 00:01:33,649
因此我们需要为每个元素存储值和各种指针

29
00:01:33,650 --> 00:01:36,670
因为数组不需要指针 因此节省了空间
