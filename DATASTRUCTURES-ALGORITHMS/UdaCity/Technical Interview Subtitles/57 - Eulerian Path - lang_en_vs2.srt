1
00:00:00,280 --> 00:00:04,490
There are a couple particularly
notable types of paths and graphs.

2
00:00:04,490 --> 00:00:09,120
Here, a path is just a specific route
you take in a traversal or search.

3
00:00:09,120 --> 00:00:13,900
For example, you could create a path
that travels through every edge in

4
00:00:13,900 --> 00:00:14,340
a graph at least once.

5
00:00:15,500 --> 00:00:18,620
That path is called an Eulerian path.

6
00:00:18,620 --> 00:00:23,890
Yes, it's pronounced Eulerian after
the famous mathematician Euler.

7
00:00:23,890 --> 00:00:27,270
In a basic Eulerian path,
you start at one node,

8
00:00:27,270 --> 00:00:31,600
traverse through all edges and
might end up at a different node.

9
00:00:32,880 --> 00:00:36,965
In an Eulerian cycle, you must
traverse every edge only once and

10
00:00:36,965 --> 00:00:38,865
end up at the same node
that you started with.

11
00:00:40,550 --> 00:00:45,850
It turns out that not every graph is
capable of having an Eulerian path.

12
00:00:45,850 --> 00:00:47,225
In this graph,
no matter where you start,

13
00:00:47,225 --> 00:00:51,250
you'll get stuck on one of these
outer nodes and won't be able to

14
00:00:51,250 --> 00:00:54,745
reach the other nodes without traveling
over an edge you've already seen.

15
00:00:55,795 --> 00:00:57,400
There's a nice trick here.

16
00:00:57,400 --> 00:01:02,400
Our good friend Euler said that graphs
can only have Eulerian cycles if

17
00:01:02,400 --> 00:01:07,950
all vertices have an even degree or an
even number of edges connected to them.

18
00:01:07,950 --> 00:01:11,560
Eulerian paths are a little
bit more lenient.

19
00:01:11,560 --> 00:01:15,650
So it's okay for your graph to
have two nodes with an odd degree

20
00:01:15,650 --> 00:01:18,500
as long as they're the start and
end of the path.

21
00:01:19,440 --> 00:01:23,710
Let's look at a quick algorithm for
finding Eulerian cycles.

22
00:01:23,710 --> 00:01:25,539
You can start at any vertex and

23
00:01:25,540 --> 00:01:28,210
follow edges until you
return back to that vertex.

24
00:01:29,280 --> 00:01:33,690
If you didn't encounter every edge,
you can start from an unseen edge

25
00:01:33,690 --> 00:01:36,929
connected to a node
you've already visited.

26
00:01:36,930 --> 00:01:40,670
Again, you create a path
through those unseen edges.

27
00:01:40,670 --> 00:01:43,290
You can continue this
process until you've seen

28
00:01:43,290 --> 00:01:44,810
every edge in the graph once.

29
00:01:45,990 --> 00:01:49,149
Then you can simply add
the paths together,

30
00:01:49,150 --> 00:01:51,320
combining them at the nodes
they have in common.

31
00:01:52,515 --> 00:01:54,296
This algorithm is really efficient.

32
00:01:54,296 --> 00:02:00,170
It takes big O of the number of edges
since it visits every edge once,

33
00:02:00,170 --> 00:02:01,560
which is the best we could hope for.

34
00:02:03,600 --> 00:02:06,530
A Hamiltonian path is
another type of path

35
00:02:06,530 --> 00:02:09,860
that must go through every vertex once.

36
00:02:09,860 --> 00:02:14,910
Similarly, a Hamiltonian cycle will
start and end with the same vertex.

37
00:02:14,910 --> 00:02:18,270
Trying to decide whether
a graph has a Hamiltonian path

38
00:02:18,270 --> 00:02:22,810
is a famous issue in computer science
called the Hamiltonian path problems.

39
00:02:23,880 --> 00:02:26,859
We don't quite have the tools
to talk about it yet, but

40
00:02:26,860 --> 00:02:29,980
we'll talk about similarly
famous problems very soon.
