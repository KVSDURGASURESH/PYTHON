1
00:00:00,601 --> 00:00:03,834
Então, qual foi o total
de comparações?

2
00:00:03,868 --> 00:00:06,634
Bem,
vamos tentar achar um padrão.

3
00:00:06,667 --> 00:00:08,467
Parece que, em cada etapa,

4
00:00:08,501 --> 00:00:12,467
fizemos uma comparação a menos
do que o arranjo em construção.

5
00:00:12,501 --> 00:00:16,934
Construindo um arranjo de 7 elementos,
fizemos apenas 6 comparações.

6
00:00:16,968 --> 00:00:20,734
Construindo um arranjo de 3,
duas comparações.

7
00:00:20,767 --> 00:00:22,901
Um de dois,
uma comparação.

8
00:00:22,934 --> 00:00:26,400
E, num arranjo de 4 elementos,
fizemos 3 comparações.

9
00:00:26,434 --> 00:00:29,601
Vou chamar o tamanho
de cada arranjo de "m"

10
00:00:29,634 --> 00:00:31,701
para facilitar minha vida.

11
00:00:32,400 --> 00:00:36,467
Se m é o tamanho do arranjo
em construção,

12
00:00:36,501 --> 00:00:40,400
o número de comparações
sempre será um a menos.

13
00:00:40,434 --> 00:00:44,434
Será difícil conseguir
um número exato de comparações.

14
00:00:44,467 --> 00:00:49,100
Porém, podemos contar
com um bom amigo, a aproximação.

15
00:00:49,133 --> 00:00:54,767
Como cada iteração sempre circula
pelos mesmos 7 elementos,

16
00:00:54,801 --> 00:00:57,501
sabemos que o tamanho
dos arranjos, ou m,

17
00:00:57,534 --> 00:01:00,501
sempre soma 7,
no fim das contas.

18
00:01:01,033 --> 00:01:03,868
Novamente,
temos aqui um arranjo de 7.

19
00:01:03,901 --> 00:01:08,133
Aqui, um arranjo de 4 e um de 3,
que somam 7.

20
00:01:08,167 --> 00:01:13,067
E, aqui, um, dois, dois e dois,
que somam 7.

21
00:01:13,100 --> 00:01:17,400
Como isso é divisão e conquista,
e dividimos o arrnjo a cada etapa,

22
00:01:17,434 --> 00:01:21,601
podemos dizer que faremos
cerca de 7 comparações a cada etapa.

23
00:01:22,300 --> 00:01:24,200
7 é um limite superior.

24
00:01:24,234 --> 00:01:27,033
Nunca faremos mais
que 7 comparações,

25
00:01:27,067 --> 00:01:30,400
mas, em muitas etapas,
chegamos perto de 7.

26
00:01:30,434 --> 00:01:33,601
Para saber o tempo
de um algoritmo de ordenação,

27
00:01:33,634 --> 00:01:37,234
você pode multiplicar
o número total de iterações

28
00:01:37,267 --> 00:01:40,334
pelo número de comparações
de cada iteração.

29
00:01:40,367 --> 00:01:44,901
Em uma ordenação por flutuação,
fizemos n comparações e n etapas.

30
00:01:44,934 --> 00:01:49,901
Provamos que fazemos, no máximo,
n comparações por etapa.

31
00:01:49,934 --> 00:01:53,133
Mas qual é o total de etapas
que fazemos?

32
00:01:53,167 --> 00:01:56,033
Certo.
Para ordenar um arranjo de 7,

33
00:01:56,067 --> 00:02:00,334
fizemos 3 etapas,
1, 2 e 3.

34
00:02:01,067 --> 00:02:04,934
Também devo indicar
os subprocessos que ocorreram.

35
00:02:05,501 --> 00:02:10,300
Para ordenar este arranjo de dois,
só fizemos uma etapa.

36
00:02:11,000 --> 00:02:14,567
Quando ordenamos um arranjo de 3
ou um arranjo de 4,

37
00:02:14,601 --> 00:02:17,033
precisamos de duas etapas.

38
00:02:17,067 --> 00:02:20,267
Podemos usar uma tabela
para registrar tudo isso.

39
00:02:20,300 --> 00:02:25,300
Quando o tamanho do arranjo era 7,
fizemos 3 etapas diferentes.

40
00:02:25,334 --> 00:02:30,501
Quando o tamanho era de 3 ou 4,
fizemos só 2 etapas.

41
00:02:30,501 --> 00:02:33,934
Quando o arranjo era de 2,
fizemos 1 etapa.

42
00:02:33,968 --> 00:02:38,667
E, com um elemento só, não tivemos
que comparar, então sem etapas.

43
00:02:39,267 --> 00:02:43,367
Vou preencher uns números aqui
para poupar tempo.

44
00:02:43,400 --> 00:02:48,534
Eu fiz esses cálculos sozinha.
Faça-os você mesmo também.

45
00:02:48,567 --> 00:02:52,067
Certo. Isso pode parecer
um pouco familiar para você.

46
00:02:52,100 --> 00:02:55,868
Lembra-se da busca binária,
quando a tabela era parecida,

47
00:02:55,901 --> 00:03:00,667
e o número de iterações aumentava
a cada potência de 2?

48
00:03:00,701 --> 00:03:03,334
Bem,
temos algo bem semelhante aqui.

49
00:03:03,400 --> 00:03:05,868
Em vez de aumentar
nas potências de 2,

50
00:03:05,901 --> 00:03:09,767
desta vez, aumentamos 1
depois de cada potência de 2.

51
00:03:11,334 --> 00:03:13,167
No vídeo da busca binária,

52
00:03:13,200 --> 00:03:16,801
provei por que o número
de iterações era igual a log(n).

53
00:03:16,834 --> 00:03:19,467
Caso você precise recordar,
volte lá.

54
00:03:20,167 --> 00:03:22,267
Desta vez,
é um pouco diferente,

55
00:03:22,300 --> 00:03:26,200
porque ele aumenta depois
e não na potência de 2.

56
00:03:26,234 --> 00:03:29,734
Novamente,
dependemos da aproximação.

57
00:03:29,767 --> 00:03:33,634
Não importa muito
em que lugar a mudança ocorre

58
00:03:33,667 --> 00:03:37,567
desde que capturemos o intervalo
em que a mudança ocorre.

59
00:03:38,200 --> 00:03:42,534
Em suma, fazemos aproximadamente
n comparações

60
00:03:42,567 --> 00:03:44,667
para log(n) etapas.

61
00:03:45,701 --> 00:03:49,200
Isso dá uma complexidade total
de nlog(n).

62
00:03:49,234 --> 00:03:53,567
Bem melhor que o n² que conseguimos
na ordenação por flutuação.

63
00:03:53,601 --> 00:03:59,133
Na ordenação por flutuação,
tínhamos n x n ou n² como eficiência.

64
00:03:59,968 --> 00:04:02,634
Geralmente,
o log(n) será menor que n,

65
00:04:02,667 --> 00:04:05,367
mas, com certeza,
nunca será maior que n.

66
00:04:05,400 --> 00:04:08,400
Então a eficiência da ordenação
por mistura é melhor

67
00:04:08,434 --> 00:04:10,601
que a da ordenação
por flutuação.

68
00:04:10,667 --> 00:04:14,367
Mas a eficiência espacial
da ordenação por mistura é pior

69
00:04:14,400 --> 00:04:15,901
que a da por flutuação.

70
00:04:15,934 --> 00:04:18,434
A ordenação por flutuação
era in-place,

71
00:04:18,466 --> 00:04:21,701
ou seja, não precisávamos
de arranjos adicionais.

72
00:04:21,733 --> 00:04:25,968
Aqui, copiamos com frequência
os valores em novos arranjos.

73
00:04:26,000 --> 00:04:31,868
Pode-se dizer que o espaço auxiliar
ou extra usado era linear.

74
00:04:32,434 --> 00:04:36,868
Essa complexidade supõe
que excluímos os arranjos após o uso.

75
00:04:36,901 --> 00:04:40,434
A cada etapa, copiávamos valores
em novos arranjos,

76
00:04:40,467 --> 00:04:42,801
então precisávamos
de arranjos novos.

77
00:04:42,834 --> 00:04:45,834
Mas poderíamos dizer
que excluíamos os antigos

78
00:04:45,868 --> 00:04:47,334
sempre que acabávamos.

79
00:04:47,367 --> 00:04:49,901
Assim, não usamos sempre
vários arranjos.

80
00:04:49,934 --> 00:04:53,601
Só precisamos de dois arranjos
diferentes a cada etapa.

81
00:04:53,634 --> 00:04:58,234
O arranjo onde nossos números estavam
e o arranjo para onde os copiamos.
