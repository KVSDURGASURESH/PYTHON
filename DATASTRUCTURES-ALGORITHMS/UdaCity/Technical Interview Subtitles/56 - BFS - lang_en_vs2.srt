1
00:00:00,800 --> 00:00:04,420
BFS, or breadth-first search,
is actually quite similar.

2
00:00:04,420 --> 00:00:08,250
You're still visiting every edge and
marking off every node.

3
00:00:08,250 --> 00:00:11,110
However, here you search
every edge of one node

4
00:00:11,110 --> 00:00:12,719
before continuing on through the graph.

5
00:00:13,870 --> 00:00:16,900
Again, we start with the first node and

6
00:00:16,100 --> 00:00:19,450
mark it as seen,
then visit a node adjacent to it.

7
00:00:20,460 --> 00:00:23,860
Once we mark that node,
we can add it to a queue.

8
00:00:23,860 --> 00:00:28,759
Remember the difference between a queue
and a stack, like we used for DFS.

9
00:00:28,760 --> 00:00:31,970
For a queue, we'll remove
the first element we put in it.

10
00:00:31,970 --> 00:00:35,250
But for a stack, we remove
the most recently added element.

11
00:00:36,600 --> 00:00:38,400
We go back to that first node and

12
00:00:38,400 --> 00:00:42,930
visit everything adjacent to it, marking
each as seen and adding them to a queue.

13
00:00:44,100 --> 00:00:48,290
When we've run out of edges,
we can just DQ a node from the queue and

14
00:00:48,290 --> 00:00:50,140
use that as our next starting place.

15
00:00:51,390 --> 00:00:53,960
We look at every node
adjacent to that one,

16
00:00:53,960 --> 00:00:57,215
adding each one to the stack until
we've exhausted our options.

17
00:00:58,225 --> 00:01:00,785
It's important to note that when we DQ,

18
00:01:00,785 --> 00:01:03,485
we're getting a node adjacent
to the one that we started with.

19
00:01:04,525 --> 00:01:09,625
You can kind of envision a BFS as
creating a tree out of a graph.

20
00:01:09,625 --> 00:01:12,665
The node that we started
with becomes the root,

21
00:01:12,665 --> 00:01:15,589
the group of adjacent nodes is
the next level in the tree.

22
00:01:16,590 --> 00:01:20,230
We need to continue adding
nodes one level at a time.

23
00:01:20,230 --> 00:01:24,260
We finish off one level entirely
before moving on to the next.

24
00:01:24,260 --> 00:01:25,985
And soon, we're done with our BFS.

25
00:01:27,150 --> 00:01:31,880
The efficiency is still the number of
edges plus the number of vertices.

26
00:01:31,880 --> 00:01:35,410
Again, we're visiting every edge and
vertex during our traversal.
