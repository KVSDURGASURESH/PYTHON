1
00:00:00,634 --> 00:00:04,100
Ótimo, então qual é a eficiência
deste algoritmo?

2
00:00:04,133 --> 00:00:08,601
Bem, tivemos que percorrer
o arranjo várias vezes.

3
00:00:08,634 --> 00:00:10,567
Fizemos isso
aproximadamente.

4
00:00:10,601 --> 00:00:15,334
Em geral, tivemos que fazer 4
ou n-1 iterações,

5
00:00:15,367 --> 00:00:18,667
e, a cada etapa,
fizemos n-1 comparações.

6
00:00:18,701 --> 00:00:23,767
Então n-1 comparações
vezes n-1 iterações

7
00:00:24,434 --> 00:00:26,167
nos dá algo assim.

8
00:00:26,667 --> 00:00:30,167
Podemos usar álgebra
para simplificar.

9
00:00:31,267 --> 00:00:33,601
O que dá algo assim.

10
00:00:33,634 --> 00:00:36,801
Novamente, não se preocupe
com a parte algébrica.

11
00:00:36,834 --> 00:00:42,767
O -1 não muda muito as coisas,
então podemos dizer que n x n = n².

12
00:00:43,567 --> 00:00:49,167
Assim,
não precisamos do -2n + 1.

13
00:00:49,200 --> 00:00:50,801
Podemos nos livrar disso,

14
00:00:50,801 --> 00:00:55,868
o que nos deixa
com esta eficiência: O(n²).

15
00:00:55,901 --> 00:00:59,901
Poderíamos ter poupado tempo
com este algoritmo.

16
00:00:59,934 --> 00:01:04,934
Cada vez que percorremos o arranjo,
comparamos os últimos valores,

17
00:01:04,968 --> 00:01:07,934
o que não era necessário
depois de um tempo.

18
00:01:07,968 --> 00:01:12,334
Fazia sentido comparar 7 com 8
quando estávamos flutuando o 7.

19
00:01:12,367 --> 00:01:15,334
Mas, em relação
aos elementos inferiores,

20
00:01:15,367 --> 00:01:17,868
esta comparação
não mudou nada.

21
00:01:18,400 --> 00:01:22,200
A versão mais comum
da ordenação por flutuação

22
00:01:22,234 --> 00:01:26,100
não compara os últimos elementos
quando não é necessário.

23
00:01:26,133 --> 00:01:28,501
Ela presume que,
após a 1ª iteração,

24
00:01:28,534 --> 00:01:30,367
o 8 está no lugar certo.

25
00:01:30,400 --> 00:01:33,501
Então você não precisa
compará-lo com mais nada.

26
00:01:33,534 --> 00:01:37,667
Isso nos poupará algum tempo,
mas não mudará a execução

27
00:01:37,701 --> 00:01:39,801
do O(n²).

28
00:01:40,300 --> 00:01:42,801
Tenho dois avisos rápidos
para você.

29
00:01:42,834 --> 00:01:48,200
O pior caso e o caso médio
serão O(n²).

30
00:01:48,834 --> 00:01:51,901
Porém,
o melhor caso será O(n).

31
00:01:51,934 --> 00:01:55,100
O melhor caso seria
um arranjo já ordenado,

32
00:01:55,133 --> 00:01:59,934
que percorreríamos só uma vez
e não faríamos mais nada,

33
00:01:59,968 --> 00:02:04,567
ou apenas um número
precisando flutuar no arranjo.

34
00:02:04,601 --> 00:02:09,334
Por último, não precisamos
usar nada a mais para ordenar.

35
00:02:09,366 --> 00:02:13,367
Não tivemos arranjos nem estruturas
de dados a mais, nada disso.

36
00:02:13,400 --> 00:02:17,367
Este é um ótimo exemplo
de algoritmo de ordenação in-place.

37
00:02:17,400 --> 00:02:19,934
E a complexidade
de espaço é constante.

38
00:02:19,968 --> 00:02:24,300
Ou seja, não precisamos de arranjos
ou estruturas de dados a mais.
