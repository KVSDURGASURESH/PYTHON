1
00:00:00,660 --> 00:00:06,720
Bubble sort, or sinking sort, is a naive
approach, like I described before.

2
00:00:06,720 --> 00:00:09,670
You will go through your array
comparing elements side by side and

3
00:00:09,670 --> 00:00:11,180
switching them whenever necessary.

4
00:00:12,370 --> 00:00:13,989
Let me illustrate with a quick example.

5
00:00:15,380 --> 00:00:18,250
We'll start at the beginning and
we'll compare the first two elements.

6
00:00:19,430 --> 00:00:22,540
If the first element is bigger than
the second one, we'll switch them.

7
00:00:24,100 --> 00:00:25,540
Great, we've made one switch, so

8
00:00:25,540 --> 00:00:29,800
now we can move on over
to the next two elements.

9
00:00:29,800 --> 00:00:31,259
Looks like we need to
switch here as well.

10
00:00:31,260 --> 00:00:34,697
All right, now we can move
along to the next two elements.

11
00:00:34,697 --> 00:00:38,910
And again, looks like our first element
is bigger than our second one, so

12
00:00:38,910 --> 00:00:40,900
we'll need to switch.

13
00:00:40,900 --> 00:00:43,410
Okay, now we can compare the last
two elements in the array.

14
00:00:43,410 --> 00:00:46,959
And once again, the first element
is bigger than the second one, so

15
00:00:46,960 --> 00:00:47,770
we'll need to switch.

16
00:00:48,860 --> 00:00:50,910
All right,
now we're done with this round.

17
00:00:50,910 --> 00:00:53,400
Okay, now that we've passed
through the array one time,

18
00:00:53,400 --> 00:00:56,199
we should count up the number
of comparisons we needed.

19
00:00:56,200 --> 00:00:59,590
It took us four comparisons
to get through five elements.

20
00:01:00,160 --> 00:01:02,842
I think it's safe to say
that our runtime for

21
00:01:02,842 --> 00:01:06,660
this step was n-1 since
the array size was five.

22
00:01:06,660 --> 00:01:10,220
So with our n-1 comparisons,
what actually changed?

23
00:01:10,220 --> 00:01:14,179
The array is still not actually sorted,
but it looks a little bit better now.

24
00:01:14,180 --> 00:01:18,540
The largest element, 8, moved up to
the end of the array where it belongs.

25
00:01:18,540 --> 00:01:21,470
This is actually why this
method is called bubble sort.

26
00:01:21,470 --> 00:01:26,700
In each iteration the largest element in
the array will bubble on up to the top.

27
00:01:26,700 --> 00:01:27,830
So by that logic,

28
00:01:27,830 --> 00:01:32,360
in the next iteration the number 7
should bubble up to right below 8.

29
00:01:32,360 --> 00:01:34,800
Let's repeat the process.

30
00:01:34,800 --> 00:01:37,940
Again, we're going to start at the
bottom and work our way up to the top.

31
00:01:37,940 --> 00:01:39,789
Looks like we need to
switch on our first step.

32
00:01:41,330 --> 00:01:42,920
Let's move to step two now.

33
00:01:42,920 --> 00:01:46,390
It looks like we actually don't need
to flip these two for the first time.

34
00:01:46,390 --> 00:01:49,480
This first element is actually
less than that second element, so

35
00:01:49,480 --> 00:01:51,350
we have nothing to do, awesome.

36
00:01:51,350 --> 00:01:53,740
We do need to flip 7 and 0 though.

37
00:01:53,740 --> 00:01:56,630
And the last two elements are in order,
so no work here.

38
00:01:56,630 --> 00:02:00,570
Again, we had to do four steps,
which is still n-1.

39
00:02:00,570 --> 00:02:03,479
Okay, now we're going to have to
do two more rounds of this, but

40
00:02:03,480 --> 00:02:05,310
I don't want to bore
you with the details.

41
00:02:05,310 --> 00:02:08,729
Let me show you what the next
iteration of comparisons looks like.

42
00:02:08,729 --> 00:02:11,590
I did another iteration,
but not much has changed.

43
00:02:11,590 --> 00:02:15,000
I just had to flip the 3 and
the 0 to look like this.

44
00:02:15,000 --> 00:02:19,410
Again, the biggest element left, 3,
bubbled up to the place it belongs, but

45
00:02:19,410 --> 00:02:21,170
we still have work to do.

46
00:02:21,170 --> 00:02:25,220
And again, note that this took
four steps, so n-1 steps.

47
00:02:25,220 --> 00:02:26,940
We only have one iteration left.

48
00:02:26,940 --> 00:02:28,720
Let me show you what that looks like.

49
00:02:28,720 --> 00:02:31,820
This time we only had to flip the 0 and
the 1, and we're done.
