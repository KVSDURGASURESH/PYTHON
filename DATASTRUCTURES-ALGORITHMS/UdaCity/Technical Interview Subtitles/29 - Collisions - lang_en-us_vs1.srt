1
00:00:00,210 --> 00:00:03,430
As it turns out there's
a flaw in our elegant system.

2
00:00:03,430 --> 00:00:07,330
There are times when a hash function
will spit out the same hash value for

3
00:00:07,330 --> 00:00:08,870
two different inputs.

4
00:00:08,870 --> 00:00:10,860
This situation is termed a Collision.

5
00:00:11,880 --> 00:00:14,900
There are two main ways
to fix a collision.

6
00:00:15,200 --> 00:00:18,700
The first is to change the value
in your hash function, or

7
00:00:18,700 --> 00:00:21,310
to change the hash function completely,
so

8
00:00:21,310 --> 00:00:24,679
you have more than enough slots to
store all of your potential values.

9
00:00:25,970 --> 00:00:28,790
You can also keep your
original hash function but

10
00:00:28,790 --> 00:00:31,400
change the structure of your array.

11
00:00:31,400 --> 00:00:33,790
Instead of storing one
hash value in each slot,

12
00:00:33,790 --> 00:00:38,570
you can store some type of lists that
contains all values hashed at that spot.

13
00:00:38,570 --> 00:00:42,410
These lists are generally
called buckets in this context.

14
00:00:42,410 --> 00:00:47,440
Rather than storing one value in each
slot, you can store multiple values or

15
00:00:47,440 --> 00:00:49,989
a collection in each bucket, but

16
00:00:49,990 --> 00:00:52,420
are either of these
approaches actually helpful?

17
00:00:53,420 --> 00:00:56,760
For the first one, you can
maintain constant time look up but

18
00:00:56,760 --> 00:00:59,660
by using a bigger number
in your hash function,

19
00:00:59,660 --> 00:01:03,550
you're going to require a lot
more space to store your values.

20
00:01:03,550 --> 00:01:07,539
Also, if you do this reactively and
change the value in your hash function

21
00:01:07,540 --> 00:01:12,400
every time you have a collision, moving
all of your data to a new array is going

22
00:01:12,400 --> 00:01:16,850
to definitely increase the complexity
in terms of both size and time.

23
00:01:16,850 --> 00:01:20,390
With the bucket approach, you still
need to iterate through some collection,

24
00:01:20,390 --> 00:01:23,650
though a shorter one,
every time you're looking for something.

25
00:01:23,650 --> 00:01:28,000
Hash functions have a constant
lookup time in the average case, but

26
00:01:28,000 --> 00:01:32,790
because of the bucket system, you could
end up storing every value in one bucket

27
00:01:32,790 --> 00:01:36,640
and then you're still essentially
just iterating through a list.

28
00:01:36,640 --> 00:01:39,135
In that worse case,
this actually turns into O(m).

29
00:01:40,360 --> 00:01:42,900
When done well,
hashing is really fast and

30
00:01:42,900 --> 00:01:47,920
can save you a ton of time, but all of
these things are very real concerns.

31
00:01:47,920 --> 00:01:51,500
There's no one perfect way
to design a hash function.

32
00:01:51,500 --> 00:01:53,160
You need to consider
all of these things and

33
00:01:53,160 --> 00:01:57,470
build a system that makes the most sense
for your data and your limitations.

34
00:01:57,470 --> 00:02:00,840
Often, you'll have to choose between
making a hash function that spreads out

35
00:02:00,840 --> 00:02:06,230
your values nicely but uses a lot of
space and one that uses less buckets but

36
00:02:06,230 --> 00:02:08,485
might have to do some
searching within each bucket.

37
00:02:09,610 --> 00:02:13,430
Ideally, you would have one to three
elements stored in each bucket.

38
00:02:13,430 --> 00:02:15,900
So you can design a hash
function with that in mind.

39
00:02:16,930 --> 00:02:20,850
You can also do something creative
like using a second hash function

40
00:02:20,850 --> 00:02:25,700
inside of a large bucket to split
up those elements even more.

41
00:02:25,700 --> 00:02:28,310
That would work particularly well if
you know you're going to have well

42
00:02:28,310 --> 00:02:32,710
spread out data but end up having
a few really large buckets.

43
00:02:32,710 --> 00:02:37,140
Hashing questions are popular because
there's often not a perfect solution.

44
00:02:37,140 --> 00:02:40,290
You're expected to talk
about the upsides and

45
00:02:40,300 --> 00:02:43,670
the downsides of whatever
approach you choose to use.

46
00:02:43,670 --> 00:02:47,100
So, just do your best to
optimize your hash function and

47
00:02:47,100 --> 00:02:49,430
make sure you're communicating
with your interviewer well.
