1
00:00:00,260 --> 00:00:04,140
数组可能是最常见的列表实现方法

2
00:00:04,140 --> 00:00:05,710
在很多编程语言中

3
00:00:05,710 --> 00:00:09,620
能够创建数组是内置的核心功能

4
00:00:09,620 --> 00:00:11,739
你之前可能已经见过或听过数组

5
00:00:11,740 --> 00:00:15,740
但是我们必须知道数组的正式定义

6
00:00:15,740 --> 00:00:18,990
这样才能够与后续课程中介绍的其他数据结构进行对比

7
00:00:18,990 --> 00:00:22,930
正如我之前提到的 数组是具有几条附加规则的列表

8
00:00:22,930 --> 00:00:26,689
我们已经知道它具有按顺序排列的项

9
00:00:26,690 --> 00:00:30,170
在某些语言中 同一数组只能具有

10
00:00:30,170 --> 00:00:31,680
相同类型的对象

11
00:00:31,680 --> 00:00:35,310
在某些语言中 数组可以包含不同类型的对象

12
00:00:35,310 --> 00:00:37,660
所以不能依此定义数组

13
00:00:37,660 --> 00:00:40,500
我们可以说 在创建数组时

14
00:00:40,500 --> 00:00:44,600
就确定了数组大小

15
00:00:44,600 --> 00:00:47,300
但是 只有某些编程语言是这种情况

16
00:00:47,300 --> 00:00:49,610
我们在定义数组时要避免添加这一条规则

17
00:00:49,610 --> 00:00:53,110
定义不同语言称作数组的事物实际上

18
00:00:53,110 --> 00:00:54,360
很困难

19
00:00:54,360 --> 00:00:58,879
有一个重要特性可以将数组与列表区分开来

20
00:00:58,880 --> 00:01:02,180
每个数组都有一个位置概念 叫做索引

21
00:01:02,180 --> 00:01:06,580
索引是与数组中的该位置相关联的数值

22
00:01:06,580 --> 00:01:10,260
我们可以将这些方框标为 1-5

23
00:01:10,260 --> 00:01:12,840
当然不可能这么简单了

24
00:01:12,840 --> 00:01:15,230
通常 索引以 0 开始

25
00:01:15,230 --> 00:01:21,600
所以 我们通常将这些方框标为 0-4 而不是 1-5

26
00:01:21,600 --> 00:01:24,230
对于你所使用的代码 索引可以使数组用起来非常便利

27
00:01:24,230 --> 00:01:27,880
有时候又会变得很糟糕

28
00:01:27,880 --> 00:01:31,880
如果你要频繁访问中间位置的项

29
00:01:31,880 --> 00:01:33,304
使用数组会很有帮助

30
00:01:33,305 --> 00:01:37,650
只需要跟踪数组有多长就行了

31
00:01:37,650 --> 00:01:43,750
计算中间元素 并找到具有该索引的方框中的对象

32
00:01:43,750 --> 00:01:47,115
但是对数组来说 插入和删除操作会非常麻烦

33
00:01:47,115 --> 00:01:49,384
在末尾插入内容经常很简单

34
00:01:49,385 --> 00:01:53,410
但是如果数组大小是固定的 已经设好值 就很困难了

35
00:01:53,410 --> 00:01:56,460
如果要在数组中间插入元素

36
00:01:56,460 --> 00:01:57,759
则很麻烦

37
00:01:57,760 --> 00:02:01,430
如果你要进行常规插入

38
00:02:01,430 --> 00:02:06,300
则需要将被插入元素后面的内容移到具有不同索引的其他方框中

39
00:02:06,300 --> 00:02:10,320
整个操作效率很低 因为你需要

40
00:02:10,320 --> 00:02:14,950
将所插入元素后面的内容往数组的后方移动

41
00:02:14,950 --> 00:02:19,989
最坏情况下 该操作的时间会呈线性状态 也就是以 n 为参数的大 O 符号

42
00:02:19,990 --> 00:02:22,360
删除也会造成类似的问题

43
00:02:22,360 --> 00:02:25,700
如果删除了某个元素 则会产生空的方框

44
00:02:25,700 --> 00:02:29,420
你就不能对着该索引说这是第四个元素

45
00:02:29,420 --> 00:02:31,760
因为前面还有个空的方框

46
00:02:31,760 --> 00:02:36,490
所有这些都可能会因为用来实现数组的具体语言而变化

47
00:02:36,500 --> 00:02:40,710
但是 在抽象地讨论数组时 你必须要考虑到这些情况
