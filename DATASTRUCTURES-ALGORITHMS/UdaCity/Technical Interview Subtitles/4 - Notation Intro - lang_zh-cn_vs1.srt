1
00:00:00,430 --> 00:00:02,930
太棒了 我们已经学了大量关于效率的知识

2
00:00:02,930 --> 00:00:06,689
当你看到两段代码的时候 或许可以判断出

3
00:00:06,689 --> 00:00:09,400
哪个代码运行速度更快 哪个运行速度更慢

4
00:00:09,400 --> 00:00:14,200
但是我们该如何明确说出哪个更快 哪个更慢

5
00:00:14,200 --> 00:00:17,660
如何告诉同事和身边的人呢？

6
00:00:17,660 --> 00:00:22,330
我们可以用大 O 符号来表示代码效率

7
00:00:22,330 --> 00:00:25,180
如果你是第一次听到这个名字 可能觉得怪怪的

8
00:00:25,180 --> 00:00:27,320
实际上它是一个非常直观的名字

9
00:00:28,480 --> 00:00:33,170
每次你使用该符号 都会真的写个大写的 O

10
00:00:33,170 --> 00:00:36,880
然后括号 括号里面是个代数表达式

11
00:00:36,880 --> 00:00:40,770
该代数表达式始终是变量 n 的数学函数

12
00:00:40,770 --> 00:00:45,230
例如这里的几个示例

13
00:00:45,230 --> 00:00:49,830
可以看出 所有示例都包含用 n 表示的代数表达式

14
00:00:49,830 --> 00:00:52,000
唯一例外的是这个

15
00:00:53,360 --> 00:00:56,800
实际上 数字 1 也是个代数表达式

16
00:00:56,800 --> 00:01:01,549
1 可以写成为 0n + 1 所以这个值也是对的

17
00:01:02,740 --> 00:01:06,500
那么 在这种情况下 该代数表达式的含义是什么

18
00:01:06,500 --> 00:01:11,900
n 表示函数输入字符串的长度

19
00:01:11,900 --> 00:01:15,120
假设你收到朋友的一条加密消息

20
00:01:15,120 --> 00:01:18,670
朋友还告诉你每个字母代表什么的暗号

21
00:01:18,670 --> 00:01:22,270
你想要使用朋友给的暗号自动解密

22
00:01:22,270 --> 00:01:24,300
这条暗号消息

23
00:01:24,300 --> 00:01:27,640
你可以写一段伪代码 看看如何解密

24
00:01:28,840 --> 00:01:32,820
我们循环访问输入字符串

25
00:01:32,820 --> 00:01:37,280
根据暗号更改每个字母 然后输出新的消息

26
00:01:37,281 --> 00:01:42,190
伪代码会显示出该消息的实际含义

27
00:01:42,190 --> 00:01:42,830


28
00:01:42,830 --> 00:01:44,660
为了得出时间效率

29
00:01:44,660 --> 00:01:47,649
我们直接数数代码行数

30
00:01:47,650 --> 00:01:50,550
每次运行函数时 创建输出字符串和返回输出字符串

31
00:01:50,550 --> 00:01:53,619
只需发生一次

32
00:01:54,750 --> 00:01:58,890
这意味着 我们可以在大 0 符号中添加个 2

33
00:01:58,890 --> 00:02:00,920
对于输入字符串中的每个字母

34
00:02:00,920 --> 00:02:04,520
for 循环中的这两行都要运行一次

35
00:02:04,520 --> 00:02:08,948
因此我们可以添加 2n 因为 2 是输入字符串中的字母个数

36
00:02:08,949 --> 00:02:13,380
对于每个字母 有两行代码需要运行

37
00:02:13,380 --> 00:02:15,180
希望这么计算代码行数

38
00:02:15,180 --> 00:02:19,490
并得出大 O 符号 你逐渐能够弄明白

39
00:02:19,490 --> 00:02:21,910
我们来看一些示例

40
00:02:21,910 --> 00:02:26,140
如果我们的输入字符串有 10 个字母 那么算式应该是这样的

41
00:02:26,140 --> 00:02:28,519
最终结果是 22

42
00:02:28,520 --> 00:02:33,210
要获得实际的效率

43
00:02:33,210 --> 00:02:36,674
可以将每行代码的运行时间乘以 22

44
00:02:37,900 --> 00:02:42,120
如果输入字符串是 100 万个字母

45
00:02:42,120 --> 00:02:45,830
则需要用 200 万乘以计算机计算一次的时间

46
00:02:45,830 --> 00:02:47,740
就这样 看来你已经记住基本原理了
