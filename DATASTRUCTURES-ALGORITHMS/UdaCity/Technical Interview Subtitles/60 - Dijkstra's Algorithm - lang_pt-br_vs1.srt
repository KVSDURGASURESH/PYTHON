1
00:00:00,000 --> 00:00:03,000
Uma solução para achar
o caminho mais curto

2
00:00:03,033 --> 00:00:07,334
em grafos ponderados e não orientados
é o algoritmo de Dijkstra.

3
00:00:08,032 --> 00:00:12,601
Digamos que queiramos achar
o caminho mais curto daqui para cá.

4
00:00:12,634 --> 00:00:16,767
Começamos dando a todos os vértices
um valor de distância.

5
00:00:16,801 --> 00:00:19,868
Uma distância é a soma
dos pesos das arestas

6
00:00:19,901 --> 00:00:24,133
no caminho entre o ponto de partida
e o vértice em que estamos.

7
00:00:24,167 --> 00:00:25,701
No final do algoritmo,

8
00:00:25,734 --> 00:00:29,267
essa distância será a distância
do caminho mais curto.

9
00:00:29,300 --> 00:00:32,634
Começaremos
com o valor de distância infinito.

10
00:00:32,667 --> 00:00:36,868
Ele é um marcador de posição
que será atualizado ao acharmos nós

11
00:00:36,901 --> 00:00:39,634
e armazenarmos
distâncias reais.

12
00:00:39,667 --> 00:00:42,534
O nó de partida
terá distância 0.

13
00:00:42,567 --> 00:00:47,167
Uma implementação comum do Dijkstra
usa uma fila de prioridade mínima,

14
00:00:47,200 --> 00:00:49,834
em que o elemento
com prioridade mínima,

15
00:00:49,868 --> 00:00:54,367
ou distância mínima, no nosso caso,
pode ser removido com eficiência.

16
00:00:54,400 --> 00:00:57,200
Armazenaremos os nós
na fila de prioridade

17
00:00:57,234 --> 00:01:01,334
e usaremos o comando extrair-min
para remover o menor elemento,

18
00:01:01,367 --> 00:01:03,667
o único com a distância 0.

19
00:01:04,400 --> 00:01:07,801
Do nosso nó de partida,
temos várias opções.

20
00:01:07,834 --> 00:01:09,434
Iremos seguir cada aresta

21
00:01:09,467 --> 00:01:13,334
e atualizar o nó no outro lado
com um valor de distância,

22
00:01:13,367 --> 00:01:15,667
que é apenas o peso
da aresta.

23
00:01:15,701 --> 00:01:17,934
Agora temos
que fazer uma escolha.

24
00:01:17,968 --> 00:01:19,868
Qual nó devemos visitar?

25
00:01:19,901 --> 00:01:23,601
Sempre escolheremos o nó
com o menor valor de distância,

26
00:01:23,634 --> 00:01:26,934
ou seja,
executaremos o extrair-min na fila.

27
00:01:26,968 --> 00:01:30,234
Como sempre escolhemos o nó
com a menor distância,

28
00:01:30,267 --> 00:01:33,701
o Dijkstra costuma ser chamado
de algoritmo guloso.

29
00:01:33,734 --> 00:01:36,934
A filosofia
para essa classe de algoritmos

30
00:01:36,968 --> 00:01:41,567
é escolher a opção que parece melhor
no momento, daí o nome "guloso".

31
00:01:41,601 --> 00:01:46,400
Repetiremos o processo, visitando
todos os nós adjacentes na fila

32
00:01:46,434 --> 00:01:50,901
e atualizando os valores de distância,
tentando reduzi-los.

33
00:01:50,934 --> 00:01:54,501
Continuaremos extraindo o mínimo
da nossa fila

34
00:01:54,534 --> 00:01:57,000
e explorando
os elementos adjacentes,

35
00:01:57,033 --> 00:02:00,634
até que o nó que estamos procurando
tenha sido extraído

36
00:02:00,667 --> 00:02:03,067
ou o resto
tenha distância infinita,

37
00:02:03,100 --> 00:02:06,767
o que significa que o caminho
que procuramos não existe.

38
00:02:06,801 --> 00:02:11,667
O tempo de execução básico do Dijkstra
é o número de vértices ao quadrado,

39
00:02:11,701 --> 00:02:16,167
já que, no pior caso, visitamos
todos os nós uma ou duas vezes,

40
00:02:16,200 --> 00:02:20,801
e todas as vezes tivemos que buscar
na fila o elemento mínimo.

41
00:02:21,667 --> 00:02:24,234
Há várias otimizações
para o Dijkstra.

42
00:02:24,267 --> 00:02:27,667
Se a fila de prioridade
for muito bem implementada,

43
00:02:27,701 --> 00:02:30,167
o tempo de execução
ficará assim.
