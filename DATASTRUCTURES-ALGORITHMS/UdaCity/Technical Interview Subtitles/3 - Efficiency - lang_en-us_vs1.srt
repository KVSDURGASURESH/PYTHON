1
00:00:00,380 --> 00:00:04,689
Efficiency is perhaps the most important
concept I'll teach you in this course.

2
00:00:04,689 --> 00:00:07,780
So make sure you understand
it before moving on.

3
00:00:07,780 --> 00:00:10,510
Efficiency, also called complexity,

4
00:00:10,510 --> 00:00:15,309
is how well you're using your computer's
resources to get a particular job done.

5
00:00:15,310 --> 00:00:18,370
You can normally think about
it in terms of space and time.

6
00:00:19,390 --> 00:00:22,740
How long does your code take to run,
and how much storage space do you need?

7
00:00:23,830 --> 00:00:26,610
Let's think about efficiency
in terms of cutting hair.

8
00:00:27,620 --> 00:00:30,440
Normally, your hair would be
snipped off in clumps, and

9
00:00:30,440 --> 00:00:34,480
you would just compare some strands you
cut to a group you're about to cut,

10
00:00:34,480 --> 00:00:37,319
to approximate where your next cut goes.

11
00:00:37,320 --> 00:00:40,890
However, you could cut one
strand of hair at a time and

12
00:00:40,890 --> 00:00:44,450
compare each strand to a ruler or
measuring tape,

13
00:00:44,450 --> 00:00:48,800
to make sure the exact same amount
gets cut every single time.

14
00:00:49,835 --> 00:00:51,605
That's ridiculous, though.

15
00:00:51,605 --> 00:00:53,834
It would take a crazy amount of time,
and

16
00:00:53,835 --> 00:00:57,150
it really doesn't matter if
hair is exactly, precisely cut.

17
00:00:58,145 --> 00:01:02,550
If you could use less time to get the
job done pretty well, than you're good.

18
00:01:03,550 --> 00:01:06,540
Often, the tradeoffs for
algorithm efficiency are similar.

19
00:01:06,540 --> 00:01:11,160
You could take a slow,
methodical approach, but there's

20
00:01:11,160 --> 00:01:16,500
often a faster method that accomplishes
the same goal by reducing repetition.

21
00:01:16,500 --> 00:01:19,880
Efficiency can rely heavily on your
creativity and your ability to get

22
00:01:19,880 --> 00:01:24,119
the most done with minimal resources,
but there are a lot of known tips and

23
00:01:24,120 --> 00:01:27,000
tricks that you'll be expected to
know in a technical interview.

24
00:01:28,710 --> 00:01:32,839
An interviewer will expect you to
know some common data structures and

25
00:01:32,840 --> 00:01:35,700
the efficiency of doing
basic things with them,

26
00:01:35,700 --> 00:01:40,800
as well as some knowledge of
specific well known algorithms.

27
00:01:40,800 --> 00:01:44,470
In this case, an algorithm is just
a series of steps for solving a problem.

28
00:01:45,490 --> 00:01:48,360
One of my favorite moments
in my programming career

29
00:01:48,360 --> 00:01:52,220
was the first time I used
an algorithm to improve my code.

30
00:01:52,220 --> 00:01:56,750
I had a function that took hours
to run on this huge dataset.

31
00:01:56,750 --> 00:02:00,220
But after applying an algorithm,
it only took seconds.

32
00:02:00,220 --> 00:02:03,940
Writing really efficient code can come
off with another tradeoff between

33
00:02:03,940 --> 00:02:06,630
time efficiency and space efficiency.

34
00:02:06,630 --> 00:02:09,638
What if your code could run in
just a fraction of the time

35
00:02:09,639 --> 00:02:12,270
by storing temporary values
in a new data structure?

36
00:02:13,750 --> 00:02:17,100
For that decision, you would need to
weigh whether the time of the person

37
00:02:17,100 --> 00:02:20,859
using your code or the amount of
memory needed is more important.

38
00:02:22,130 --> 00:02:24,690
By the end of this course,
you'll have most of the tools and

39
00:02:24,690 --> 00:02:26,497
knowledge you need to
make efficient code.
