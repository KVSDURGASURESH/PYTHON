1
00:00:00,900 --> 00:00:05,120
Imagine a line of people all waiting to
get their hands on the best chocolate

2
00:00:05,120 --> 00:00:07,310
pancakes in existence.

3
00:00:07,310 --> 00:00:10,410
The way this works is the person
who's been in the line the longest

4
00:00:10,410 --> 00:00:12,970
gets her pancakes and gets out first.

5
00:00:12,970 --> 00:00:14,710
People can join on this end, but

6
00:00:14,710 --> 00:00:17,420
only people on this end get
their pancakes and leave.

7
00:00:18,430 --> 00:00:23,520
You could perhaps call this a first in,
first out structure or a queue.

8
00:00:23,520 --> 00:00:26,118
A queue is kind of the opposite
of a stack in this way.

9
00:00:26,118 --> 00:00:30,799
In a stack the most recently added
element comes out first, but

10
00:00:30,800 --> 00:00:33,590
here the oldest element comes out first.

11
00:00:33,590 --> 00:00:37,400
Otherwise queues are actually
pretty similar to stacks.

12
00:00:37,400 --> 00:00:38,780
The first element in a queue, or

13
00:00:38,780 --> 00:00:42,000
the oldest element in the queue,
is called the head.

14
00:00:42,000 --> 00:00:45,480
The last element in the queue, or
the newest element in the queue,

15
00:00:45,480 --> 00:00:46,199
is called the tail.

16
00:00:47,250 --> 00:00:51,650
When you add an element to the tail,
the operation is called enqueue.

17
00:00:51,650 --> 00:00:55,769
When you remove the head element,
the operation is called dequeue.

18
00:00:55,770 --> 00:00:59,490
There's also an operation called peek,
where you look at the head element but

19
00:00:59,490 --> 00:01:01,420
you don't actually remove it.

20
00:01:01,420 --> 00:01:05,180
Again, you can implement this data
structure with a linked list,

21
00:01:05,180 --> 00:01:07,910
where you also save
references to the head and

22
00:01:07,910 --> 00:01:11,380
tail so you can look them
both up in constant time.

23
00:01:11,380 --> 00:01:15,420
There are actually two special
types of queues that show up a lot.

24
00:01:15,420 --> 00:01:20,100
A dequeue or double-ended queue
is a queue that goes both ways.

25
00:01:20,100 --> 00:01:23,169
You can enqueue or
dequeue from either end.

26
00:01:23,170 --> 00:01:24,260
If you think about it,

27
00:01:24,260 --> 00:01:28,830
a deck is kind of a generalized
version of both stacks and queues.

28
00:01:28,830 --> 00:01:33,600
Since you could represent either of them
with it, you could treat it like a stack

29
00:01:33,600 --> 00:01:36,910
and add and remove elements from
the same end, or you could treat it like

30
00:01:36,910 --> 00:01:40,429
a queue and add elements on one end and
remove them from the other.

31
00:01:41,450 --> 00:01:44,400
Let's examine a priority queue now.

32
00:01:44,400 --> 00:01:46,790
In a priority queue you
assign each element

33
00:01:46,790 --> 00:01:50,260
a numerical priority when you
insert it into the queue.

34
00:01:50,260 --> 00:01:54,450
When you dequeue, you remove
the element with the highest priority.

35
00:01:54,450 --> 00:01:57,500
This doesn't really follow
the rules of a normal queue,

36
00:01:57,500 --> 00:01:59,850
where you remove
the oldest element first.

37
00:01:59,850 --> 00:02:02,640
However, if the elements
have the same priority

38
00:02:02,640 --> 00:02:05,340
the oldest element is the one
that gets dequeued first.
