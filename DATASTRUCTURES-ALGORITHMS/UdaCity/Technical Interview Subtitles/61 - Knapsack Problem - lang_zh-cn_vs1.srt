1
00:00:00,290 --> 00:00:04,120
所谓的背包问题是计算机科学中的另一个

2
00:00:04,120 --> 00:00:04,930
著名思考练习

3
00:00:06,100 --> 00:00:10,980
假设有个背包 承载重量是有限的

4
00:00:10,980 --> 00:00:13,860
我们需要尽可能多地装下物品

5
00:00:13,860 --> 00:00:17,669
每个物品都有一个重量和价值

6
00:00:17,670 --> 00:00:23,110
问题是在总重量给定的情况下

7
00:00:23,110 --> 00:00:24,830
如何提高物品的总价值？

8
00:00:24,830 --> 00:00:29,279
我们介绍下 0-1 背包问题

9
00:00:29,280 --> 00:00:33,370
这里讨论的是单一物品 必须放下或拿出整个物品

10
00:00:34,430 --> 00:00:37,460
对于其他变量 你可以拿出物品的一部分

11
00:00:38,740 --> 00:00:42,220
当我听到这个问题的时候 我的第一想法是

12
00:00:42,220 --> 00:00:45,240
首先放入价值最高的物品

13
00:00:46,240 --> 00:00:50,800
但是如果放入两个价值最高的物品就达到了重量限制

14
00:00:50,800 --> 00:00:54,780
但是把所有其他物品放进去也能满足重量限制

15
00:00:54,780 --> 00:00:56,920
而总价值更高呢？

16
00:00:56,920 --> 00:01:00,250
计算机科学中实际上很少遇到背包问题

17
00:01:00,250 --> 00:01:03,870
但是该问题描述了经常出现的优化问题

18
00:01:04,910 --> 00:01:09,440
在思考最佳解决方案前 尤其是思维卡住的生活

19
00:01:09,440 --> 00:01:13,670
可以考虑缓慢而直接的解决方案

20
00:01:13,670 --> 00:01:16,650
可以试试每个物品组合

21
00:01:16,650 --> 00:01:22,100
然后选择最佳组合 这也叫做穷举法

22
00:01:22,100 --> 00:01:26,670
该解决方案的运行时间是 O(2n)

23
00:01:26,670 --> 00:01:29,530
n 是物品的数量

24
00:01:29,530 --> 00:01:33,510
实际上有 2 到 n 个可能的组合

25
00:01:33,510 --> 00:01:36,410
背后是有一定的数学原理的

26
00:01:36,410 --> 00:01:39,899
你也可以将一种组合看做长度为 n 的字符串

27
00:01:41,110 --> 00:01:46,289
每个位置如果位于背包中 则为 1 不在背包中 则为 0

28
00:01:46,290 --> 00:01:52,200
表明它是指数时间算法 因为 n 是指数

29
00:01:52,200 --> 00:01:55,480
我们希望是多项式时间算法

30
00:01:55,480 --> 00:01:59,320
n 会乘以其他项或具有常量指数

31
00:01:59,320 --> 00:02:03,759
对于大型数字来说 运行速度将会快很多
