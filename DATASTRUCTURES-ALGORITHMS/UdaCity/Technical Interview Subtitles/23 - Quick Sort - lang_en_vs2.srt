1
00:00:00,490 --> 00:00:05,740
In many cases quicksort is one of
the most efficient sorting algorithms.

2
00:00:05,740 --> 00:00:08,830
To do a quicksort you essentially
pick one of the values in

3
00:00:08,830 --> 00:00:10,390
the array at random.

4
00:00:10,390 --> 00:00:16,129
Move all values larger than it above it
and all values below it, lower than it.

5
00:00:16,129 --> 00:00:18,230
The value that you pick
initially is called a pivot.

6
00:00:19,920 --> 00:00:24,170
You continue on recursively, picking a
pivot in the upper and lower sections of

7
00:00:24,170 --> 00:00:29,660
the array, sorting them similarly
until the whole array is sorted.

8
00:00:29,660 --> 00:00:31,100
Okay, let's watch this in action.

9
00:00:32,180 --> 00:00:34,580
First we need to select a pivot.

10
00:00:34,580 --> 00:00:37,320
The convention is to pick
the last element as your pivot.

11
00:00:37,320 --> 00:00:38,489
So let's go ahead and do that.

12
00:00:40,360 --> 00:00:43,890
Our first element is
larger than our pivot.

13
00:00:43,900 --> 00:00:45,850
So we need to move it behind the pivot.

14
00:00:45,850 --> 00:00:48,000
However, we're doing an in-place sort.

15
00:00:48,000 --> 00:00:51,240
So we need to move the element in
front of the pivot to make room.

16
00:00:52,410 --> 00:00:55,230
So in this step we're
moving 8 to the last block,

17
00:00:55,230 --> 00:00:59,870
2 to the second to last block, and
10 all the way up to the first block.

18
00:01:00,920 --> 00:01:02,566
This seems a little counterintuitive.

19
00:01:02,566 --> 00:01:07,500
You would think that we would
move 10 back and not forward.

20
00:01:07,500 --> 00:01:09,960
Just hold on for now,
we'll see exactly why this works soon.

21
00:01:11,620 --> 00:01:15,190
So we did our shift and
now we can make another comparison.

22
00:01:15,190 --> 00:01:17,107
Now we get to take a look at 10.

23
00:01:17,107 --> 00:01:21,380
Since 10 is bigger than 2 we need to,
again, move 10 back.

24
00:01:21,380 --> 00:01:24,330
Move 2 up and move whatever's
in front of 2 up as well.

25
00:01:25,330 --> 00:01:26,649
Great, one more swap down.

26
00:01:27,910 --> 00:01:30,679
Finally, we have 0 at
the front of our array,

27
00:01:30,680 --> 00:01:33,670
which is actually smaller
than our pivot of 2.

28
00:01:33,670 --> 00:01:36,510
That's pretty great, but now we
just move to the second element and

29
00:01:36,510 --> 00:01:38,760
do the same process with that one.

30
00:01:38,760 --> 00:01:42,380
Since 3 is greater than 2 we'll need
to shift around everything again.

31
00:01:43,380 --> 00:01:45,259
Awesome, this is looking so much better.

32
00:01:46,690 --> 00:01:50,270
Since 7 is still bigger than 2, we
need to do another comparison, though.

33
00:01:51,610 --> 00:01:52,900
Here's the swap we need to make.

34
00:01:54,700 --> 00:01:55,740
And this is what our
array looks like now.

35
00:01:56,840 --> 00:01:58,745
This is definitely good.

36
00:01:58,745 --> 00:02:00,110
2 is in the right place.

37
00:02:00,110 --> 00:02:03,440
We've checked all the elements before
it and we're sure they're less than it.

38
00:02:03,440 --> 00:02:06,270
And we've put all of these elements
after it that are all definitely

39
00:02:06,270 --> 00:02:07,289
bigger than it.

40
00:02:07,290 --> 00:02:10,699
Because we're sure everything
in the array below 2

41
00:02:10,699 --> 00:02:14,680
is actually less than 2 and
everything above 2 is greater than 2,

42
00:02:14,680 --> 00:02:18,500
we know that 2 is in
the exact right place.

43
00:02:18,500 --> 00:02:21,800
I'm going to color code it so we know
that we don't need to move it again.

44
00:02:21,800 --> 00:02:24,150
At this point we normally
do the same process for

45
00:02:24,150 --> 00:02:28,100
everything smaller than the pivot and
everything bigger than the pivot.

46
00:02:28,100 --> 00:02:30,690
Let's start with the smaller part first.

47
00:02:30,690 --> 00:02:33,940
We select our pivot and
compare to everything before.

48
00:02:33,940 --> 00:02:37,870
Since 0 is actually less than 1,
there's nothing we need to do.

49
00:02:37,870 --> 00:02:39,360
And with just one comparison,

50
00:02:39,360 --> 00:02:43,300
we know that both of these are in
the right place and we can move on.

51
00:02:43,300 --> 00:02:45,910
Now in the second half of the array,
we select a pivot.

52
00:02:46,950 --> 00:02:51,399
Since 7 and 3 are both smaller than
the pivot, we won't need to move them.

53
00:02:51,400 --> 00:02:53,390
However, 8 is bigger than the pivot.

54
00:02:53,390 --> 00:02:55,660
So we'll need to do a swap here.

55
00:02:55,660 --> 00:02:58,487
Now that our swap's complete
we can see that 8 and

56
00:02:58,487 --> 00:03:01,970
10 are actually in their
eventual positions.

57
00:03:01,970 --> 00:03:06,179
Everything less than 8 was already below
8 so we didn't need to move it at all.

58
00:03:06,179 --> 00:03:11,260
Okay, now we only have two elements
left that maybe need to be sorted.

59
00:03:11,260 --> 00:03:14,980
Again, all we have to do here is
assign 3 as a pivot and compare.

60
00:03:16,130 --> 00:03:18,109
We'll see that these two
need to be switched.

61
00:03:18,110 --> 00:03:21,200
Do that quickly and
then our whole array is done.
