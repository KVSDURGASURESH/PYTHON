1
00:00:00,520 --> 00:00:03,240
对于加权无向图 最短路径问题的解决方案之一

2
00:00:03,240 --> 00:00:06,689
叫做迪科斯彻算法

3
00:00:08,290 --> 00:00:12,640
假设我们要从这到这找到最短的路径

4
00:00:12,640 --> 00:00:15,760
我们首先为每个顶点分配一个距离值

5
00:00:16,790 --> 00:00:21,710
距离是指起始点和任意所在顶点之间的路径的

6
00:00:21,710 --> 00:00:22,930
边权值和

7
00:00:24,170 --> 00:00:25,750
最后

8
00:00:25,750 --> 00:00:28,360
该距离将是最短路径的距离

9
00:00:29,520 --> 00:00:32,820
开始的距离值是无穷大的

10
00:00:32,820 --> 00:00:36,980
它是一个占位符值 每当我们发现一个节点

11
00:00:36,980 --> 00:00:38,669
可以存储一个实际距离时 它就会更新

12
00:00:39,680 --> 00:00:43,180
我们的起始节点的距离将为零

13
00:00:43,180 --> 00:00:47,610
迪科斯彻算法的常见实施方法是使用最小优先级队列

14
00:00:47,610 --> 00:00:50,540
优先级最低的元素 即距离最短的元素

15
00:00:50,540 --> 00:00:53,820
会首先被删除

16
00:00:54,950 --> 00:00:58,910
我们将所有节点存储在优先级队列中 并使用 Extract Min

17
00:00:58,910 --> 00:01:03,890
来拿出最小的元素 即唯一距离为零的元素
18
00:01:04,400 --&gt; 00:01:06,750
从第一个节点开始 我们有几个选择

18
00:01:06,750 --> 00:01:11,330
我们将沿着每条边移动 然后在队列中更新

19
00:01:11,330 --> 00:01:14,935
每个节点的距离值 也就是边的权值

20
00:01:16,135 --> 00:01:17,955
现在需要做个选择

21
00:01:17,955 --> 00:01:19,195
该访问哪个节点呢？

22
00:01:20,205 --> 00:01:23,625
我们始终选择距离值最小的节点

23
00:01:23,625 --> 00:01:25,955
也就是针对队列运行 Extract Min

24
00:01:27,135 --> 00:01:30,265
因为始终选择距离最近的节点

25
00:01:30,265 --> 00:01:32,725
所以迪科斯彻算法通常叫做贪婪算法

26
00:01:33,730 --> 00:01:36,980
此类算法的原理是

27
00:01:36,980 --> 00:01:41,590
在当前状态下做出最好的抉择 因此得名贪婪算法

28
00:01:41,590 --> 00:01:45,520
重复这一流程 访问队列中剩余的所有相邻节点

29
00:01:45,520 --> 00:01:49,640
如果能降低这些节点的距离值 则做出更新

30
00:01:50,920 --> 00:01:54,700
继续操作 从队列中提取距离最小的节点

31
00:01:54,700 --> 00:01:58,820
并访问相邻的节点 直到从队列中提取出我们要找的节点

32
00:01:58,820 --> 00:02:03,160
或者所有其他节点的距离都是无穷大

33
00:02:03,160 --> 00:02:05,600
表示我们要找的路径不存在

34
00:02:06,790 --> 00:02:10,560
迪科斯彻算法的基本运行时间是节点数量的平方

35
00:02:11,700 --> 00:02:16,429
因为在最坏情况下 我们访问了图表中的节点一次或两次

36
00:02:16,430 --> 00:02:19,190
每次访问时 我们都需要查找整个队列

37
00:02:19,190 --> 00:02:19,930
找到最小元素

38
00:02:21,680 --> 00:02:25,712
迪科斯彻算法有很多种优化方法

39
00:02:25,712 --> 00:02:29,497
如果优先队列非常高效地实施了 运行时间将是这样的

40
00:02:29,497 --> 00:02:30,629
[无声音]
