1
00:00:00,270 --> 00:00:03,656
Depth first search, or DFS on graphs,

2
00:00:03,656 --> 00:00:08,176
operates under the same
principles as DFS on trees.

3
00:00:08,176 --> 00:00:10,509
Keep in mind that a graph search and

4
00:00:10,509 --> 00:00:13,655
a graph traversal
are roughly the same thing.

5
00:00:13,655 --> 00:00:17,340
In a traversal, you look at
every element, and in a search,

6
00:00:17,340 --> 00:00:21,695
you just stop traversing when you
find the element you are looking for.

7
00:00:21,696 --> 00:00:24,355
Unlike a tree,
there's no root in a graph, so

8
00:00:24,355 --> 00:00:27,410
there's no obvious place to start.

9
00:00:27,410 --> 00:00:29,460
You can begin with any node.

10
00:00:29,460 --> 00:00:32,970
First mark the node
you selected as seen.

11
00:00:32,970 --> 00:00:36,600
A common implementation
of DFS uses a stack.

12
00:00:36,600 --> 00:00:38,800
So we can store the node
we just saw on the stack.

13
00:00:39,990 --> 00:00:43,255
Next, you pick an edge, follow it and

14
00:00:43,255 --> 00:00:47,347
mark that node as seen,
and add it to the stack.

15
00:00:47,347 --> 00:00:50,620
As long as there are more edges and
more unseen nodes,

16
00:00:50,620 --> 00:00:52,669
you keep repeating those steps.

17
00:00:53,720 --> 00:00:56,629
When you do hit a node
that you've seen before,

18
00:00:56,630 --> 00:00:59,450
just go back to the previous node and
try another edge.

19
00:01:00,710 --> 00:01:05,300
If you run out of edges with new nodes,
you pop the current node from the stack

20
00:01:05,300 --> 00:01:10,600
and go back to the one before it,
which is just the next one on the stack.

21
00:01:10,600 --> 00:01:14,800
You continue this approach until you've
popped everything off the stack or

22
00:01:14,800 --> 00:01:16,200
you find the node you were
originally looking for.

23
00:01:17,280 --> 00:01:21,760
There's another common implementation of
DFS that uses recursion and no stack.

24
00:01:22,820 --> 00:01:27,500
As you can imagine, you just repeat
the same process of picking an edge and

25
00:01:27,500 --> 00:01:30,429
marking a node as seen until you
run out of new nodes to explore.

26
00:01:31,540 --> 00:01:36,900
That becomes the base case, and you move
back to the last level of recursion,

27
00:01:36,900 --> 00:01:38,670
which happens to be the previous
node in the search.

28
00:01:39,760 --> 00:01:44,210
In this algorithm, we're explicitly
visiting every edge and vertex once.

29
00:01:45,440 --> 00:01:48,560
Thus, the runtime is
often written as this,

30
00:01:48,560 --> 00:01:52,600
which reads the number of edges
plus the number of vertices.

31
00:01:53,800 --> 00:01:58,520
You might notice that we actually visit
every edge twice, once to explore it and

32
00:01:58,520 --> 00:01:59,869
once traveling back through it.

33
00:02:00,930 --> 00:02:03,930
The runtime is technically two E, but

34
00:02:03,930 --> 00:02:06,850
the approximated version
remains the same.

35
00:02:06,850 --> 00:02:11,368
The number of edges by itself actually
summarizes the runtime pretty well, but

36
00:02:11,368 --> 00:02:16,130
the V is added to account for
the time taken to look up a vertex.

37
00:02:16,130 --> 00:02:19,832
That exact time varies depending on
your choice of data structure, so

38
00:02:19,832 --> 00:02:22,853
be careful to base it on your
implementation when asked.

39
00:02:22,854 --> 00:02:23,779
[BLANK_AUDIO]
