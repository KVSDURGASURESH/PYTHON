1
00:00:00,360 --> 00:00:03,400
我需要强调下 这些只是基本内容

2
00:00:03,400 --> 00:00:06,859
我们现在要介绍各种复杂的情况

3
00:00:06,860 --> 00:00:10,879
首先 在之前的示例中 我们考虑的是 for 循环

4
00:00:10,880 --> 00:00:13,820
要不要把 for 循环本身也考虑在内呢

5
00:00:13,820 --> 00:00:16,100
为了使循环能正常运行

6
00:00:16,100 --> 00:00:20,000
每次都要进行计算 获得字符串中的下个字母

7
00:00:21,140 --> 00:00:26,250
由于每个输入字母都要计算一次

8
00:00:26,250 --> 00:00:31,720
因此 我们在 n 前加个 1 结果是 3n + 2

9
00:00:31,720 --> 00:00:35,700
实际上 很难预测该伪代码要

10
00:00:35,700 --> 00:00:38,770
计算多少次

11
00:00:38,770 --> 00:00:41,940
例如 较低级别的语言 例如 C 语言

12
00:00:41,940 --> 00:00:45,949
会将流程分成好多部分 需要很多行代码

13
00:00:45,950 --> 00:00:48,660
但是后台操作会更少

14
00:00:48,660 --> 00:00:53,169
Python 版代码可能就这么几行内容

15
00:00:53,170 --> 00:00:56,710
但是后台处理会很多 因为它是更高级的语言

16
00:00:56,710 --> 00:00:57,960


17
00:00:57,960 --> 00:01:00,815
例如 我们来看看这行代码

18
00:01:00,815 --> 00:01:03,515
这行代码可能需要不同的计算次数

19
00:01:03,515 --> 00:01:06,605
取决于暗号用到的数据结构

20
00:01:07,875 --> 00:01:09,855
如果我们将数据存储在列表中

21
00:01:09,855 --> 00:01:13,612
则需要对照当前的字母检查每个字母 来解决代码

22
00:01:14,662 --> 00:01:18,992
这样输入字符串中的每个字母都需要检查 26 次

23
00:01:20,202 --> 00:01:26,202
最终我们的效率算式可能是这样的

24
00:01:26,202 --> 00:01:30,262
我们再来看看我们之前提到的示例输入字符串

25
00:01:30,262 --> 00:01:33,232
如果输入字符串是 10 个字母

26
00:01:33,232 --> 00:01:37,230
则需要计算 292 次

27
00:01:37,230 --> 00:01:40,210
如果输入字符串是 100 万个字母

28
00:01:40,210 --> 00:01:44,500
则需要循环访问 2900 万次

29
00:01:44,500 --> 00:01:47,450
由于我们选择的数据结构是列表

30
00:01:47,450 --> 00:01:51,840
所以计算次数会比选择更加智能的数据结构需要的次数要多

31
00:01:51,840 --> 00:01:54,880
稍后 我会进一步介绍不同类型的

32
00:01:54,880 --> 00:01:56,690
数据结构的效率

33
00:01:56,690 --> 00:02:00,420
但是现在希望你能在写代码前

34
00:02:00,420 --> 00:02:01,300
意识到效率的重要性
