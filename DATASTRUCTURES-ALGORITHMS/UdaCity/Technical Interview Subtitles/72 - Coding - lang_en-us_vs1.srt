1
00:00:01,500 --> 00:00:04,370
So I'm going to call my main
function Island Counter and

2
00:00:04,370 --> 00:00:06,800
I'm taking in the matrix here.

3
00:00:06,800 --> 00:00:11,280
Now what I first want to account for
is the none.

4
00:00:11,280 --> 00:00:18,262
So if my matrix is equal to none or

5
00:00:18,262 --> 00:00:25,513
if it is equal to the anti matrix.

6
00:00:25,513 --> 00:00:33,957
[BLANK_AUDIO]

7
00:00:33,957 --> 00:00:36,535
In this case I just want to
return zero right way.

8
00:00:36,535 --> 00:00:40,708
[BLANK_AUDIO]

9
00:00:40,708 --> 00:00:45,385
Now if this is not the case,
I'm just going to initialize my

10
00:00:45,386 --> 00:00:50,700
islands variable to 0,
which is the number of islands.

11
00:00:50,700 --> 00:00:54,200
And I'm going to want to do two for
loops to loop through this.

12
00:00:54,200 --> 00:00:58,962
So I want to know the number of rows and
columns.

13
00:00:58,962 --> 00:01:08,962
[BLANK_AUDIO]

14
00:01:16,685 --> 00:01:18,130
So this is actually going
to be vice versa here.

15
00:01:20,490 --> 00:01:22,494
Okay, so I'm going to write my for loop.

16
00:01:22,495 --> 00:01:32,495
[BLANK_AUDIO]

17
00:01:47,767 --> 00:01:53,650
Now when I get here, I want to check
if the element is equal to one.

18
00:01:53,650 --> 00:02:03,650
[BLANK_AUDIO]

19
00:02:05,586 --> 00:02:10,148
And if it is,
I'm going to increment my islands count.

20
00:02:10,148 --> 00:02:16,457
[BLANK_AUDIO]

21
00:02:16,457 --> 00:02:18,520
So now what I need to do here,

22
00:02:18,520 --> 00:02:21,790
is I need to do the breadth first
search I was talking about before.

23
00:02:21,790 --> 00:02:24,403
So I'm just going to have
a helper method to do that.

24
00:02:24,403 --> 00:02:32,891
[BLANK_AUDIO]

25
00:02:32,891 --> 00:02:34,284
Call it find points of island.

26
00:02:34,284 --> 00:02:44,284
[BLANK_AUDIO]

27
00:02:45,453 --> 00:02:47,420
So I'm going to go ahead and
define that down here.

28
00:02:47,420 --> 00:02:47,920
OK.

29
00:02:47,920 --> 00:02:57,920
[BLANK_AUDIO]

30
00:03:09,169 --> 00:03:12,211
So the first thing I want to do
is I want to initialize a queue.

31
00:03:12,211 --> 00:03:16,685
[BLANK_AUDIO]

32
00:03:16,685 --> 00:03:19,330
&gt;&gt; Why did you choose a queue?

33
00:03:19,330 --> 00:03:21,700
&gt;&gt; Since we're using
a breadth first search here,

34
00:03:21,700 --> 00:03:27,570
I want to be able to use a queue so that
I can get the first element in the-.

35
00:03:27,570 --> 00:03:29,620
When I add an element to the queue,

36
00:03:29,620 --> 00:03:32,690
I want to be able to get
the first element that I added.

37
00:03:32,690 --> 00:03:36,400
&gt;&gt; Yeah, that makes perfect sense.

38
00:03:36,400 --> 00:03:38,429
&gt;&gt; And I actually need to
import this method here and

39
00:03:38,430 --> 00:03:40,478
this is from the collections framework.

40
00:03:40,478 --> 00:03:42,914
[BLANK_AUDIO]

41
00:03:42,914 --> 00:03:43,712
&gt;&gt; That's a good catch.

42
00:03:43,712 --> 00:03:53,712
[BLANK_AUDIO]

43
00:03:55,818 --> 00:03:58,657
&gt;&gt; And then the first thing I'm
going to do is I'm going to

44
00:03:58,657 --> 00:04:01,245
append my Indexes here so
I know the locations.

45
00:04:01,245 --> 00:04:06,711
So I'm going to pin these to my queue.

46
00:04:06,711 --> 00:04:16,711
[BLANK_AUDIO]

47
00:04:18,390 --> 00:04:21,820
And now I'm just doing
a breadth first search here, so

48
00:04:21,820 --> 00:04:26,683
while it's empty, we're going to keep
searching for other things around.

49
00:04:26,683 --> 00:04:29,724
[BLANK_AUDIO]

50
00:04:29,725 --> 00:04:31,490
So while the length of the queue

51
00:04:31,490 --> 00:04:36,658
[BLANK_AUDIO]

52
00:04:36,658 --> 00:04:38,629
Does not equal 0.

53
00:04:38,629 --> 00:04:45,160
[BLANK_AUDIO]

54
00:04:45,160 --> 00:04:50,520
So what I want to do here is I want to
look at the elements around it.

55
00:04:50,520 --> 00:04:56,490
So you mentioned before that I needed
to check if they were actually there.

56
00:04:56,490 --> 00:04:58,438
So I'm going to write a helper
method to do that, too.

57
00:04:58,438 --> 00:05:01,816
[BLANK_AUDIO]

58
00:05:01,816 --> 00:05:05,270
Okay, so
now that I'm checking if this is empty,

59
00:05:05,280 --> 00:05:08,180
I want to do something
with this element here.

60
00:05:08,180 --> 00:05:09,930
But it looks like I'm
running out of space, so

61
00:05:09,930 --> 00:05:12,800
I'm just going to draw
a little arrow over here.

62
00:05:13,850 --> 00:05:17,970
And just cut this little section
off here that I'm going to be using

63
00:05:17,970 --> 00:05:19,229
to finish this method here.

64
00:05:20,700 --> 00:05:24,750
So what I want to do is
I want to be able to

65
00:05:24,750 --> 00:05:29,400
get this element here from-, let me
make sure to go up a little bit higher.

66
00:05:32,600 --> 00:05:34,136
So I want to pop this
element off the cue.

67
00:05:34,136 --> 00:05:39,749
And then I want to be able to
access these two variables,

68
00:05:39,749 --> 00:05:44,280
so I'm just going to
set them to a new one.

69
00:05:44,280 --> 00:05:54,360
[BLANK_AUDIO]

70
00:05:54,360 --> 00:05:56,489
Okay.
So now that I'm here,

71
00:05:56,489 --> 00:06:00,410
I want to check if this
element is equal to one.

72
00:06:00,410 --> 00:06:10,960
[BLANK_AUDIO]

73
00:06:10,960 --> 00:06:13,416
And if it is, I want to set it
to two as I mentioned before.

74
00:06:13,416 --> 00:06:21,420
[BLANK_AUDIO]

75
00:06:21,420 --> 00:06:26,630
So I'm going to use a helper method
right here to check if these

76
00:06:26,630 --> 00:06:29,920
elements that are next to it,
actually next to it.

77
00:06:29,920 --> 00:06:34,220
And then if they are,
I'm going to add it to the queue.

78
00:06:34,220 --> 00:06:36,599
So, I'm going to call that-

79
00:06:36,599 --> 00:06:38,851
[BLANK_AUDIO]

80
00:06:38,851 --> 00:06:40,900
Set up more space here.

81
00:06:40,900 --> 00:06:44,680
So this method is
going to be called append

82
00:06:44,680 --> 00:06:48,507
[BLANK_AUDIO]

83
00:06:48,507 --> 00:06:49,700
If.

84
00:06:50,630 --> 00:06:53,320
And I'm passing in the queue.

85
00:06:53,320 --> 00:06:54,441
And I also need

86
00:06:54,441 --> 00:06:57,568
[BLANK_AUDIO]

87
00:06:57,568 --> 00:07:01,159
The row, column, and

88
00:07:01,160 --> 00:07:06,463
both of these coordinates here.

89
00:07:06,463 --> 00:07:07,820
Okay.

90
00:07:07,820 --> 00:07:13,356
So what I want to check
here is if the x value

91
00:07:13,356 --> 00:07:18,431
is greater than or equal to 0, or-.

92
00:07:18,431 --> 00:07:20,320
I mean not or.

93
00:07:20,320 --> 00:07:20,971
And.

94
00:07:20,971 --> 00:07:23,934
[BLANK_AUDIO]

95
00:07:23,934 --> 00:07:30,686
It is less than the number of columns,

96
00:07:30,686 --> 00:07:37,438
and if y is greater than or equal to 0,

97
00:07:37,438 --> 00:07:44,406
and if y is less than
the number of rows.

98
00:07:44,406 --> 00:07:48,735
And then if all those
conditions hold true,

99
00:07:48,735 --> 00:07:54,300
what I'm going to want to do
is append this to the queue.

100
00:07:54,300 --> 00:07:58,168
[BLANK_AUDIO]

101
00:07:58,168 --> 00:08:01,221
there, and so I'm going to want
to append this right here.

102
00:08:01,221 --> 00:08:06,988
And just to make sure I'm
appending it the right way so

103
00:08:06,988 --> 00:08:12,500
I access the first element,
I want it right here.

104
00:08:12,500 --> 00:08:14,280
So my helper method's going to work.

105
00:08:14,280 --> 00:08:16,900
So after I do all of that there,
method here.

106
00:08:16,900 --> 00:08:18,969
I'm running out of space right here.

107
00:08:18,970 --> 00:08:22,531
So all this information here is just
basically I'm calling this method on all

108
00:08:22,531 --> 00:08:23,698
the elements around it.

109
00:08:23,698 --> 00:08:27,897
So I'm going to append

110
00:08:27,898 --> 00:08:31,241
[BLANK_AUDIO]

111
00:08:31,241 --> 00:08:32,681
If.

112
00:08:32,681 --> 00:08:33,885
And so
what I need to do is pass the queue.

113
00:08:33,885 --> 00:08:39,860
Rows, columns, and
what I'm going to do is x plus 1 and y.

114
00:08:42,308 --> 00:08:45,170
So it's going to be the elements
to the right of it.

115
00:08:45,180 --> 00:08:48,682
[BLANK_AUDIO]

116
00:08:48,682 --> 00:08:52,629
And then this is going to
be the element below it.

117
00:08:52,629 --> 00:09:01,793
[BLANK_AUDIO]

118
00:09:01,793 --> 00:09:03,100
So left.

119
00:09:03,100 --> 00:09:13,100
[BLANK_AUDIO]

120
00:09:19,790 --> 00:09:21,276
And on top.

121
00:09:21,276 --> 00:09:22,780
That looks like it.

122
00:09:24,940 --> 00:09:27,110
Well, that went pretty smoothly.

123
00:09:27,110 --> 00:09:28,510
&gt;&gt; Yes it did.

124
00:09:28,510 --> 00:09:32,260
After going through all the necessary
steps before coding the solution,

125
00:09:32,260 --> 00:09:36,800
the actual coding is a lot easier than
if he were to have just jumped in and

126
00:09:36,800 --> 00:09:37,770
coded from the beginning.

127
00:09:37,770 --> 00:09:40,699
&gt;&gt; The interviewee also made sure
to let the interviewer know what

128
00:09:40,700 --> 00:09:42,560
he was doing when he was coding.

129
00:09:42,560 --> 00:09:45,810
But he didn't read out all of
his code as he was coding.

130
00:09:45,810 --> 00:09:49,550
We often see interviewees just reading
out their code as they code which can

131
00:09:49,550 --> 00:09:52,859
get annoying and does not really build
understanding with the interviewer.

132
00:09:54,180 --> 00:09:54,900
&gt;&gt; Yep.

133
00:09:54,900 --> 00:09:58,420
This interview, we focused more on
explaining the purpose of the code

134
00:09:58,420 --> 00:10:00,000
while he was writing.

135
00:10:00,000 --> 00:10:03,630
By talking out loud, you give your
interviewer the chance to jump in and

136
00:10:03,630 --> 00:10:05,620
help if your logic is wrong.

137
00:10:05,620 --> 00:10:08,400
You also proved to your
interviewer that you're actually

138
00:10:08,400 --> 00:10:10,520
thinking through all of your code.

139
00:10:10,520 --> 00:10:13,490
If you just write code you might be
spitting out a memorized answer.
