1
00:00:00,210 --> 00:00:03,430
但是 实际上这个看似完美的流程有个缺点

2
00:00:03,430 --> 00:00:07,330
有时候对于不同的两个输入值 哈希函数会返回

3
00:00:07,330 --> 00:00:08,870
相同的哈希值

4
00:00:08,870 --> 00:00:10,860
这种情况称为冲突

5
00:00:11,880 --> 00:00:14,900
我们可以通过两种主要方式来避免冲突

6
00:00:15,200 --> 00:00:18,700
第一种是更改哈希函数中的值

7
00:00:18,700 --> 00:00:21,310
或者完全更改哈希函数

8
00:00:21,310 --> 00:00:24,679
这样就有足够的槽位来存储所有潜在的值

9
00:00:25,970 --> 00:00:28,790
也可以保留原来的哈希函数

10
00:00:28,790 --> 00:00:31,400
但是更改数组结构

11
00:00:31,400 --> 00:00:33,790
我们不在每个槽位存储一个哈希值

12
00:00:33,790 --> 00:00:38,570
而是在该槽位存储某种列表 列表中包含所有哈希值

13
00:00:38,570 --> 00:00:42,410
在这种情况下 这种列表通常称为哈希桶

14
00:00:42,410 --> 00:00:47,440
你可以在每个桶里存储多个值或集合

15
00:00:47,440 --> 00:00:49,989
而不是存储一个值

16
00:00:49,990 --> 00:00:52,420
但是这两种方法实际上有用吗？

17
00:00:53,420 --> 00:00:56,760
对于第一种方法 你可以保持常量时间查找

18
00:00:56,760 --> 00:00:59,660
但是在哈希函数中使用更大的值

19
00:00:59,660 --> 00:01:03,550
会需要更多空间来存储值

20
00:01:03,550 --> 00:01:07,539
此外 如果你相应地更改哈希函数中的值

21
00:01:07,540 --> 00:01:12,400
每次遇到冲突 就需要将所有数据移到新的数组中

22
00:01:12,400 --> 00:01:16,850
这样肯定会增加空间和时间复杂度

23
00:01:16,850 --> 00:01:20,390
对于哈希桶方法 你依然需要循环访问某种集合

24
00:01:20,390 --> 00:01:23,650
虽然每次查找时集合更短

25
00:01:23,650 --> 00:01:28,000
平均情况下 哈希函数的查找时间是常量

26
00:01:28,000 --> 00:01:32,790
但是因为哈希桶的原因 最终你可能会将所有值都存储在一个桶内

27
00:01:32,790 --> 00:01:36,640
然后本质上依然需要循环访问一个列表

28
00:01:36,640 --> 00:01:39,135
在最坏情况下 实际上变成了 O(m)

29
00:01:40,360 --> 00:01:42,900
如果设计的好 哈希函数会非常快

30
00:01:42,900 --> 00:01:47,920
能够节省大量时间 但是我们依然需要考虑前面提到的这些问题

31
00:01:47,920 --> 00:01:51,500
没有一种设计哈希函数的完美方式

32
00:01:51,500 --> 00:01:53,160
你需要考虑所有这些事项

33
00:01:53,160 --> 00:01:57,470
然后为你的数据和限制条件设计一个最合理的体系

34
00:01:57,470 --> 00:02:00,840
经常 你需要在完美分散值但是占用很多空间的哈希函数

35
00:02:00,840 --> 00:02:06,230
和使用更少的桶但是需要在每个桶里

36
00:02:06,230 --> 00:02:08,485
进行查找的哈希函数之间做出抉择

37
00:02:09,610 --> 00:02:13,430
理想情况下 你应该在每个桶里存储 1 到 3 个元素

38
00:02:13,430 --> 00:02:15,900
所以 设计哈希函数的时候 可以考虑这一点

39
00:02:16,930 --> 00:02:20,850
你还可以来个创新 例如在一个大的桶里使用

40
00:02:20,850 --> 00:02:25,700
第二个哈希函数进一步拆分这些元素

41
00:02:25,700 --> 00:02:28,310
如果你知道你的数据会完美分散 但是会出现几个非常大的桶

42
00:02:28,310 --> 00:02:32,710
那么 采用这种方法会非常有用

43
00:02:32,710 --> 00:02:37,140
哈希问题非常常见 因为没有一个完美的解决方案

44
00:02:37,140 --> 00:02:40,290
你需要讨论你所选择的方案

45
00:02:40,300 --> 00:02:43,670
存在的利和弊

46
00:02:43,670 --> 00:02:47,100
所以 尽量优化你的哈希函数

47
00:02:47,100 --> 00:02:49,430
并确保能很好地与面试官沟通
