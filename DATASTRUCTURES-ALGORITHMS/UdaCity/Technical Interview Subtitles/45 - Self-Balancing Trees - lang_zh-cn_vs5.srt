1
00:00:00,210 --> 00:00:04,970
平衡树是指节点仅分散在几个层级

2
00:00:04,970 --> 00:00:09,290
而非平衡树是指节点分散在了多个层级上

3
00:00:09,290 --> 00:00:13,450
非平衡树的极端情况是树实际上是个链表

4
00:00:13,450 --> 00:00:16,189
每个节点只有一个子节点

5
00:00:16,190 --> 00:00:19,250
按照这一定义

6
00:00:19,250 --> 00:00:23,200
自平衡树是指尽量减少层级的树

7
00:00:23,200 --> 00:00:27,900
在插入和删除时 它会通过某些算法保持自己的平衡性

8
00:00:27,900 --> 00:00:31,270
节点本身可能还具有一些特性

9
00:00:31,270 --> 00:00:34,200
最常见的示例是红黑树

10
00:00:34,200 --> 00:00:37,100
它是二叉查找树的一种延伸

11
00:00:37,100 --> 00:00:39,650
和计算机科学中的很多其他名称一样

12
00:00:39,650 --> 00:00:42,290
这个名称也非常直白

13
00:00:42,290 --> 00:00:46,570
在此类树中 节点被额外赋予了颜色属性

14
00:00:46,570 --> 00:00:49,540
值必须为红色或黑色

15
00:00:49,540 --> 00:00:53,750
用红色或黑色只是一种惯例

16
00:00:53,750 --> 00:00:57,100
只是用来区分不同类型的

17
00:00:57,100 --> 00:00:58,330
节点

18
00:00:58,330 --> 00:01:03,420
红黑树的另一个特性是存在空叶子节点

19
00:01:03,420 --> 00:01:06,800
每个节点如果没有两个叶子

20
00:01:06,800 --> 00:01:08,600
则必须没有子节点

21
00:01:08,600 --> 00:01:12,830
可以看出 所有空叶子节点必须标为黑色

22
00:01:12,830 --> 00:01:16,140
如果节点为红色 则它的两个子节点必须为黑色

23
00:01:17,230 --> 00:01:22,000
还有另一个可选规则 即根节点必须为黑色

24
00:01:22,000 --> 00:01:27,170
最后一条规则使得这种树非常有用

25
00:01:27,170 --> 00:01:33,110
从相关节点到其后代空节点的每个路径必须包含相同数量的黑节点

26
00:01:33,110 --> 00:01:36,860
当我们讨论插入操作时 将通过示例来了解这些规则

27
00:01:36,860 --> 00:01:39,110
现在只需知道这些规则

28
00:01:39,110 --> 00:01:43,280
尤其是最后一条 可以保障树绝对不会失去平衡
