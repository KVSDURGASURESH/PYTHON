1
00:00:00,430 --> 00:00:04,710
Recursion is maybe one of the most
confusing subjects in computer science.

2
00:00:04,710 --> 00:00:08,230
If you get stuck at any point,
keep studying the examples and

3
00:00:08,230 --> 00:00:10,930
try to find some more examples
until it sticks for you.

4
00:00:12,540 --> 00:00:15,629
The idea here is to create
a function that calls itself.

5
00:00:17,180 --> 00:00:20,900
Here is a really basic
example in pseudo code.

6
00:00:21,740 --> 00:00:24,380
This code doesn't do
anything interesting, but

7
00:00:24,380 --> 00:00:26,790
it shows the main parts
of a recursive function.

8
00:00:28,320 --> 00:00:31,700
First of all, a recursive function
needs to call itself at some point.

9
00:00:33,140 --> 00:00:36,600
Second, a recursive
function needs a base case.

10
00:00:36,600 --> 00:00:40,100
You can think of a recursive function
kind of like a while loop in

11
00:00:40,100 --> 00:00:40,880
some regards.

12
00:00:42,800 --> 00:00:44,530
You keep going through some
code again and again and

13
00:00:44,530 --> 00:00:46,630
again until you hit some exit condition.

14
00:00:48,460 --> 00:00:51,960
In a recursive function, the base
case is like the exit condition.

15
00:00:51,960 --> 00:00:53,410
It lets you know when you need to stop.

16
00:00:54,800 --> 00:00:56,879
Without a nice base case like this,

17
00:00:56,880 --> 00:01:00,430
you could get stuck in something
called infinite recursion.

18
00:01:00,430 --> 00:01:04,700
That means your code keeps calling
itself and executing again, and again,

19
00:01:04,700 --> 00:01:07,180
and again, and again, and again.

20
00:01:07,180 --> 00:01:11,160
But because you never tell it when to
stop, it just keeps going infinitely.

21
00:01:12,720 --> 00:01:15,250
The third thing a recursive
function needs to do

22
00:01:15,250 --> 00:01:17,619
is alter the input
parameter at some point.

23
00:01:18,740 --> 00:01:20,839
If you aren't altering
the input parameter or

24
00:01:20,840 --> 00:01:22,770
giving yourself some condition for

25
00:01:22,770 --> 00:01:26,119
changing every time you iterate,
you'll never really know when to stop.

26
00:01:27,325 --> 00:01:30,580
And again, you end up in the same
bad place with infinite recursion.

27
00:01:32,585 --> 00:01:34,934
Okay, now we're going to
go through an example.

28
00:01:34,935 --> 00:01:36,805
This is the code that
we're starting with, and

29
00:01:36,805 --> 00:01:40,133
on this side, I'll write out
each major line that we execute.

30
00:01:40,133 --> 00:01:46,765
So we're going to start by calling
the function with an input value of 2.

31
00:01:46,765 --> 00:01:49,615
We'll start with this if clause.

32
00:01:49,615 --> 00:01:51,765
Since our input value is 2, and

33
00:01:51,765 --> 00:01:54,505
that's greater than 0,
we move on to the else part.

34
00:01:55,550 --> 00:01:59,550
We start by evaluating this before we
assign anything to the variable output.

35
00:02:01,100 --> 00:02:05,260
Okay, so input- 1, that's just 2- 1.

36
00:02:05,260 --> 00:02:07,550
So we're going to call
this function again, but

37
00:02:07,550 --> 00:02:10,222
instead with an input value of 1 and
not 2.

38
00:02:11,980 --> 00:02:13,570
So this is the really confusing part.

39
00:02:14,720 --> 00:02:17,970
Your computer knows that you still
haven't finished that initial call

40
00:02:17,970 --> 00:02:19,240
with the input value of 2.

41
00:02:19,240 --> 00:02:22,330
You're just jumping into
this part without finishing.

42
00:02:23,390 --> 00:02:26,290
In its temporary memory,
it will remember that.

43
00:02:26,300 --> 00:02:30,300
However, it essentially makes a copy
of all of this initial code, and

44
00:02:30,300 --> 00:02:33,250
you have to do it again, but
this time with an input value of 1.

45
00:02:34,160 --> 00:02:37,750
I put an indent here to signal that we
haven't actually finished this initial

46
00:02:37,750 --> 00:02:40,770
call yet, but we're just doing
a call inside of that right now.

47
00:02:42,115 --> 00:02:44,110
Okay, so let's do this again.

48
00:02:44,110 --> 00:02:48,600
This time, the input value is 1,
but that's still greater than 0, so

49
00:02:48,600 --> 00:02:50,230
we can skip down to the else block.

50
00:02:51,930 --> 00:02:54,210
The same thing happens a second time.

51
00:02:54,210 --> 00:02:57,810
Before we assign anything to output,
we have to do this recursive statement.

52
00:02:59,510 --> 00:03:03,945
This time, the input value's 1,
so 1- 1 is 0.

53
00:03:03,945 --> 00:03:07,839
And we have to call this recursive
block again, but with a value of 0,

54
00:03:07,839 --> 00:03:08,965
instead of 1 or 2.

55
00:03:10,695 --> 00:03:14,345
Again, I indented to indicate that we
still haven't forgotten about the fact

56
00:03:14,345 --> 00:03:18,645
that we never solved this and returned
anything, but we do need to move on and

57
00:03:18,645 --> 00:03:19,835
start executing again.

58
00:03:21,255 --> 00:03:22,995
All right, let's do this again.

59
00:03:22,995 --> 00:03:25,920
So this time, we actually have
something interesting here.

60
00:03:25,920 --> 00:03:30,720
The input value is 0, so we never get
to execute any of this else block.

61
00:03:30,720 --> 00:03:32,640
We're just staying up here.

62
00:03:32,640 --> 00:03:37,790
We return 0, so
we see it pop up over here.

63
00:03:38,870 --> 00:03:41,820
Now that we've actually returned
something from one of our calls,

64
00:03:41,820 --> 00:03:46,340
we can forget about this recursive
with an input of 0 and go back to that

65
00:03:46,340 --> 00:03:49,100
recursive with an input of 1 that
we were looking at a minute ago.

66
00:03:50,320 --> 00:03:53,436
All right, so
we return to having an input of 1.

67
00:03:53,436 --> 00:03:57,330
We evaluated this statement to 0,
as I indicated over here.

68
00:03:58,630 --> 00:04:03,280
Again, remember, we called
the recursive block, we return 0.

69
00:04:03,280 --> 00:04:07,443
So now we say that this whole
thing evaluates to 0, and

70
00:04:07,443 --> 00:04:10,460
we can assign 0 to output, great.

71
00:04:10,460 --> 00:04:14,582
Now that call we did where
the input was 1 actually

72
00:04:14,582 --> 00:04:17,740
has a return value here, which is 0.

73
00:04:17,740 --> 00:04:21,225
So now we can kind of forget
about this recursive block and

74
00:04:21,225 --> 00:04:25,690
move back to that original call,
where our input was 2.

75
00:04:25,690 --> 00:04:29,460
Okay, so back to the original call,
this call,

76
00:04:29,460 --> 00:04:35,219
which used to be recursive with
an input of 1, got evaluated to 0.

77
00:04:35,220 --> 00:04:38,850
So now we can say 0 is equal to output.

78
00:04:40,230 --> 00:04:44,770
And again, we can return 0, and
now even our initial call is done.

79
00:04:46,180 --> 00:04:48,135
Great, so the initial call returns 0.

80
00:04:49,260 --> 00:04:52,620
Recursion can be really confusing,
because you start out with just this one

81
00:04:52,620 --> 00:04:55,710
method, but you don't even know how
many times you'll end up calling it.

82
00:04:57,000 --> 00:05:00,300
When I'm trying to think through
how a recursive function works,

83
00:05:00,300 --> 00:05:04,109
I'll often write out a table or
a list of steps like this, so

84
00:05:04,110 --> 00:05:07,970
I can keep track of my values every
time I hit the recursive block again.

85
00:05:09,620 --> 00:05:13,880
I always used to think of it like my
computer was just going on tangents.

86
00:05:13,880 --> 00:05:17,710
I started with this initial function,
and then I kept calling something else,

87
00:05:17,710 --> 00:05:19,570
and doing something else, and
doing something else, and

88
00:05:19,570 --> 00:05:20,680
doing something else.

89
00:05:20,680 --> 00:05:23,950
And eventually, I would get back to the
thing I was talking about originally.

90
00:05:25,900 --> 00:05:28,799
Remember, your code is going to go
through these lines of code in order.

91
00:05:28,800 --> 00:05:31,830
It's never going to assign
this output any number

92
00:05:31,830 --> 00:05:34,729
until you've hit the recursive
block as many times as you need.

93
00:05:36,700 --> 00:05:39,770
Remember to be really careful when
you're writing recursive code.

94
00:05:39,770 --> 00:05:41,560
If your base case doesn't make sense,

95
00:05:41,560 --> 00:05:43,490
you could end up doing
infinite recursion.

96
00:05:44,800 --> 00:05:47,110
Let's say we change this
base case just a little bit.

97
00:05:48,480 --> 00:05:51,250
All I did was get rid of
the less than or equal to and

98
00:05:51,250 --> 00:05:52,910
replaced it with just equal to.

99
00:05:54,200 --> 00:05:58,560
Now this code is going to run fine
if we give it an input value of 2 or

100
00:05:58,560 --> 00:06:01,500
1 or 4 or even 1 million.

101
00:06:01,500 --> 00:06:04,680
But if the input value
was actually less than 0,

102
00:06:04,680 --> 00:06:06,190
this code's never going to return.

103
00:06:07,700 --> 00:06:10,890
If you start out with -2,
you'll skip the if block, and

104
00:06:10,890 --> 00:06:13,650
you'll just keep subtracting 1.

105
00:06:13,650 --> 00:06:16,640
Next time, your input's going to be -3.

106
00:06:16,640 --> 00:06:18,657
Then you'll subtract 1, -4.

107
00:06:18,658 --> 00:06:21,220
Subtract 1, -5, and so forth.

108
00:06:22,320 --> 00:06:27,840
If I use less than though,
if my number initially is -2 or

109
00:06:27,840 --> 00:06:32,454
-50 or -1 million, I'll stop as
soon as I hit the base case.

110
00:06:32,454 --> 00:06:35,657
Remember to think about all the
different input values your recursive

111
00:06:35,657 --> 00:06:36,750
statement could have.

112
00:06:38,000 --> 00:06:42,160
Lastly, if you're really not sure
what your recursive block is doing,

113
00:06:42,160 --> 00:06:45,480
you can use print statements
wherever necessary.

114
00:06:45,480 --> 00:06:47,290
By printing out intermediate values,

115
00:06:47,290 --> 00:06:51,300
you'll get a sense of exactly what your
code is doing at exactly which steps.
