1
00:00:00,300 --> 00:00:05,399
二叉树是一种简单的树 其中父节点最多有两个子节点

2
00:00:05,400 --> 00:00:10,500
也就是某个节点可以有 0 个、1 个或 2 个子节点

3
00:00:10,500 --> 00:00:13,330
这些子节点甚至为 null 也是可以的

4
00:00:13,330 --> 00:00:16,200
我们来看看如何搜索二叉树

5
00:00:16,200 --> 00:00:19,490
我们可以使用任何一种遍历算法来

6
00:00:19,490 --> 00:00:20,669
遍历树

7
00:00:20,670 --> 00:00:24,460
因为元素没有实际的顺序 我需要访问树中的每个元素

8
00:00:24,460 --> 00:00:28,880
来看看我要查找的值是否存在

9
00:00:28,880 --> 00:00:32,119
没有什么技巧可言 所以是线性时间搜索

10
00:00:33,340 --> 00:00:37,230
删除操作通常以搜索开始 因为你需要

11
00:00:37,230 --> 00:00:38,290
查找要删除的节点

12
00:00:38,290 --> 00:00:41,740
如果删除的是叶子 那么可以直接删掉它并继续

13
00:00:41,740 --> 00:00:46,180
但是 如果要删除的是内部节点 树中忽然就有个空隙了

14
00:00:46,180 --> 00:00:50,550
如果要删除的节点只有一个子节点 那么 你可以直接拿走它

15
00:00:50,550 --> 00:00:54,930
将子节点往上移 并与原先节点的父节点相连

16
00:00:54,930 --> 00:00:57,600
如果要删除的节点有两个子节点

17
00:00:57,600 --> 00:00:59,220
你就有几个选择了

18
00:00:59,220 --> 00:01:02,730
你可以像之前一样将子节点往上移

19
00:01:02,730 --> 00:01:05,330
当然 不可能总这么简单了

20
00:01:05,330 --> 00:01:08,950
如果两个子节点也有自己的两个子节点呢？

21
00:01:08,950 --> 00:01:09,980
在最坏情况下

22
00:01:09,980 --> 00:01:13,900
你需要继续往下遍历子树 直到到达叶子部分

23
00:01:13,900 --> 00:01:16,430
因为没有顺序要求

24
00:01:16,430 --> 00:01:20,900
你可以直接将该叶子放在要删除的节点所在的位置 这样不会有问题

25
00:01:20,900 --> 00:01:23,480
因为需要查找 删除过后还需要移动元素

26
00:01:23,480 --> 00:01:26,130
因此运行时间是线性的
