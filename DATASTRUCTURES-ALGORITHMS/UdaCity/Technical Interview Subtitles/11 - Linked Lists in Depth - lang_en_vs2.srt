1
00:00:00,320 --> 00:00:04,320
In higher level programming languages
there often isn't a distinction between

2
00:00:04,320 --> 00:00:05,990
linked lists and arrays.

3
00:00:05,990 --> 00:00:08,920
There's just a list that
has the properties of both.

4
00:00:08,920 --> 00:00:11,550
However questions about
these two data structures

5
00:00:11,550 --> 00:00:16,120
are fairly common in interviews, so
it's important to know the difference.

6
00:00:16,120 --> 00:00:20,990
Again, the main distinction is that each
element stores different information.

7
00:00:20,990 --> 00:00:24,669
In both cases a single
element will store a value.

8
00:00:24,670 --> 00:00:26,630
Or the actual information.

9
00:00:26,630 --> 00:00:28,230
So if you have an array or

10
00:00:28,230 --> 00:00:31,250
linked list of numbers,
the value will be a single number.

11
00:00:32,330 --> 00:00:33,780
If you have an array or

12
00:00:33,780 --> 00:00:37,860
linked list of string values,
then each value will contain a string.

13
00:00:37,860 --> 00:00:40,310
In this case we're just
going to stick with numbers.

14
00:00:40,310 --> 00:00:44,260
Now, in both cases we store
one other type of information.

15
00:00:44,260 --> 00:00:46,160
But that type is different.

16
00:00:46,160 --> 00:00:49,639
In an array we would store
a number as an index.

17
00:00:49,640 --> 00:00:52,310
You can get the next element
by querying the array for

18
00:00:52,310 --> 00:00:55,500
the element at index one in this case.

19
00:00:55,500 --> 00:00:56,690
Let's clear this out and focus.

20
00:00:56,690 --> 00:00:57,940
Just some linked lists for now.

21
00:00:59,290 --> 00:01:03,700
In a linked list, we store a reference
to the next element in the list.

22
00:01:03,700 --> 00:01:07,890
In many languages this will look like
assigning the actual next element

23
00:01:07,890 --> 00:01:10,290
as a property of this element.

24
00:01:10,290 --> 00:01:13,310
Way down at the hardware
level your element

25
00:01:13,310 --> 00:01:16,610
actually has some space dedicated for
it in memory.

26
00:01:16,610 --> 00:01:19,700
These are representing
the memory locations.

27
00:01:19,700 --> 00:01:24,420
So in this case, the next component is
actually storing the memory address

28
00:01:24,420 --> 00:01:27,300
of the next element,
while this element is

29
00:01:27,300 --> 00:01:30,259
storing null because it doesn't
point to anything else.

30
00:01:30,260 --> 00:01:33,780
The nice thing about the system is
that it's pretty easy to insert and

31
00:01:33,780 --> 00:01:35,390
delete elements.

32
00:01:35,390 --> 00:01:39,400
Adding an element is going to look
something like this, we really just need

33
00:01:39,400 --> 00:01:43,390
to change the next reference to
point to the new object and done.

34
00:01:43,390 --> 00:01:45,950
There's a quick trick you
need to remember though

35
00:01:45,950 --> 00:01:50,530
if you delete the next reference and
replace it with a new object.

36
00:01:50,530 --> 00:01:54,240
You'll lose your reference to this
object, you should always assign your

37
00:01:54,240 --> 00:01:58,140
next pointer for this element before
you assign your next pointer for

38
00:01:58,140 --> 00:02:02,100
this element, so you don't lose your
reference to this one down here.

39
00:02:02,100 --> 00:02:04,300
Now everything looks great.

40
00:02:04,300 --> 00:02:08,370
Note that insertion takes constant time
in this case since you're just shifting

41
00:02:08,370 --> 00:02:13,140
around pointers and not iterating
over every element in the list.

42
00:02:13,140 --> 00:02:15,929
Removing an element is going
to look pretty similar, so

43
00:02:15,930 --> 00:02:18,180
I'm not even going to go over that now.

44
00:02:18,180 --> 00:02:20,970
There's also something
called a doubly linked list

45
00:02:20,970 --> 00:02:25,100
where you have pointers to the next
element and the previous element.

46
00:02:25,100 --> 00:02:27,970
The rules are pretty similar for
a doubly linked list,

47
00:02:27,970 --> 00:02:31,770
except you can traverse the list
in both directions now.

48
00:02:31,770 --> 00:02:35,700
Again, you need to be careful not
to lose references when adding or

49
00:02:35,700 --> 00:02:39,380
removing elements but it's easier than
performing these operations on an array.
