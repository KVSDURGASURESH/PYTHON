1
00:00:00,110 --> 00:00:01,110
And finally,

2
00:00:01,110 --> 00:00:06,830
we reach the intersection of two very
important topics, maps and hashing.

3
00:00:06,830 --> 00:00:11,400
Hash maps are one of the main places
you'll see hash function show up.

4
00:00:11,400 --> 00:00:14,160
In the previous example we were
just using a hash function

5
00:00:14,160 --> 00:00:16,650
to find a place to store keys.

6
00:00:16,650 --> 00:00:20,180
However, maps have keys and values.

7
00:00:20,180 --> 00:00:25,130
You can use the keys as inputs to a hash
function, then store the key value pair

8
00:00:25,130 --> 00:00:28,490
in the bucket of the hash value
produced by the function.

9
00:00:28,490 --> 00:00:33,400
Again since you know the keys in a map
are unique since they belong to a set

10
00:00:33,400 --> 00:00:37,370
you could use a hash function to give
them each their own unique buckets.

11
00:00:37,370 --> 00:00:41,700
You can also design a hash
function to allow for collisions.

12
00:00:41,700 --> 00:00:44,820
In an interview, you'll often be asked
to create a hash table to show that you

13
00:00:44,820 --> 00:00:46,430
understand hashing.

14
00:00:46,430 --> 00:00:50,600
Also that you know the upsides and
downsides of designing a hash function.

15
00:00:50,600 --> 00:00:55,170
However hash maps are very useful
to integrate into algorithms.

16
00:00:55,170 --> 00:00:58,700
Constant time lookups can
really speed up your code.

17
00:00:58,700 --> 00:00:58,910
Keep it in mind and

18
00:00:58,910 --> 00:01:02,559
always think if it'll work first when
thinking through data structures.
