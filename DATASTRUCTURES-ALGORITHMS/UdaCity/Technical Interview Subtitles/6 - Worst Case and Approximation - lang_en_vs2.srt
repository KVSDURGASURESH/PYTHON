1
00:00:00,660 --> 00:00:03,270
Since the amount of steps
can vary widely based on

2
00:00:03,270 --> 00:00:07,369
the specific implementations,
we normally use approximations

3
00:00:07,370 --> 00:00:10,100
when talking about efficiency
in big O notation.

4
00:00:11,200 --> 00:00:14,400
Since the efficiency of
the pseudo code we wrote before

5
00:00:14,400 --> 00:00:17,310
could end up looking like
any of these and even more,

6
00:00:17,310 --> 00:00:23,159
we would say that the efficiency
is actually about O(n).

7
00:00:23,160 --> 00:00:26,650
If you're writing code for production
you definitely care about the number of

8
00:00:26,650 --> 00:00:29,549
computations and want to minimize it.

9
00:00:29,550 --> 00:00:33,200
However, in an interview, your
interviewer doesn't care that you can do

10
00:00:33,200 --> 00:00:37,270
that exactly, but just wants to know
that you are thinking about efficiency

11
00:00:37,270 --> 00:00:38,680
and can calculate it if you need to.

12
00:00:39,900 --> 00:00:42,700
By approximating, we're really saying

13
00:00:43,120 --> 00:00:48,100
some number of computations must be
performed for each letter in the input.

14
00:00:49,180 --> 00:00:52,840
There's actually more things you should
consider when using big O notation.

15
00:00:53,890 --> 00:00:57,880
If you noticed before I said
you'll need at least 26 checks to

16
00:00:57,880 --> 00:01:00,670
get through every
letter of the alphabet.

17
00:01:00,670 --> 00:01:04,190
In reality it's unlikely that you'll
have to go through all 26 letters

18
00:01:04,190 --> 00:01:06,160
each time.

19
00:01:06,160 --> 00:01:09,570
When we're discussing efficiency
we often talk about it in terms of

20
00:01:09,570 --> 00:01:15,210
the worst case scenario, where we would
have to check all 26 letters each time.

21
00:01:15,210 --> 00:01:19,580
We focus on worst case because it puts
an upper bound on the amount of time our

22
00:01:19,580 --> 00:01:21,280
code is going to take.

23
00:01:21,280 --> 00:01:25,160
You could also talk about efficiency
in terms of the average case or

24
00:01:25,160 --> 00:01:26,869
even best case.

25
00:01:26,870 --> 00:01:29,650
So if we're talking about
letters in the alphabet,

26
00:01:29,650 --> 00:01:34,110
the worst case means we would have
to go through all 26 letters.

27
00:01:34,110 --> 00:01:37,540
However the best case would be that
we find what we're looking for

28
00:01:37,540 --> 00:01:40,550
on the very first try, but on average,

29
00:01:40,550 --> 00:01:43,570
we're going to fall somewhere
in the middle, around 13.

30
00:01:43,570 --> 00:01:45,889
In a perfect world,

31
00:01:45,890 --> 00:01:50,317
iterating through a list of letters is
going to take an average of 13 times.

32
00:01:50,317 --> 00:01:53,919
Sometimes it will be a little more,
sometimes it will be a little less, but

33
00:01:53,920 --> 00:01:56,900
it's fair to say it will be about 13.

34
00:01:56,900 --> 00:02:00,400
If we're going to try and
calculate the average case efficiency,

35
00:02:00,400 --> 00:02:04,825
it's going to look a little more like
this, in the end will get 16n+2.

36
00:02:04,825 --> 00:02:08,930
Now let's go back to our
point about approximations.

37
00:02:09,960 --> 00:02:13,220
If we consider the average
case the worst case or

38
00:02:13,220 --> 00:02:18,370
the best case,
it's also going to result in O(n).

39
00:02:18,370 --> 00:02:22,460
In an interview you might be tempted
to combine the average case,

40
00:02:22,460 --> 00:02:27,200
the worst case, the best case, and
just give an answer like this.

41
00:02:27,200 --> 00:02:29,820
However the best case,
the worst case, and

42
00:02:29,820 --> 00:02:33,380
the average case might not
always approximate this nicely.

43
00:02:33,380 --> 00:02:35,947
So you really should specify
to your interviewer which case

44
00:02:35,947 --> 00:02:37,350
you're talking about.

45
00:02:38,185 --> 00:02:40,415
We've been talking a lot
about time efficiency but

46
00:02:40,415 --> 00:02:44,345
you can actually use the same notation
to refer to space efficiency too.

47
00:02:45,385 --> 00:02:49,200
For example, let's say you needed
to copy over your input string

48
00:02:49,200 --> 00:02:51,820
three times in your code for
some reason.

49
00:02:51,820 --> 00:02:55,350
Then the space efficiency would
look something like this.

50
00:02:55,350 --> 00:02:58,930
Space efficiency is asked less
frequently in interviews, but

51
00:02:58,930 --> 00:03:01,860
it's definitely something you should
consider because it will come up

52
00:03:01,860 --> 00:03:02,580
from time to time.
