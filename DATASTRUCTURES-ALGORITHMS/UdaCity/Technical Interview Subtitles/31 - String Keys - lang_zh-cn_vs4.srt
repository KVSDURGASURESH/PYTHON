1
00:00:00,800 --> 00:00:04,700
该系统的真正魅力在于你也可以使用字符串键

2
00:00:04,700 --> 00:00:08,800
你只需设计一个哈希函数 可以将字母转换成

3
00:00:08,800 --> 00:00:09,430
数字

4
00:00:09,430 --> 00:00:14,140
单个字母可以轻松地转换成 ASCII 值

5
00:00:14,140 --> 00:00:17,450
很多语言本身已经存在实现这一功能的函数

6
00:00:18,570 --> 00:00:22,550
我们可以通过公式和 ASCII 值获得每个字母的

7
00:00:22,550 --> 00:00:23,990
唯一哈希值

8
00:00:23,990 --> 00:00:26,900
所以我们的哈希函数该是怎样的呢？

9
00:00:26,900 --> 00:00:29,310
这里也需要权衡一些事项

10
00:00:29,310 --> 00:00:31,610
我们需要每个单词都在自己的桶里吗？

11
00:00:31,610 --> 00:00:36,280
你是否想要一个相对简单的哈希函数 并且允许出现冲突？

12
00:00:36,280 --> 00:00:41,180
如果你有 30 个或更少的单词 你可以将字符串的

13
00:00:41,180 --> 00:00:44,860
首字母的 ASCII 值当做哈希值

14
00:00:44,860 --> 00:00:47,300
Jave 中的标准字符串键哈希函数

15
00:00:47,300 --> 00:00:52,830
宁愿选择一个大的表格 也不希望出现冲突

16
00:00:52,830 --> 00:00:55,410
公式类似于这样

17
00:00:55,410 --> 00:00:58,980
例如 假设我们要哈希处理单词 UDACITY

18
00:00:58,980 --> 00:01:02,879
以前面两个字母 UD 开始

19
00:01:02,880 --> 00:01:06,130
我们可以将这两个字母的 ASCII 值代入这个公式里

20
00:01:06,130 --> 00:01:08,800
获得字符串的唯一哈希值

21
00:01:10,900 --> 00:01:11,670
为何可行呢？

22
00:01:11,670 --> 00:01:16,950
将每个字母的 ASCII 值乘以某个值

23
00:01:16,950 --> 00:01:21,150
例如 31 可以保证每个值的代表或哈希值

24
00:01:21,150 --> 00:01:24,370
对于该字符串来说肯定是唯一的

25
00:01:24,370 --> 00:01:26,490
对于每个字符串都需要唯一哈希桶的字典来说

26
00:01:26,490 --> 00:01:30,270
这种函数很有用

27
00:01:30,270 --> 00:01:35,348
但是 只有三个或四个字母的字符串已经具有很大的哈希值

28
00:01:36,550 --> 00:01:39,200
这里一定要权衡考虑

29
00:01:39,200 --> 00:01:44,380
只要你有足够的空间 唯一的哈希值肯定是有用的

30
00:01:44,380 --> 00:01:48,110
最后 为何这里要使用 31 呢？

31
00:01:48,110 --> 00:01:51,560
最早期的哈希函数利用了数字 31 的某些特性

32
00:01:51,560 --> 00:01:55,740
研究表明 对于这种字符串哈希算法来说

33
00:01:55,740 --> 00:01:57,220
31 是个不错的选择

34
00:01:58,560 --> 00:02:02,840
但是 现在出现了更加复杂的哈希函数

35
00:02:02,840 --> 00:02:08,150
因此 对于各种情况来说 31 是个比较惯例的选择 而不是最佳值

36
00:02:08,150 --> 00:02:12,730
记住 为你的键自己设计一个解决方案是最重要的

37
00:02:12,730 --> 00:02:15,450
不要被各种惯例束缚了
