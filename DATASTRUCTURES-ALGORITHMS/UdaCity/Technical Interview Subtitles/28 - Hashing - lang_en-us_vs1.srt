1
00:00:00,350 --> 00:00:03,740
Okay, so
how do these magic hash functions work?

2
00:00:03,740 --> 00:00:07,780
The purpose of a hash function is to
transform some value into one that can

3
00:00:07,780 --> 00:00:10,370
be stored and retrieved easily.

4
00:00:10,370 --> 00:00:14,759
You give it some value, it converts
the value based on some formula, and

5
00:00:14,760 --> 00:00:19,460
spits out a coded version of the value
that's often the index in an array.

6
00:00:19,460 --> 00:00:23,200
Let's go through an example
to clarify this process.

7
00:00:23,200 --> 00:00:25,780
Let's say you're running some big event.

8
00:00:25,780 --> 00:00:29,200
Maybe it's for
people who like a certain type of music.

9
00:00:29,200 --> 00:00:32,820
Everybody who wants to come to the event
needs to buy tickets in advance.

10
00:00:32,820 --> 00:00:36,740
All of those tickets are randomly
numbered, and those numbers are embedded

11
00:00:36,740 --> 00:00:40,736
in bar codes on physical tickets that
people hand you when they first arrive.

12
00:00:40,736 --> 00:00:45,560
You need to be able to look up ticket
numbers fast when people check in at

13
00:00:45,560 --> 00:00:45,800
the event.

14
00:00:46,950 --> 00:00:50,910
Storing the ticket number in one of
those incredible hash functions sounds

15
00:00:50,910 --> 00:00:52,379
pretty great to you.

16
00:00:52,380 --> 00:00:55,320
You have all of your numbers,
now you just need to come up with

17
00:00:55,320 --> 00:00:59,480
a hash function to convert them to hash
values so they can be stored easily.

18
00:01:01,200 --> 00:01:05,209
One common pattern in hash functions
is to take the last few digits of a big

19
00:01:05,209 --> 00:01:09,300
number, divide it by some
consistent number, and using

20
00:01:09,300 --> 00:01:13,920
the remainder from that division to find
a place to store that number in a array.

21
00:01:15,330 --> 00:01:19,179
In this case, the remainder turned
directly into the index of an array.

22
00:01:20,300 --> 00:01:22,259
Why does this strategy work?

23
00:01:22,260 --> 00:01:26,720
Well, if the numbers we had assigned
to each ticket were 0 to 100,

24
00:01:26,720 --> 00:01:31,880
we could easily store it all in an array
and look them up instantly by the index.

25
00:01:31,880 --> 00:01:35,200
When numbers are big and
random like the ones we started with,

26
00:01:35,200 --> 00:01:39,340
we need some way to convert those
numbers into array indices quickly.

27
00:01:40,670 --> 00:01:43,220
That's how the constant
time lookup works.

28
00:01:43,220 --> 00:01:45,590
You give your number to a hash function,

29
00:01:45,590 --> 00:01:49,300
which spits out a hash code that
turns into the index of an array.

30
00:01:50,150 --> 00:01:54,220
You can go to your array and
get your original value in constant time

31
00:01:54,220 --> 00:01:57,390
since an array look up with
an index happens in constant time.

32
00:01:58,410 --> 00:02:02,679
Hm, why use the last few
digits of a big number?

33
00:02:02,680 --> 00:02:06,650
In most cases the last few
digits are the most random.

34
00:02:06,650 --> 00:02:09,590
If you're assigning your
numbers in numerical order

35
00:02:09,590 --> 00:02:12,820
The first few digits
really wouldn't be random.

36
00:02:12,820 --> 00:02:16,269
They're more likely to start with a 1,
a 2,

37
00:02:16,270 --> 00:02:20,170
a 3, etc,
than later numbers like 7, 8, or 9.
