1
00:00:00,400 --> 00:00:04,300
Let's start talking about the efficiency
of this algorithm with a new example.

2
00:00:05,460 --> 00:00:08,610
Here we have an array with eight
elements and we're going to try and

3
00:00:08,610 --> 00:00:09,490
find the number ten.

4
00:00:10,990 --> 00:00:12,874
Okay, so
we'll want to start in the middle.

5
00:00:12,874 --> 00:00:16,508
This problem is a little bit weird
because there's an even number of

6
00:00:16,508 --> 00:00:17,855
elements in this array.

7
00:00:17,855 --> 00:00:20,630
So we could either start with four or
five really.

8
00:00:20,630 --> 00:00:24,982
When you're designing your algorithm,
you need to decide from the start

9
00:00:24,982 --> 00:00:27,788
whether you're going to
err on the lower side or

10
00:00:27,789 --> 00:00:31,880
the higher side when you hit this
weird case of having no real middle.

11
00:00:33,500 --> 00:00:35,180
I'm going to go ahead and
err on the lower side and

12
00:00:35,180 --> 00:00:36,150
start with the number four.

13
00:00:37,200 --> 00:00:39,920
Just like before, we'll check
whether our number is bigger or

14
00:00:39,920 --> 00:00:41,410
smaller than the one in the middle.

15
00:00:42,430 --> 00:00:44,700
And since our number is bigger,

16
00:00:44,700 --> 00:00:46,300
now we only need to look at
the second half of the array.

17
00:00:47,890 --> 00:00:50,610
Again, we have an even number
of elements in our array, so

18
00:00:50,610 --> 00:00:54,425
we're going to pick the number on the
left of the middle and start from there.

19
00:00:54,425 --> 00:00:57,625
Okay, since ten is greater than six, yet

20
00:00:57,625 --> 00:01:00,645
again we get to cut our array in
half and deal with just the top.

21
00:01:01,675 --> 00:01:04,175
Yet again we have an even
number of elements, so

22
00:01:04,175 --> 00:01:07,440
we're going to err on the lower side and
check there first.

23
00:01:07,440 --> 00:01:10,500
Since ten is greater than
our middle element seven,

24
00:01:10,500 --> 00:01:12,850
we're left with just
the last element now.

25
00:01:12,850 --> 00:01:16,700
And now that we've checked the highest
element in the array and our number is

26
00:01:16,700 --> 00:01:19,690
still bigger than it, we know that this
number doesn't exist and we can move on.

27
00:01:20,770 --> 00:01:24,610
Since the time efficiency is really
just the number of steps you're going to

28
00:01:24,610 --> 00:01:28,275
need, keeping track of each iteration
is going to help us figure it out.

29
00:01:28,275 --> 00:01:31,705
In the past, we had to step
through every single element,

30
00:01:31,705 --> 00:01:36,334
but here we're cutting the array in
half and only considering some elements.

31
00:01:36,334 --> 00:01:41,910
So the efficiency isn't going
to end up being as big as O(n).

32
00:01:41,910 --> 00:01:44,580
I've created a table so
we can take a good look at

33
00:01:44,580 --> 00:01:48,120
the array size versus the number
of iterations of our algorithm.

34
00:01:49,470 --> 00:01:52,910
As we just saw, we had to go through
our algorithm four times for

35
00:01:52,910 --> 00:01:54,679
an array size of eight.

36
00:01:54,680 --> 00:01:56,387
Again, we're talking
about worst case here.

37
00:01:56,387 --> 00:02:00,400
I could have tried to put a number
in between all of these places and

38
00:02:00,400 --> 00:02:03,390
on the outsides to figure
out what the worst case was.

39
00:02:03,390 --> 00:02:07,310
Just to save your time,
I did that before recording this video.

40
00:02:07,310 --> 00:02:10,199
In the process I also
discovered a trick here.

41
00:02:10,199 --> 00:02:13,400
If you want to make sure you're
checking for the worst case,

42
00:02:13,400 --> 00:02:17,900
you can pick an element that's bigger
than anything else in the array.

43
00:02:17,900 --> 00:02:21,900
And when you hit this weird middle case,
always favor the lower side.

44
00:02:21,900 --> 00:02:24,590
You should prove this to yourself so
you know that it works, but

45
00:02:24,590 --> 00:02:26,480
just trust me on it for now.

46
00:02:26,480 --> 00:02:31,480
Okay, so for an array size of eight,
we have worst case for iterations.

47
00:02:31,480 --> 00:02:33,804
We can take the results
from the first example too.

48
00:02:33,804 --> 00:02:38,880
There it took us three steps to find
something in an array of seven.

49
00:02:38,880 --> 00:02:41,954
Hm, let's start thinking about
different array sizes now.

50
00:02:41,955 --> 00:02:46,462
If you had an array size of one and
you were looking for an element, say 30,

51
00:02:46,462 --> 00:02:50,899
it would always only take you one step
to see whether that element was in your

52
00:02:50,900 --> 00:02:52,580
array or not.

53
00:02:52,580 --> 00:02:54,880
Great, that means we can
add one to our table.

54
00:02:54,880 --> 00:02:57,840
Let's say we have an array with two
elements in it and we're looking for

55
00:02:57,840 --> 00:03:00,200
this number, 23.

56
00:03:00,200 --> 00:03:02,710
Again, I'm taking
advantage of that trick.

57
00:03:02,710 --> 00:03:05,900
I picked a number bigger than
the ones that were in the array.

58
00:03:05,900 --> 00:03:09,870
And when I have that weird case, I'm
always going to favor the lower side.

59
00:03:09,870 --> 00:03:12,340
And when my array has
an even number of elements,

60
00:03:12,340 --> 00:03:14,510
I'm going to pick the number
that's on the left of the middle.

61
00:03:15,780 --> 00:03:18,480
Since 23 is greater than 18,
I can check 21 now.

62
00:03:19,690 --> 00:03:23,579
In just two steps I have my answer,
that 23 doesn't exist in this array.

63
00:03:24,610 --> 00:03:26,980
Great, we can add two to the table now.

64
00:03:26,980 --> 00:03:30,709
In the interest of time, I'm not going
to go through all of these examples.

65
00:03:30,710 --> 00:03:33,230
You should definitely do them
yourself though to prove that

66
00:03:33,230 --> 00:03:34,179
these results are true.

67
00:03:35,425 --> 00:03:38,800
Okay, we're starting to get
a picture of our efficiency here.

68
00:03:39,250 --> 00:03:41,490
I notice that four is half of eight, so

69
00:03:41,490 --> 00:03:44,630
maybe our efficiency looks
something like this.

70
00:03:44,630 --> 00:03:46,780
Again, keep in mind that
I'm approximating here.

71
00:03:47,880 --> 00:03:51,400
Instead of counting the number of
overall steps in the algorithm,

72
00:03:51,400 --> 00:03:54,670
I'm just counting the number of times
I'll need to run the algorithm,

73
00:03:54,670 --> 00:03:56,850
in this case four when my n is eight.

74
00:03:57,850 --> 00:04:01,810
Actually I don't know that this is
true since half of two isn't two,

75
00:04:01,810 --> 00:04:03,780
and half of one isn't one.

76
00:04:03,780 --> 00:04:05,320
That's too bad.

77
00:04:05,320 --> 00:04:09,359
I really feel like two should
go in this efficiency somewhere

78
00:04:09,360 --> 00:04:12,870
since I have to cut the array in half
every single time I run the algorithm.

79
00:04:13,870 --> 00:04:16,980
Let me think about exactly
what that means for a second.

80
00:04:16,980 --> 00:04:20,620
If I cut the array in half every
time I go through an iteration,

81
00:04:20,620 --> 00:04:23,480
that means every time I double
the number of elements,

82
00:04:23,480 --> 00:04:25,600
I need to do an extra iteration.

83
00:04:26,240 --> 00:04:27,900
Actually, now that I think about it,

84
00:04:27,900 --> 00:04:30,549
that actually looks true with
the results of my table.

85
00:04:32,300 --> 00:04:34,369
Every time my array doubles in size,

86
00:04:34,370 --> 00:04:37,199
it takes an extra iteration of
the algorithm to get through it.

87
00:04:38,560 --> 00:04:42,728
Actually when I represent these as
exponents, I notice that the power

88
00:04:42,728 --> 00:04:47,121
on top of the two is always one more
than the number of iterations it takes.

89
00:04:47,121 --> 00:04:51,686
So maybe my efficiency
looks more like this.

90
00:04:51,686 --> 00:04:56,209
The number of overall iterations
is going to increase every time

91
00:04:56,209 --> 00:04:59,557
the exponent on the power
of two increases, and

92
00:04:59,557 --> 00:05:01,833
of course it's only off by one.

93
00:05:01,833 --> 00:05:06,380
How do I get some number or
expression that represents this,

94
00:05:06,380 --> 00:05:08,439
the power of two exponent?

95
00:05:08,439 --> 00:05:12,693
So this is what I'm starting with,
the number of elements in my array, and

96
00:05:12,693 --> 00:05:16,425
I want to end up with this number,
the exponent.

97
00:05:16,425 --> 00:05:20,305
Well, I remember some weird math
that I used to do a long time ago.

98
00:05:20,305 --> 00:05:23,295
There was this thing called
a logarithm that let me express

99
00:05:23,295 --> 00:05:25,895
this kind of function
in a different way.

100
00:05:25,895 --> 00:05:30,272
Instead of saying this,
I could say log base 2 of 8 = 3, and

101
00:05:30,273 --> 00:05:32,550
it means the same thing.

102
00:05:33,600 --> 00:05:35,820
Okay, so this looks a little bit nicer.

103
00:05:35,820 --> 00:05:39,330
I want to make a point to note that
you don't need to know a ton about how

104
00:05:39,330 --> 00:05:41,740
logarithms work to understand this.

105
00:05:41,740 --> 00:05:44,929
If you just understand the equations I
showed you before, you should be fine.

106
00:05:46,100 --> 00:05:48,780
So we could actually use another
approximation to make this

107
00:05:48,780 --> 00:05:50,270
look even nicer.

108
00:05:50,270 --> 00:05:52,830
As I mentioned before,
adding a constant or

109
00:05:52,830 --> 00:05:57,280
adding one doesn't really
change my efficiency very much.

110
00:05:57,280 --> 00:06:00,869
Also, I don't really need to
say that this is log base 2.

111
00:06:00,870 --> 00:06:04,800
In computer science it's actually pretty
safe to assume that your logs are in

112
00:06:04,800 --> 00:06:06,200
base 2.

113
00:06:06,200 --> 00:06:10,359
We often do things like cut
arrays in half or use binary.

114
00:06:10,360 --> 00:06:15,350
So our logs are normally going to be in
base 2 instead of the typical base 10.

115
00:06:15,350 --> 00:06:17,859
So this is the efficiency
that we end up with.

116
00:06:18,890 --> 00:06:21,500
A little later on we'll
have some more tools.

117
00:06:21,500 --> 00:06:22,700
So it'll be easier for

118
00:06:22,700 --> 00:06:25,740
me to show you visually why
this efficiency makes sense.

119
00:06:26,840 --> 00:06:29,380
There's one thing I want to make
very clear to you all right now.

120
00:06:30,510 --> 00:06:32,260
When I was learning about efficiency,

121
00:06:32,260 --> 00:06:35,700
it often seemed like people could
just jump to this conclusion.

122
00:06:36,720 --> 00:06:39,800
They could just look at
the original problem and say,

123
00:06:39,800 --> 00:06:40,330
of course this is log n.

124
00:06:41,450 --> 00:06:43,740
However, after years
of being a developer,

125
00:06:43,740 --> 00:06:45,630
I learned that that
really wasn't the case.

126
00:06:46,690 --> 00:06:51,650
I found that there are three main ways
that people can get to this efficiency.

127
00:06:51,650 --> 00:06:54,715
One of them is just by knowing
what binary search is,

128
00:06:54,715 --> 00:06:58,734
having seen it before, and being able
to just memorize the efficiency and

129
00:06:58,735 --> 00:07:00,935
spit it out when you see it again.

130
00:07:00,935 --> 00:07:04,855
I highly recommend you just memorize
the efficiency of basic algorithms for

131
00:07:04,855 --> 00:07:06,585
your interviews.

132
00:07:06,585 --> 00:07:09,854
It'll make you seem really smart if
you can just spit out the efficiency

133
00:07:09,855 --> 00:07:11,335
from the start.

134
00:07:11,335 --> 00:07:13,854
However, if you're presented
with a new problem and

135
00:07:13,855 --> 00:07:16,790
you don't know the efficiency
of the algorithm already,

136
00:07:16,790 --> 00:07:18,450
you need to be able to
solve it on your own.

137
00:07:19,450 --> 00:07:22,140
One way you can do that is with proofs.

138
00:07:22,140 --> 00:07:25,849
I personally don't like proofs and
have never used them in an interview or

139
00:07:25,850 --> 00:07:28,560
seen other people use
them in interviews.

140
00:07:28,560 --> 00:07:32,100
If you want to learn how to make proofs,
you can look it up online and

141
00:07:32,100 --> 00:07:35,610
go read research papers and
see other people step through that.

142
00:07:35,610 --> 00:07:38,569
However, my goal is to teach you
the practical approach to this.

143
00:07:39,910 --> 00:07:41,940
When you haven't seen
the algorithm already, and

144
00:07:41,940 --> 00:07:46,400
you don't have time to whip up a proof
out of nowhere, making a results table

145
00:07:46,400 --> 00:07:48,810
like this is actually one of
the best things you can do.

146
00:07:50,160 --> 00:07:53,930
Creating a results table
helps you notice patterns and

147
00:07:53,930 --> 00:07:57,380
helps you start thinking about
efficiency in terms of array size

148
00:07:57,380 --> 00:08:00,730
versus the number of
iterations of your algorithm.

149
00:08:00,730 --> 00:08:02,830
When I first started
learning about efficiency,

150
00:08:02,830 --> 00:08:06,320
I needed tables like this
to see those patterns.

151
00:08:06,320 --> 00:08:08,507
However, after using tables for a while,

152
00:08:08,507 --> 00:08:11,685
I started to be able to see
the patterns on my own without them.

153
00:08:11,685 --> 00:08:13,406
Now when I interview,

154
00:08:13,406 --> 00:08:19,350
I know what types of patterns are common
like changes in the powers of two.

155
00:08:19,350 --> 00:08:21,117
And now I solve problems way quicker and

156
00:08:21,117 --> 00:08:26,200
there are very few problems that I can't
at least approach and try to solve.

157
00:08:26,200 --> 00:08:29,289
The worst thing you can do in
an interview is say I've never seen this

158
00:08:29,290 --> 00:08:32,890
algorithm before or I don't know
how to write a proof for it.

159
00:08:33,100 --> 00:08:36,600
If you're down on your luck and you
really don't know what the answer is,

160
00:08:36,600 --> 00:08:40,390
please make a results table and
try to figure it out.

161
00:08:40,390 --> 00:08:43,210
Your commitment to solving the problem
is really going to impress your

162
00:08:43,210 --> 00:08:43,710
interviewer.
