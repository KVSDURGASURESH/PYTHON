1
00:00:00,900 --> 00:00:05,120
想象下 有一排人等着拿到最好吃的

2
00:00:05,120 --> 00:00:07,310
巧克力薄烤饼

3
00:00:07,310 --> 00:00:10,410
规则是队伍中呆的时间最长的人

4
00:00:10,410 --> 00:00:12,970
会先拿到烤饼

5
00:00:12,970 --> 00:00:14,710
人们可以从这头加入队伍

6
00:00:14,710 --> 00:00:17,420
但是只有这头的人可以拿到烤饼

7
00:00:18,430 --> 00:00:23,520
这种情况叫做先进先出 即队列

8
00:00:23,520 --> 00:00:26,118
从这个角度考虑 队列是堆栈的相反情况

9
00:00:26,118 --> 00:00:30,799
对于堆栈 最近添加的元素先出来

10
00:00:30,800 --> 00:00:33,590
但是对于队列 呆的最久的元素最先出来

11
00:00:33,590 --> 00:00:37,400
从其他方面考虑 队列和堆栈很相似

12
00:00:37,400 --> 00:00:38,780
队列中的第一个元素

13
00:00:38,780 --> 00:00:42,000
或呆的最久的元素叫做队首

14
00:00:42,000 --> 00:00:45,480
队列中的最后一个元素或最新添加的元素

15
00:00:45,480 --> 00:00:46,199
叫做队尾

16
00:00:47,250 --> 00:00:51,650
当你在队尾添加元素时 这个操作叫做入队

17
00:00:51,650 --> 00:00:55,769
当你删除队首的元素 这个操作叫做出队

18
00:00:55,770 --> 00:00:59,490
还有一个操作叫做 peek 即查看队首的元素

19
00:00:59,490 --> 00:01:01,420
但是不会实际删除该元素

20
00:01:01,420 --> 00:01:05,180
当然 也可以用链表实现这一数据结构

21
00:01:05,180 --> 00:01:07,910
此时你也可以保存队首和队尾元素的引用

22
00:01:07,910 --> 00:01:11,380
以便以常量时间查看它们

23
00:01:11,380 --> 00:01:15,420
有两种特殊类型的队列会经常出现

24
00:01:15,420 --> 00:01:20,100
双队列 即双端队列 是朝两个方向发展的队列

25
00:01:20,100 --> 00:01:23,169
你可以从两端入队或出队

26
00:01:23,170 --> 00:01:24,260
如果仔细思考下

27
00:01:24,260 --> 00:01:28,830
会发现双队列是堆栈和队列的广义形式

28
00:01:28,830 --> 00:01:33,600
因为你可以用双队列代表这两种形式 可以将其当做堆栈

29
00:01:33,600 --> 00:01:36,910
从一端添加或删除元素 也可以将其当做队列

30
00:01:36,910 --> 00:01:40,429
从一端添加元素 并从另一端删除元素

31
00:01:41,450 --> 00:01:44,400
现在讨论下优先队列

32
00:01:44,400 --> 00:01:46,790
对于优先队列 在向队列中插入元素时

33
00:01:46,790 --> 00:01:50,260
你会为每个元素分配数值优先级

34
00:01:50,260 --> 00:01:54,450
出队时 你会删除优先级最高的元素

35
00:01:54,450 --> 00:01:57,500
这和普通队列的规则不太相似

36
00:01:57,500 --> 00:01:59,850
对于普通队列 你会首先删除呆的最久的元素

37
00:01:59,850 --> 00:02:02,640
但是 如果所有元素都具有相同的优先级

38
00:02:02,640 --> 00:02:05,340
则待的最久的元素首先出队
