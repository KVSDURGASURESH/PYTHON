1
00:00:00,610 --> 00:00:03,510
Graphs have some additional
properties that make them useful for

2
00:00:03,510 --> 00:00:05,980
modeling various types of data.

3
00:00:05,980 --> 00:00:10,150
Edges can have a direction, meaning
the relationship between two nodes only

4
00:00:10,150 --> 00:00:12,890
applies one way and not the other.

5
00:00:12,890 --> 00:00:14,990
Directed graph is the term for

6
00:00:14,990 --> 00:00:18,770
a graph where the edges
have a sense of direction.

7
00:00:18,770 --> 00:00:23,170
For example, if you're using a graph
to represent travel plans, a directed

8
00:00:23,170 --> 00:00:27,970
edge can be used to show which city
you start in and which you travel to.

9
00:00:27,970 --> 00:00:30,240
Often one node will be the start and

10
00:00:30,240 --> 00:00:33,839
the other the end of the relationship or
action taking place.

11
00:00:35,300 --> 00:00:39,980
You might describe the edge of
a graph as the first node, a verb,

12
00:00:39,980 --> 00:00:43,449
the word two, and the other node.

13
00:00:43,450 --> 00:00:48,610
Here, it's, From SF, travel to Tokyo.

14
00:00:48,610 --> 00:00:52,570
If you make a round trip and travel
through the same two cities going in

15
00:00:52,570 --> 00:00:58,490
opposite directions, you might have
two edges between the same two nodes,

16
00:00:58,490 --> 00:01:01,390
one representing each
direction you travel in.

17
00:01:01,390 --> 00:01:05,540
An undirected graph has edges
with no sense of direction.

18
00:01:05,540 --> 00:01:10,110
For example, if you have a graph of
people and edges are drawn between two

19
00:01:10,110 --> 00:01:14,840
people who have met before,
directed edges might be unnecessary.

20
00:01:14,840 --> 00:01:19,390
I previously mentioned that graphs
can have cycles but trees can't.

21
00:01:19,390 --> 00:01:22,830
A cycle happens in a graph when
you can start at one node and

22
00:01:22,830 --> 00:01:26,800
follow edges all the way
back to that node.

23
00:01:26,800 --> 00:01:26,620
Cycles and

24
00:01:26,620 --> 00:01:29,759
graphs can be really dangerous
when you're describing algorithms.

25
00:01:30,910 --> 00:01:34,200
You might read some code to travel
through the nodes in your graph.

26
00:01:34,200 --> 00:01:38,000
But if you have a cycle, you might just
go through the same sequence again and

27
00:01:38,000 --> 00:01:40,160
again and again in an infinite loop.

28
00:01:41,240 --> 00:01:45,850
You often need to make sure the graph
you're taking in as input is acyclic,

29
00:01:45,850 --> 00:01:48,530
meaning it has no cycles.

30
00:01:48,530 --> 00:01:52,770
One type that shows up often is a dag,
or directed, acyclic graph.

31
00:01:53,780 --> 00:01:57,800
It's really just what it sounds like,
a directed graph with no cycles.
