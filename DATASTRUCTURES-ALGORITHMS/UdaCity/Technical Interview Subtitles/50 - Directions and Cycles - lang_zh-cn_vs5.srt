1
00:00:00,610 --> 00:00:03,510
图表还具有其他特性 从而可以用于

2
00:00:03,510 --> 00:00:05,980
描述各种类型的数据

3
00:00:05,980 --> 00:00:10,150
边可以具有方向 表示两个节点之间的关系只能是一种方向

4
00:00:10,150 --> 00:00:12,890
而不是相反的方向

5
00:00:12,890 --> 00:00:14,990
有向图

6
00:00:14,990 --> 00:00:18,770
是指边存在方向的图表

7
00:00:18,770 --> 00:00:23,170
例如 如果使用图表表示旅行计划

8
00:00:23,170 --> 00:00:27,970
则有向边可以表示从哪座城市出发 前往哪座城市

9
00:00:27,970 --> 00:00:30,240
经常某个节点是起始部分

10
00:00:30,240 --> 00:00:33,839
另一端是关系的结束部分或行动发生的部分

11
00:00:35,300 --> 00:00:39,980
可以将图表的边描述为第一个节点

12
00:00:39,980 --> 00:00:43,449
前往第二个节点

13
00:00:43,450 --> 00:00:48,610
这是从旧金山前往东京

14
00:00:48,610 --> 00:00:52,570
如果是来回行程 在两座城市之间按相反的方向旅行

15
00:00:52,570 --> 00:00:58,490
则两个节点之间会有两条边

16
00:00:58,490 --> 00:01:01,390
每个都表示一种旅行方向

17
00:01:01,390 --> 00:01:05,540
无向图的边没有方向性

18
00:01:05,540 --> 00:01:10,110
例如 这是一个人物图表

19
00:01:10,110 --> 00:01:14,840
边表示两人之前见过面 则没必要画成有向边

20
00:01:14,840 --> 00:01:19,390
我之前提到过 图表可以有回路 但是树不行

21
00:01:19,390 --> 00:01:22,830
回路是指可以从一个节点开始

22
00:01:22,830 --> 00:01:26,800
然后按照相应的边又返回到该节点

23
00:01:26,800 --> 00:01:26,620
当你描述算法时

24
00:01:26,620 --> 00:01:29,759
图表和回路会很危险

25
00:01:30,910 --> 00:01:34,200
你需要读取一些代码来遍历图表中的节点

26
00:01:34,200 --> 00:01:38,000
如果存在回路的话 你可能会按照同一顺序不断遍历

27
00:01:38,000 --> 00:01:40,160
并进入无限循环

28
00:01:41,240 --> 00:01:45,850
经常你需要确保作为输入的图表是非循环图表

29
00:01:45,850 --> 00:01:48,530
即没有回路

30
00:01:48,530 --> 00:01:52,770
经常出现的一个类型是有向无环图 (DAG)

31
00:01:53,780 --> 00:01:57,800
顾名思义 就是没有回路的有向图表
