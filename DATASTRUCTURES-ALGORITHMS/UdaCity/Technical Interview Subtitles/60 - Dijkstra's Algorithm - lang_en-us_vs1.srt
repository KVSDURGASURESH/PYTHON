1
00:00:00,520 --> 00:00:03,240
One solution to the shortest
path problem for

2
00:00:03,240 --> 00:00:06,689
weighted undirected graphs is
called Dijkstra's Algorithm.

3
00:00:08,290 --> 00:00:12,640
Let's say we're trying to find
the shortest path from here to here.

4
00:00:12,640 --> 00:00:15,760
We begin by giving all
vertices a distance value.

5
00:00:16,790 --> 00:00:21,710
A distance is the sum of edge weights on
a path between our starting point and

6
00:00:21,710 --> 00:00:22,930
whatever vertex we're on.

7
00:00:24,170 --> 00:00:25,750
At the end of the algorithm,

8
00:00:25,750 --> 00:00:28,360
this distance will be the distance
of the shortest path.

9
00:00:29,520 --> 00:00:32,820
The distance value we
start with is infinity.

10
00:00:32,820 --> 00:00:36,980
This is a placeholder value that will
update whenever we discover a node and

11
00:00:36,980 --> 00:00:38,669
have an actual distance to store.

12
00:00:39,680 --> 00:00:43,180
The node we're starting with
will have a distance of zero.

13
00:00:43,180 --> 00:00:47,610
A common implementation of Dijkstra's
uses a min priority queue,

14
00:00:47,610 --> 00:00:50,540
where the element with
a minimum priority, or

15
00:00:50,540 --> 00:00:53,820
minimum distance in our case,
can be removed efficiently.

16
00:00:54,950 --> 00:00:58,910
We store all of our nodes in
the priority queue and use extract min

17
00:00:58,910 --> 00:01:03,890
to take out the minimum element,
the only one with a distance of zero.

18
00:01:04,400 --> 00:01:06,750
&gt;From our starting node
we have several options.

19
00:01:06,750 --> 00:01:11,330
We will follow each edge and
update the node on the other side with

20
00:01:11,330 --> 00:01:14,935
a distance value,
which is just the weight of the edge.

21
00:01:16,135 --> 00:01:17,955
Now we are faced with a choice.

22
00:01:17,955 --> 00:01:19,195
Which node should we visit?

23
00:01:20,205 --> 00:01:23,625
We'll always pick the node with
the smallest distance value,

24
00:01:23,625 --> 00:01:25,955
which means we run
extract min on the queue.

25
00:01:27,135 --> 00:01:30,265
Because we always pick the node
with the lowest distance,

26
00:01:30,265 --> 00:01:32,725
Dijkstra's is often called
a greedy algorithm.

27
00:01:33,730 --> 00:01:36,980
The philosophy for
this class of algorithms is

28
00:01:36,980 --> 00:01:41,590
pick whatever option looks best at
the moment, hence the name greedy.

29
00:01:41,590 --> 00:01:45,520
We repeat the process visiting all
adjacent nodes that are still in

30
00:01:45,520 --> 00:01:49,640
the queue and updating their distance
values if we can decrease it at all.

31
00:01:50,920 --> 00:01:54,700
We keep going, extracting
the minimum from our queue and

32
00:01:54,700 --> 00:01:58,820
exploring adjacent elements, until
the node we're looking for has been

33
00:01:58,820 --> 00:02:03,160
extracted from the queue or everything
else has a distance of infinity.

34
00:02:03,160 --> 00:02:05,600
Which means the path we're looking for
doesn't exist.

35
00:02:06,790 --> 00:02:10,560
The basic runtime of Dijkstra's is
the number of vertices squared.

36
00:02:11,700 --> 00:02:16,429
Since in the worst case, we visit every
node in the graph once or twice and

37
00:02:16,430 --> 00:02:19,190
every time we visit we need to
search through the queue to find

38
00:02:19,190 --> 00:02:19,930
the minimum element.

39
00:02:21,680 --> 00:02:25,712
There are a lot of optimizations for
Dijkstra's, if the priority queue is

40
00:02:25,712 --> 00:02:29,497
implemented really efficiently,
the runtime looks more like this.

41
00:02:29,497 --> 00:02:30,629
[BLANK_AUDIO]
