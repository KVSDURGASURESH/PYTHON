1
00:00:00,360 --> 00:00:04,515
Inserting an element into our tree,
when it has no order is relatively easy.

2
00:00:04,515 --> 00:00:07,970
We'll just talker node
onto another node.

3
00:00:07,970 --> 00:00:11,350
Maybe it's a leaf or
maybe it's a parent with only one child.

4
00:00:12,380 --> 00:00:15,435
We only need to make sure that
we're being the two children rule.

5
00:00:15,435 --> 00:00:18,255
We're given the root
at the beginning and

6
00:00:18,255 --> 00:00:21,410
we'll need to keep moving down
the tree until we find an open spot.

7
00:00:22,480 --> 00:00:25,120
How long will it take
to find an open spot?

8
00:00:25,120 --> 00:00:28,400
The worst case is that we
travel down the longest path

9
00:00:28,400 --> 00:00:29,770
until we find the farthest leaf.

10
00:00:30,910 --> 00:00:33,530
In that case we'll travel
through the number of nodes

11
00:00:33,530 --> 00:00:35,460
equal to the height of the tree.

12
00:00:35,460 --> 00:00:38,110
But what is the height of a binary tree?

13
00:00:38,110 --> 00:00:41,630
Like we did with our sorting algorithms,
let's look at some examples and

14
00:00:41,630 --> 00:00:43,120
reason through it.

15
00:00:43,120 --> 00:00:45,500
Here are two different trees.

16
00:00:45,500 --> 00:00:48,510
We can call these perfect trees,
since every node,

17
00:00:48,510 --> 00:00:51,120
except the leaves on the last level,
has two children.

18
00:00:52,160 --> 00:00:57,169
It looks like this tree with
3 nodes has 2 levels, and

19
00:00:57,170 --> 00:01:01,856
this one has 7 nodes and 1, 2, 3 levels.

20
00:01:01,856 --> 00:01:06,400
As the tree grows bigger each new level
has the capacity to hold a number of

21
00:01:06,400 --> 00:01:08,790
nodes equivalent to a power of 2.

22
00:01:08,790 --> 00:01:10,380
Mull over that for a second.

23
00:01:12,220 --> 00:01:14,640
Each node can have 2 children.

24
00:01:14,640 --> 00:01:19,390
So each new level can have twice as
many nodes as the one before it.

25
00:01:19,390 --> 00:01:22,310
Since we've gone back to
talking about powers of 2,

26
00:01:22,310 --> 00:01:24,790
your mind should jump to log (n).

27
00:01:24,790 --> 00:01:26,410
Does that apply here?

28
00:01:26,410 --> 00:01:28,100
Let's take a look.

29
00:01:28,100 --> 00:01:31,500
We see the same pattern that
we saw in binary search.

30
00:01:31,500 --> 00:01:35,640
The number of levels increases
near a power of two, and now,

31
00:01:35,640 --> 00:01:38,450
we have a good visualization
to understand why.

32
00:01:38,450 --> 00:01:42,270
At every level, we're adding
roughly twice as many elements.

33
00:01:42,270 --> 00:01:44,509
Every time we need to add a new level or

34
00:01:44,510 --> 00:01:48,790
in a binary search, divider our array
another time, it's because we're giving

35
00:01:48,790 --> 00:01:52,720
ourselves the space to allow for
about twice as many elements.

36
00:01:54,420 --> 00:01:57,280
Remember that we're adding
a power of two at each level.

37
00:01:57,280 --> 00:02:01,250
So when we count up the nodes overall
it won't be exactly a power of two.

38
00:02:02,410 --> 00:02:06,410
Having three levels doesn't mean
an overall node count of eight.

39
00:02:06,410 --> 00:02:09,978
But it does mean that the fourth level,
itself, will have eight elements in it.
