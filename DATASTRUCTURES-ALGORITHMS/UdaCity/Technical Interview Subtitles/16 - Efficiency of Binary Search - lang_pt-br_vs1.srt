1
00:00:00,000 --> 00:00:04,634
Vamos falar da eficiência
desse algoritmo com um novo exemplo.

2
00:00:05,467 --> 00:00:10,200
Temos aqui um arranjo com 8 elementos
e vamos procurar pelo número 10.

3
00:00:10,968 --> 00:00:13,534
Certo,
vamos começar pelo meio.

4
00:00:13,567 --> 00:00:18,167
Este problema é estranho, pois há
um número par de elementos no arranjo.

5
00:00:18,200 --> 00:00:20,634
Então podemos começar
pelo 4 ou 5.

6
00:00:22,234 --> 00:00:25,300
Ao criar um algoritmo,
você deve decidir logo

7
00:00:25,334 --> 00:00:29,133
se vai percorrer o lado inferior
ou o superior

8
00:00:29,167 --> 00:00:33,000
quando você se depara
com um exemplo estranho, sem meio.

9
00:00:33,033 --> 00:00:37,167
Vou percorrer o lado inferior,
começando pelo número 4.

10
00:00:37,200 --> 00:00:40,534
Como antes, vamos ver
se o 10 é maior ou menor

11
00:00:40,567 --> 00:00:42,400
que o número do meio.

12
00:00:42,434 --> 00:00:44,033
Como ele é maior,

13
00:00:44,067 --> 00:00:47,100
só temos que analisar
a 2ª metade do arranjo.

14
00:00:47,634 --> 00:00:50,434
De novo,
temos um número par de elementos,

15
00:00:50,434 --> 00:00:54,334
então escolheremos o número
à esquerda do meio.

16
00:00:54,367 --> 00:00:57,434
Bem, como 10 é maior que 6,

17
00:00:57,467 --> 00:01:01,634
podemos dividir nosso array
e ficar só com a parte de cima.

18
00:01:01,667 --> 00:01:03,968
Temos um número par
de elementos,

19
00:01:04,000 --> 00:01:07,400
então vamos verificar
o lado inferior.

20
00:01:07,434 --> 00:01:10,367
Como 10 é maior que 7,
o elemento do meio,

21
00:01:10,400 --> 00:01:12,801
sobrou apenas
o último elemento.

22
00:01:12,834 --> 00:01:17,267
Como nosso número ainda é maior
que o elemento mais alto do arranjo,

23
00:01:17,300 --> 00:01:20,734
sabemos que ele não existe
e podemos seguir adiante.

24
00:01:20,767 --> 00:01:24,801
Como a eficiência temporal
é o número de etapas necessárias,

25
00:01:24,834 --> 00:01:28,267
vigiar cada iteração nos ajudará
a compreendê-la.

26
00:01:29,400 --> 00:01:32,534
Antes, tínhamos
que passar por cada elemento,

27
00:01:32,567 --> 00:01:36,634
mas aqui dividimos o arranjo
e só analisamos alguns elementos.

28
00:01:36,667 --> 00:01:41,133
Assim, a eficiência
não será tão grande quanto O(n).

29
00:01:41,734 --> 00:01:45,634
Criei uma tabela
para vermos o tamanho do arranjo

30
00:01:45,667 --> 00:01:49,434
em contraste com o número
de iterações do algoritmo.

31
00:01:49,467 --> 00:01:52,667
Como vimos,
usamos o nosso algoritmo 4 vezes

32
00:01:52,701 --> 00:01:54,601
para um arranjo
de 8 elementos.

33
00:01:54,634 --> 00:01:57,133
Estamos falando
do pior caso possível.

34
00:01:57,167 --> 00:02:01,400
Eu podia ter tentado pôr um número
entre os espaços e por fora

35
00:02:01,434 --> 00:02:03,501
para descobrir o pior caso.

36
00:02:03,534 --> 00:02:07,200
Para poupar tempo,
fiz isso antes da gravação.

37
00:02:07,234 --> 00:02:10,067
No processo,
também descobri um truque.

38
00:02:10,100 --> 00:02:13,367
Para garantir
que está analisando o pior caso,

39
00:02:13,400 --> 00:02:17,067
escolha um elemento maior
do que todos no arranjo.

40
00:02:17,100 --> 00:02:21,067
E, quando vir um meio assim,
sempre escolha o lado inferior.

41
00:02:21,100 --> 00:02:24,400
Comprove sozinho
para ter certeza de que funciona,

42
00:02:24,434 --> 00:02:26,434
mas, agora,
acredite em mim.

43
00:02:26,467 --> 00:02:31,400
Para um arranjo de 8 elementos,
temos 4 iterações no pior caso.

44
00:02:31,434 --> 00:02:34,567
Podemos usar os resultados
do 1º exemplo também.

45
00:02:34,601 --> 00:02:38,834
Nele, fizemos 3 iterações
num arranjo de 7 elementos.

46
00:02:38,868 --> 00:02:42,267
Vamos pensar agora em arranjos
de tamanhos diferentes.

47
00:02:42,300 --> 00:02:46,934
Se estivesse procurando por 30, por
exemplo, em um arranjo de um elemento,

48
00:02:46,968 --> 00:02:49,667
você faria só uma iteração
para descobrir

49
00:02:49,701 --> 00:02:52,334
se o elemento existe
ou não.

50
00:02:52,367 --> 00:02:54,834
Ótimo, podemos adicionar "1"
à tabela.

51
00:02:54,868 --> 00:02:59,934
Agora temos um arranjo de 2 elementos
e queremos achar o número 23.

52
00:02:59,968 --> 00:03:02,501
Novamente,
vou usar aquele truque.

53
00:03:02,534 --> 00:03:05,701
Escolhi um número maior
que os do arranjo.

54
00:03:05,734 --> 00:03:09,834
E, quando tenho um meio assim,
sempre vou para o lado inferior.

55
00:03:09,868 --> 00:03:12,334
Quando há um número par
de elementos,

56
00:03:12,367 --> 00:03:15,467
escolho o número à esquerda
do meio.

57
00:03:15,501 --> 00:03:19,667
Como 23 é maior que 18,
posso verificar o 21 agora.

58
00:03:19,701 --> 00:03:24,367
Em apenas duas iterações,
descobri que 23 não existe aqui.

59
00:03:24,400 --> 00:03:26,934
Ótimo, podemos pôr "2"
na tabela agora.

60
00:03:26,968 --> 00:03:30,667
Para poupar tempo,
não vou analisar todos os exemplos.

61
00:03:30,701 --> 00:03:34,467
Mas seria bom comprová-los
você mesmo.

62
00:03:35,334 --> 00:03:39,133
Estamos começando a ter uma ideia
da nossa eficiência.

63
00:03:39,167 --> 00:03:41,234
Percebi que 4 é metade
de 8,

64
00:03:41,267 --> 00:03:44,567
então talvez nossa eficiência
seja assim.

65
00:03:44,601 --> 00:03:47,167
Lembre-se
que é apenas uma aproximação.

66
00:03:47,200 --> 00:03:51,000
Em vez de contar o número total
de iterações no algoritmo,

67
00:03:51,033 --> 00:03:54,634
conto apenas o número de vezes
que preciso executá-lo.

68
00:03:54,667 --> 00:03:57,167
Neste caso,
4 quando meu n é 8.

69
00:03:57,834 --> 00:04:02,000
Não sei se isso é verdade,
já que a metade de 2 não é 2

70
00:04:02,033 --> 00:04:03,767
e a metade de 1 não é 1.

71
00:04:04,300 --> 00:04:05,300
Que pena.

72
00:04:05,334 --> 00:04:09,334
Acho que o número 2
deveria entrar nessa eficiência,

73
00:04:09,367 --> 00:04:13,701
já que corto o arranjo pela metade
quando executo o algoritmo.

74
00:04:13,734 --> 00:04:16,934
Deixe-me pensar exatamente
no que isso significa.

75
00:04:16,968 --> 00:04:20,601
Como corto o arranjo pela metade
a cada iteração,

76
00:04:20,634 --> 00:04:23,434
sempre que dobro o número
de elementos,

77
00:04:23,467 --> 00:04:26,200
preciso fazer
uma iteração adicional.

78
00:04:26,234 --> 00:04:27,868
Pensando nisso,

79
00:04:27,901 --> 00:04:32,000
isso parece ser verdade,
vendo os resultados da tabela.

80
00:04:32,033 --> 00:04:34,334
Sempre que duplico
meu arranjo,

81
00:04:34,367 --> 00:04:38,334
preciso fazer uma iteração extra
do algoritmo.

82
00:04:38,367 --> 00:04:41,334
Se eu representar os elementos
com expoentes,

83
00:04:41,367 --> 00:04:45,300
as potências acima do 2
serão sempre um número maior

84
00:04:45,334 --> 00:04:47,400
que o número de iterações.

85
00:04:48,434 --> 00:04:52,467
Então talvez minha eficiência
seja assim.

86
00:04:52,501 --> 00:04:55,901
O número total de iterações
aumentará

87
00:04:55,934 --> 00:04:59,901
sempre que o expoente
da potência de 2 aumentar,

88
00:04:59,934 --> 00:05:02,434
e, claro,
só precisa adicionar 1.

89
00:05:02,467 --> 00:05:06,167
Como um número ou expressão
pode representar isso,

90
00:05:06,200 --> 00:05:09,000
o expoente
da potência de 2?

91
00:05:09,033 --> 00:05:12,767
Vou começar com isso,
o número de elementos do arranjo,

92
00:05:12,801 --> 00:05:16,133
e quero chegar a este número,
o expoente.

93
00:05:16,167 --> 00:05:20,267
Eu me lembro de uma operação
matemática estranha que eu fazia.

94
00:05:20,300 --> 00:05:21,968
Ela é o logaritmo,

95
00:05:22,000 --> 00:05:25,801
que pode expressar este tipo
de função de forma diferente.

96
00:05:25,834 --> 00:05:30,868
Em vez disto, poderia dizer:
log de 8 na base 2 é igual a 3.

97
00:05:30,901 --> 00:05:33,033
E significa a mesma coisa.

98
00:05:33,067 --> 00:05:35,801
Certo,
isso parece um pouco melhor.

99
00:05:35,834 --> 00:05:40,234
Você não precisa saber muito
sobre como logaritmos funcionam

100
00:05:40,267 --> 00:05:41,701
para entender isso.

101
00:05:41,734 --> 00:05:45,968
Entender as equações anteriores
é o suficiente.

102
00:05:46,000 --> 00:05:50,234
Podemos fazer outra aproximação
para isso ficar ainda melhor.

103
00:05:50,267 --> 00:05:53,634
Como eu disse antes,
adicionar uma constante ou 1

104
00:05:53,667 --> 00:05:56,634
não muda muito
minha eficiência.

105
00:05:57,267 --> 00:06:01,133
Também não preciso dizer
que é um logaritmo na base 2.

106
00:06:01,167 --> 00:06:04,000
Na Ciência da Computação,
é seguro presumir

107
00:06:04,033 --> 00:06:06,000
que seus logs estão
na base 2.

108
00:06:06,033 --> 00:06:10,267
É comum dividirmos arranjos
ou usarmos sistemas binários.

109
00:06:10,300 --> 00:06:15,300
Então os logs geralmente estarão
na base 2, não na base 10 habitual.

110
00:06:15,334 --> 00:06:18,868
Então ficamos
com esta eficiência.

111
00:06:18,901 --> 00:06:21,000
Mais tarde,
teremos mais ferramentas,

112
00:06:21,033 --> 00:06:23,567
aí será fácil
mostrar visualmente

113
00:06:23,601 --> 00:06:26,334
por que esta eficiência
faz sentido.

114
00:06:26,834 --> 00:06:29,834
Quero deixar algo
muito claro agora.

115
00:06:30,501 --> 00:06:32,234
Quando aprendi eficiência,

116
00:06:32,267 --> 00:06:35,801
parecia que as pessoas
logo deduziam isso.

117
00:06:36,634 --> 00:06:41,334
Elas viam o problema original
e diziam: "Claro que é log(n)".

118
00:06:41,367 --> 00:06:43,701
Porém,
depois de ganhar experiência,

119
00:06:43,734 --> 00:06:46,000
vi que não era bem assim.

120
00:06:46,601 --> 00:06:51,601
Descobri que há 3 maneiras centrais
de se chegar a esta eficiência.

121
00:06:51,634 --> 00:06:55,934
Umas delas é saber
como é uma busca binária,

122
00:06:55,968 --> 00:07:00,801
memorizá-la e dizer na lata
quando a vir de novo.

123
00:07:00,834 --> 00:07:02,834
Recomendo que você decore

124
00:07:02,868 --> 00:07:06,567
a eficiência de algoritmos básicos
para suas entrevistas.

125
00:07:06,601 --> 00:07:11,300
Você parecerá bem esperto
se disser a eficiência de início.

126
00:07:11,334 --> 00:07:13,701
Porém,
se você vir um problema novo

127
00:07:13,734 --> 00:07:16,767
e não souber a eficiência
do algoritmo,

128
00:07:16,801 --> 00:07:19,400
você precisará resolvê-lo
sozinho.

129
00:07:19,434 --> 00:07:22,033
Você pode fazer isso
com provas.

130
00:07:22,067 --> 00:07:25,634
Eu não gosto delas,
nunca usei em entrevistas

131
00:07:25,667 --> 00:07:28,567
nem vi outras pessoas usarem
em entrevistas.

132
00:07:28,601 --> 00:07:31,934
Se quiser aprender a fazer provas,
procure on-line,

133
00:07:31,968 --> 00:07:35,567
leia artigos
e veja outros usarem-nas.

134
00:07:35,601 --> 00:07:39,200
Porém, meu objetivo
é ensinar a abordagem prática.

135
00:07:39,868 --> 00:07:41,801
Se você nunca viu
o algoritmo

136
00:07:41,834 --> 00:07:45,267
e não tem tempo
de preparar uma prova do nada,

137
00:07:45,300 --> 00:07:49,801
fazer uma tabela assim
é uma das melhores soluções.

138
00:07:49,834 --> 00:07:53,734
Criar uma tabela de resultados
ajuda você a perceber padrões

139
00:07:53,767 --> 00:07:57,300
e a pensar em eficiência
quanto ao tamanho do arranjo

140
00:07:57,334 --> 00:08:00,701
em contraste com o número
de iterações do algoritmo.

141
00:08:00,734 --> 00:08:02,734
Quando aprendi eficiência,

142
00:08:02,767 --> 00:08:06,300
precisava de tabelas assim
para enxergar os padrões.

143
00:08:06,334 --> 00:08:08,834
Porém,
depois de usá-las por um tempo,

144
00:08:08,868 --> 00:08:12,567
passei a enxergar os padrões
sozinha, sem elas.

145
00:08:12,601 --> 00:08:16,634
Agora, quando sou entrevistada,
sei quais padrões são comuns,

146
00:08:16,667 --> 00:08:19,067
como as mudanças
nas potências de 2.

147
00:08:19,100 --> 00:08:21,601
Agora resolvo problemas
mais depressa,

148
00:08:21,634 --> 00:08:25,968
e são poucos os que não posso,
ao menos, tentar resolver.

149
00:08:26,000 --> 00:08:30,367
O pior a ser feito em entrevistas
é dizer que nunca viu o algoritmo

150
00:08:30,400 --> 00:08:33,067
ou que não sabe fazer
uma prova para ele.

151
00:08:33,100 --> 00:08:36,433
Se estiver com azar
e não souber mesmo a resposta,

152
00:08:36,467 --> 00:08:40,000
por favor, faça uma tabela
e tente descobrir.

153
00:08:40,033 --> 00:08:44,400
Seu empenho irá impressionar
bastante seu entrevistador.
